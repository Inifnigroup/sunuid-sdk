{"version":3,"file":"sunuid-sdk.min.js","sources":["../src/sunuid-sdk.js"],"sourcesContent":["/**\n * SunuID SDK - Package d'int√©gration pour partenaires\n * \n * @version 1.0.0\n * @author SunuID Team\n * @license MIT\n */\n\n(function(window) {\n    'use strict';\n\n    // Configuration par d√©faut\n    const DEFAULT_CONFIG = {\n        apiUrl: window.SunuIDConfig?.apiUrl || 'https://api.sunuid.fayma.sn',\n        clientId: null,\n        secretId: null,\n        type: 2, // Type par d√©faut (2 = authentification)\n        partnerName: 'SunuID', // Nom du partenaire par d√©faut\n        theme: 'light',\n        language: 'fr',\n        autoRefresh: true,\n        refreshInterval: 30000, // 30 secondes\n        onSuccess: null,\n        onError: null,\n        onStatusUpdate: null,\n        onExpired: null,\n        // Nouvelles options de s√©curit√©\n        enableSecurityLogs: true,\n        validateInputs: true,\n        maxRetries: 3,\n        requestTimeout: 10000, // 10 secondes\n        // Options d'initialisation s√©curis√©e\n        secureInit: false,\n        secureInitUrl: window.SunuIDConfig?.apiUrl?.replace('/api', '') + '/secure-init.php' || 'https://sunuid.fayma.sn/secure-init.php',\n        token: null\n    };\n\n    /**\n     * Classe principale SunuID\n     */\n    class SunuID {\n        constructor(config = {}) {\n            this.config = { ...DEFAULT_CONFIG, ...config };\n            this.qrCode = null;\n            this.refreshTimer = null;\n            this.isInitialized = false;\n            this.socket = null;\n            \n            // Initialisation asynchrone\n            this.initPromise = this.init();\n        }\n\n        /**\n         * Initialisation du SDK\n         */\n        async init() {\n            try {\n                // Initialisation s√©curis√©e si activ√©e\n                if (this.config.secureInit) {\n                    await this.secureInit();\n                } else {\n                    // Validation s√©curis√©e des param√®tres\n                    if (this.config.validateInputs) {\n                        this.validateSecurityParams();\n                    }\n                }\n\n                // Log de s√©curit√© pour l'initialisation\n                this.logSecurityEvent('SDK_INIT_START', {\n                    apiUrl: this.config.apiUrl,\n                    type: this.config.type,\n                    partnerName: this.config.partnerName,\n                    secureInit: this.config.secureInit\n                });\n\n                // Obscurcir les credentials dans les logs\n                this.obfuscateCredentials();\n\n                this.isInitialized = true;\n                console.log('SunuID SDK initialis√© avec succ√®s');\n                \n                this.logSecurityEvent('SDK_INIT_SUCCESS');\n                \n                // Initialiser la connexion WebSocket\n                this.initWebSocket();\n                \n            } catch (error) {\n                this.logSecurityEvent('SDK_INIT_ERROR', { error: error.message });\n                throw error;\n            }\n        }\n\n        /**\n         * Initialisation s√©curis√©e via PHP\n         */\n        async secureInit() {\n            try {\n                this.logSecurityEvent('SECURE_INIT_START');\n                \n                const initData = {\n                    type: this.config.type,\n                    partnerName: this.config.partnerName,\n                    theme: this.config.theme\n                };\n\n                const response = await fetch(this.config.secureInitUrl, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json'\n                    },\n                    body: JSON.stringify(initData)\n                });\n\n                if (!response.ok) {\n                    throw new Error(`Erreur HTTP: ${response.status}`);\n                }\n\n                const result = await response.json();\n                \n                if (!result.success) {\n                    throw new Error(result.error || 'Erreur lors de l\\'initialisation s√©curis√©e');\n                }\n\n                // Stocker le token et les donn√©es s√©curis√©es\n                this.config.token = result.data.token;\n                this.config.apiUrl = result.data.api_url;\n                \n                // D√©coder le token pour r√©cup√©rer les credentials\n                const decodedToken = this.decodeSecureToken(result.data.token);\n                if (decodedToken) {\n                    this.config.clientId = decodedToken.client_id;\n                    this.config.secretId = decodedToken.secret_id;\n                } else {\n                    throw new Error('Impossible de d√©coder le token s√©curis√©');\n                }\n                \n                this.config.expiresIn = result.data.expires_in;\n                this.config.maxRequests = result.data.max_requests;\n                this.config.requestCount = 0;\n\n                this.logSecurityEvent('SECURE_INIT_SUCCESS', {\n                    expiresIn: result.data.expires_in,\n                    maxRequests: result.data.max_requests\n                });\n\n                console.log('‚úÖ Initialisation s√©curis√©e r√©ussie');\n                \n            } catch (error) {\n                this.logSecurityEvent('SECURE_INIT_ERROR', { error: error.message });\n                throw new Error(`√âchec de l'initialisation s√©curis√©e: ${error.message}`);\n            }\n        }\n\n        /**\n         * D√©coder le token s√©curis√©\n         */\n        decodeSecureToken(token) {\n            try {\n                const parts = token.split('.');\n                if (parts.length !== 2) {\n                    console.error('‚ùå Format de token invalide');\n                    return null;\n                }\n                \n                const [payload, signature] = parts;\n                \n                // D√©coder le payload (base64)\n                const decodedPayload = atob(payload);\n                const tokenData = JSON.parse(decodedPayload);\n                \n                // V√©rifier l'expiration\n                if (tokenData.exp && tokenData.exp < Date.now() / 1000) {\n                    console.error('‚ùå Token expir√©');\n                    return null;\n                }\n                \n                console.log('‚úÖ Token d√©cod√© avec succ√®s');\n                return tokenData;\n                \n            } catch (error) {\n                console.error('‚ùå Erreur d√©codage token:', error);\n                return null;\n            }\n        }\n\n        /**\n         * Initialiser la connexion WebSocket\n         */\n        initWebSocket() {\n            try {\n                // V√©rifier si Socket.IO est disponible\n                if (typeof io === 'undefined') {\n                    console.warn('‚ö†Ô∏è Socket.IO non disponible, WebSocket sera initialis√© plus tard');\n                    // R√©essayer apr√®s un d√©lai\n                    setTimeout(() => this.initWebSocket(), 1000);\n                    return;\n                }\n                \n                // Obtenir l'IP du client (simulation)\n                const ip = this.getClientIP();\n                \n                // Initialiser la connexion WebSocket si elle n'existe pas\n                if (!this.socket) {\n                    this.socket = io('wss://samasocket.fayma.sn:9443', {\n                        query: {\n                            token: this.config.clientId,\n                            type: 'web',\n                            userId: this.config.clientId,\n                            username: ip\n                        }\n                    });\n\n                    // Gestion des √©v√©nements WebSocket\n                    this.socket.on('connect', () => {\n                        console.log('üåê WebSocket connect√© avec succ√®s');\n                        console.log('üìä Socket ID:', this.socket.id);\n                    });\n\n                    this.socket.on('disconnect', (reason) => {\n                        console.log('‚ùå WebSocket d√©connect√©:', reason);\n                    });\n\n                    this.socket.on('connect_error', (error) => {\n                        console.error('‚ùå Erreur connexion WebSocket:', error);\n                    });\n\n                    // √âcouter les √©v√©nements sp√©cifiques\n                    this.socket.on('qr_status_update', (data) => {\n                        console.log('üì± Mise √† jour statut QR re√ßue:', data);\n                        this.handleQRStatusUpdate(data);\n                    });\n\n                    this.socket.on('qr_scan_success', (data) => {\n                        console.log('‚úÖ Scan QR r√©ussi re√ßu:', data);\n                        this.handleQRScanSuccess(data);\n                    });\n\n                    this.socket.on('qr_expired', (data) => {\n                        console.log('‚è∞ QR expir√© re√ßu:', data);\n                        this.handleQRExpired(data);\n                    });\n                }\n            } catch (error) {\n                console.error('‚ùå Erreur initialisation WebSocket:', error);\n            }\n        }\n\n        /**\n         * Obtenir l'IP du client (simulation)\n         */\n        getClientIP() {\n            // Simulation - en production, vous pourriez utiliser un service d'IP\n            return '127.0.0.1';\n        }\n\n        /**\n         * Obtenir le nom du type √† partir du num√©ro\n         */\n        getTypeName(type) {\n            switch(type) {\n                case 1: return 'KYC';\n                case 2: return 'AUTH';\n                case 3: return 'SIGNATURE';\n                default: return `TYPE-${type}`;\n            }\n        }\n\n        /**\n         * Validation s√©curis√©e des param√®tres\n         */\n        validateSecurityParams() {\n            const errors = [];\n            \n            // Validation du clientId\n            if (!this.config.clientId || typeof this.config.clientId !== 'string') {\n                errors.push('clientId invalide ou manquant');\n            } else if (this.config.clientId.length < 10) {\n                errors.push('clientId trop court');\n            }\n            \n            // Validation du secretId\n            if (!this.config.secretId || typeof this.config.secretId !== 'string') {\n                errors.push('secretId invalide ou manquant');\n            } else if (this.config.secretId.length < 32) {\n                errors.push('secretId trop court (minimum 32 caract√®res)');\n            }\n            \n            // Validation de l'URL API\n            if (!this.config.apiUrl || !this.isValidUrl(this.config.apiUrl)) {\n                errors.push('apiUrl invalide');\n            }\n            \n            // Validation du type\n            if (![1, 2, 3].includes(this.config.type)) {\n                errors.push('type invalide (doit √™tre 1, 2 ou 3)');\n            }\n            \n            if (errors.length > 0) {\n                this.logSecurityEvent('VALIDATION_ERROR', { errors });\n                throw new Error(`Param√®tres de s√©curit√© invalides: ${errors.join(', ')}`);\n            }\n            \n            this.logSecurityEvent('VALIDATION_SUCCESS');\n        }\n\n        /**\n         * Validation d'URL s√©curis√©e\n         */\n        isValidUrl(string) {\n            try {\n                const url = new URL(string);\n                return url.protocol === 'https:' || url.protocol === 'http:';\n            } catch (_) {\n                return false;\n            }\n        }\n\n        /**\n         * Logs de s√©curit√©\n         */\n        logSecurityEvent(event, data = {}) {\n            if (!this.config.enableSecurityLogs) return;\n            \n            const securityLog = {\n                timestamp: new Date().toISOString(),\n                event: event,\n                data: data,\n                userAgent: navigator.userAgent,\n                url: window.location.href\n            };\n            \n            console.warn('üîí [SECURITY]', securityLog);\n            \n            // Stocker les logs de s√©curit√© (optionnel)\n            if (!window.SunuIDSecurityLogs) {\n                window.SunuIDSecurityLogs = [];\n            }\n            window.SunuIDSecurityLogs.push(securityLog);\n        }\n\n        /**\n         * Chiffrement simple des credentials (pour √©viter l'exposition en clair)\n         */\n        obfuscateCredentials() {\n            // Stocker les vraies valeurs pour les logs de s√©curit√©\n            this.config.originalClientId = this.config.clientId;\n            this.config.originalSecretId = this.config.secretId;\n            \n            // Cr√©er des versions obfusqu√©es pour l'affichage uniquement\n            if (this.config.clientId) {\n                this.config.clientIdDisplay = this.config.clientId.replace(/(.{3}).*(.{3})/, '$1***$2');\n            }\n            if (this.config.secretId) {\n                this.config.secretIdDisplay = this.config.secretId.replace(/(.{4}).*(.{4})/, '$1***$2');\n            }\n        }\n\n        /**\n         * Validation des entr√©es utilisateur\n         */\n        sanitizeInput(input) {\n            if (typeof input !== 'string') return input;\n            \n            // Protection contre les injections XSS basiques\n            return input\n                .replace(/[<>]/g, '') // Supprimer les balises HTML\n                .replace(/javascript:/gi, '') // Supprimer les protocoles dangereux\n                .trim();\n        }\n\n        /**\n         * G√©rer la mise √† jour du statut QR\n         */\n        handleQRStatusUpdate(data) {\n            if (this.config.onStatusUpdate) {\n                this.config.onStatusUpdate(data);\n            }\n        }\n\n        /**\n         * G√©rer le succ√®s du scan QR\n         */\n        handleQRScanSuccess(data) {\n            if (this.config.onSuccess) {\n                this.config.onSuccess(data);\n            }\n        }\n\n        /**\n         * G√©rer l'expiration du QR\n         */\n        handleQRExpired(data) {\n            if (this.config.onExpired) {\n                this.config.onExpired(data);\n            }\n        }\n\n        /**\n         * √âmettre un √©v√©nement WebSocket\n         */\n        emitWebSocketEvent(event, data) {\n            if (this.socket && this.socket.connected) {\n                this.socket.emit(event, data);\n                console.log(`üì§ √âv√©nement WebSocket √©mis: ${event}`, data);\n            } else if (typeof io === 'undefined') {\n                console.warn('‚ö†Ô∏è Socket.IO non disponible, impossible d\\'√©mettre l\\'√©v√©nement:', event);\n            } else {\n                console.warn('‚ö†Ô∏è WebSocket non connect√©, impossible d\\'√©mettre l\\'√©v√©nement:', event);\n            }\n        }\n\n        /**\n         * Obtenir le statut de la connexion WebSocket\n         */\n        getWebSocketStatus() {\n            if (!this.socket) {\n                return 'not_initialized';\n            }\n            return this.socket.connected ? 'connected' : 'disconnected';\n        }\n\n        /**\n         * Forcer l'initialisation WebSocket (si Socket.IO devient disponible plus tard)\n         */\n        forceWebSocketInit() {\n            if (typeof io !== 'undefined' && !this.socket) {\n                console.log('üîÑ For√ßage de l\\'initialisation WebSocket...');\n                this.initWebSocket();\n            }\n        }\n\n        /**\n         * G√©n√©rer un QR code avec le type configur√©\n         */\n        async generateQR(containerId, options = {}) {\n            // Attendre l'initialisation si n√©cessaire\n            if (this.initPromise) {\n                await this.initPromise;\n                this.initPromise = null;\n            }\n            \n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-generate', {\n                    type: this.config.type, // Utilise le type configur√©\n                    ...options\n                });\n\n                if (response.success) {\n                    // Construire l'URL compl√®te de l'image QR avec la base URL pour les images\n                    const imageBaseUrl = 'https://sunuid.fayma.sn';\n                    const qrImageUrl = `${imageBaseUrl}${response.data.qrcode}`;\n                    this.currentQRUrl = qrImageUrl; // Stocker l'URL pour getQRCode()\n                    this.displayQRCode(containerId, qrImageUrl, this.config.type, options);\n                    \n                    // G√©n√©rer le QR code personnalis√© avec le type + code de l'API + socket ID\n                    if (this.pendingQRInfo && response.data.code) {\n                        // Attendre que le socket ID soit bien d√©fini\n                        const waitForSocketId = () => {\n                            if (this.socket && this.socket.id && this.socket.id !== 'unknown') {\n                                const socketId = this.socket.id;\n                                const qrContent = `${this.config.type}-${response.data.code}-${socketId}`;\n                                \n                                // Utiliser le partnerName de la r√©ponse API et le nom du type\n                                const partnerName = response.data.partnerName || this.config.partnerName || 'SunuID';\n                                const typeName = this.getTypeName(this.config.type);\n                                const qrLabel = `${typeName} - ${partnerName}`;\n                                \n                                this.generateCustomQRCode(qrContent, qrLabel, this.pendingQRInfo.options);\n                                this.pendingQRInfo = null; // Nettoyer\n                            } else {\n                                // R√©essayer apr√®s un d√©lai si le socket ID n'est pas encore disponible\n                                setTimeout(waitForSocketId, 100);\n                            }\n                        };\n                        \n                        waitForSocketId();\n                    }\n                    \n                    this.startAutoRefresh(containerId, this.config.type, options);\n                    \n                    // √âmettre un √©v√©nement WebSocket pour la g√©n√©ration du QR\n                    this.emitWebSocketEvent('qr_generated', {\n                        serviceId: response.data.service_id,\n                        type: this.config.type,\n                        qrCodeUrl: qrImageUrl,\n                        code: response.data.code,\n                        timestamp: Date.now()\n                    });\n                    \n                    return {\n                        ...response.data,\n                        qrCodeUrl: qrImageUrl,\n                        sessionId: response.data.service_id\n                    };\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la g√©n√©ration du QR code');\n                }\n            } catch (error) {\n                console.error('Erreur API d√©tect√©e:', error.message);\n                console.error('Stack trace complet:', error.stack);\n                console.error('Configuration SDK:', {\n                    apiUrl: this.config.apiUrl,\n                    type: this.config.type,\n                    secureInit: this.config.secureInit,\n                    clientId: this.config.clientId ? '***' + this.config.clientId.slice(-4) : 'null',\n                    secretId: this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null'\n                });\n                console.log('Affichage du message \"Service non disponible\" pour type ' + this.config.type);\n                this.displayServiceUnavailable(containerId, this.config.type);\n                throw new Error('Service non disponible');\n            }\n        }\n\n\n\n        /**\n         * G√©n√©rer un QR code avec un type personnalis√©\n         */\n        async generateCustomQR(containerId, type, options = {}) {\n            // Attendre l'initialisation si n√©cessaire\n            if (this.initPromise) {\n                await this.initPromise;\n                this.initPromise = null;\n            }\n            \n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-generate', {\n                    type: type, // Type personnalis√© (1, 2, 3, etc.)\n                    ...options\n                });\n\n                if (response.success) {\n                    // Construire l'URL compl√®te de l'image QR avec la base URL pour les images\n                    const imageBaseUrl = 'https://sunuid.fayma.sn';\n                    const qrImageUrl = `${imageBaseUrl}${response.data.qrcode}`;\n                    this.displayQRCode(containerId, qrImageUrl, type, options);\n                    \n                    // G√©n√©rer le QR code personnalis√© avec le type + code de l'API + socket ID\n                    if (this.pendingQRInfo && response.data.code) {\n                        // Attendre que le socket ID soit bien d√©fini\n                        const waitForSocketId = () => {\n                            if (this.socket && this.socket.id && this.socket.id !== 'unknown') {\n                                const socketId = this.socket.id;\n                                const qrContent = `${type}-${response.data.code}-${socketId}`;\n                                \n                                // Utiliser le partnerName de la r√©ponse API et le nom du type\n                                const partnerName = response.data.partnerName || this.config.partnerName || 'SunuID';\n                                const typeName = this.getTypeName(type);\n                                const qrLabel = `${typeName} - ${partnerName}`;\n                                \n                                this.generateCustomQRCode(qrContent, qrLabel, this.pendingQRInfo.options);\n                                this.pendingQRInfo = null; // Nettoyer\n                            } else {\n                                // R√©essayer apr√®s un d√©lai si le socket ID n'est pas encore disponible\n                                setTimeout(waitForSocketId, 100);\n                            }\n                        };\n                        \n                        waitForSocketId();\n                    }\n                    \n                    this.startAutoRefresh(containerId, type, options);\n                    return {\n                        ...response.data,\n                        qrCodeUrl: qrImageUrl,\n                        sessionId: response.data.service_id\n                    };\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la g√©n√©ration du QR code');\n                }\n            } catch (error) {\n                console.error('Erreur API d√©tect√©e:', error.message);\n                console.error('Stack trace complet:', error.stack);\n                console.error('Configuration SDK (Custom):', {\n                    apiUrl: this.config.apiUrl,\n                    type: type,\n                    secureInit: this.config.secureInit,\n                    clientId: this.config.clientId ? '***' + this.config.clientId.slice(-4) : 'null',\n                    secretId: this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null'\n                });\n                console.log('Affichage du message \"Service non disponible\" pour type ' + type);\n                this.displayServiceUnavailable(containerId, type);\n                throw new Error('Service non disponible');\n            }\n        }\n\n        // Alias pour maintenir la compatibilit√©\n        async generateAuthQR(containerId, options = {}) {\n            return this.generateQR(containerId, options);\n        }\n\n        async generateKYCQR(containerId, options = {}) {\n            // Sauvegarder le type actuel\n            const originalType = this.config.type;\n            // Changer temporairement le type pour KYC\n            this.config.type = 1;\n            try {\n                return await this.generateQR(containerId, options);\n            } finally {\n                // Restaurer le type original\n                this.config.type = originalType;\n            }\n        }\n\n        async generateSignatureQR(containerId, options = {}) {\n            // Sauvegarder le type actuel\n            const originalType = this.config.type;\n            // Changer temporairement le type pour Signature\n            this.config.type = 3;\n            try {\n                return await this.generateQR(containerId, options);\n            } finally {\n                // Restaurer le type original\n                this.config.type = originalType;\n            }\n        }\n\n        /**\n         * V√©rifier le statut d'un QR code\n         */\n        async checkQRStatus(sessionId) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-status', {\n                    serviceId: sessionId\n                });\n\n                if (response.success) {\n                    return response.data;\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la v√©rification du statut');\n                }\n            } catch (error) {\n                this.handleError(error);\n                throw error;\n            }\n        }\n\n        /**\n         * Afficher un QR code dans un conteneur\n         */\n        displayQRCode(containerId, qrUrl, type, options = {}) {\n            const container = document.getElementById(containerId);\n            if (!container) {\n                throw new Error(`Conteneur avec l'ID \"${containerId}\" non trouv√©`);\n            }\n\n            // Nettoyer le conteneur\n            container.innerHTML = '';\n\n            // Cr√©er l'√©l√©ment QR code\n            const qrElement = document.createElement('div');\n            qrElement.className = 'sunuid-qr-code';\n            \n            // Afficher un loader en attendant la r√©ponse API et la connexion socket\n            const typeName = this.getTypeName(type);\n            qrElement.innerHTML = `\n                <div class=\"sunuid-qr-header\">\n                    <h3>${type === 1 ? 'V√©rification KYC' : type === 2 ? 'Authentification' : type === 3 ? 'Signature' : 'Service Type ' + type}</h3>\n                </div>\n                <div class=\"sunuid-qr-image\" id=\"sunuid-qr-container\">\n                    <div style=\"text-align: center; padding: 40px;\">\n                        <div class=\"sunuid-loader\">\n                            <div class=\"sunuid-spinner\"></div>\n                            <p style=\"margin-top: 20px; color: #666;\">Initialisation en cours...</p>\n                            <p style=\"font-size: 12px; color: #999; margin-top: 10px;\">Connexion API et WebSocket</p>\n                            <p style=\"font-size: 11px; color: #ccc; margin-top: 5px;\">Attente du Socket ID...</p>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"sunuid-qr-instructions\" style=\"display: none;\">\n                    <p>Scannez ce QR code avec l'application ${this.config.partnerName} pour vous connecter</p>\n                </div>\n                <div class=\"sunuid-qr-status\" id=\"sunuid-status\" style=\"display: none;\">\n                    <p>En attente de scan...</p>\n                </div>\n            `;\n\n            container.appendChild(qrElement);\n\n            // Stocker les informations pour la g√©n√©ration ult√©rieure\n            this.pendingQRInfo = {\n                containerId,\n                type,\n                options\n            };\n\n            // Appliquer le th√®me\n            this.applyTheme(options.theme || this.config.theme);\n        }\n\n        /**\n         * G√©n√©rer un QR code personnalis√© avec PHP Endroid\n         */\n        async generateCustomQRCode(content, label, options = {}) {\n            try {\n                console.log('üé® D√©but g√©n√©ration QR personnalis√© avec PHP...');\n                console.log('üìÑ Contenu:', content);\n                console.log('üè∑Ô∏è Label:', label);\n                \n                const qrContainer = document.getElementById('sunuid-qr-container');\n                if (!qrContainer) {\n                    console.error('‚ùå QR container not found');\n                    this.displayFallbackImage();\n                    return;\n                }\n                \n                console.log('‚úÖ QR container trouv√©');\n\n                // Nettoyer le conteneur\n                qrContainer.innerHTML = '<div style=\"text-align: center; padding: 20px;\"><p>G√©n√©ration QR code avec PHP...</p></div>';\n\n                // Appeler l'endpoint PHP\n                console.log('üîÑ Appel endpoint PHP...');\n                const qrGeneratorUrl = this.config.apiUrl.replace('/api', '') + '/qr-generator.php';\n                const response = await fetch(qrGeneratorUrl, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        content: content,\n                        label: label,\n                        size: 300,\n                        margin: 10\n                    })\n                });\n                \n                console.log('üì• R√©ponse PHP re√ßue - Status:', response.status);\n                \n                if (!response.ok) {\n                    throw new Error(`Erreur HTTP: ${response.status}`);\n                }\n                \n                const responseData = await response.json();\n                \n                if (!responseData.success) {\n                    throw new Error(`Erreur PHP: ${responseData.error}`);\n                }\n                \n                console.log('‚úÖ QR code g√©n√©r√© par PHP avec succ√®s');\n                console.log('üìä Taille:', responseData.data.size + 'px');\n                console.log('üìä Longueur base64:', responseData.data.length + ' caract√®res');\n\n                // Stocker l'URL du QR code pour getQRCode()\n                this.currentQRUrl = responseData.data.dataUrl;\n                \n                // Cr√©er le conteneur avec le QR code PHP\n                qrContainer.innerHTML = `\n                    <div class=\"sunuid-qr-ready\" style=\"text-align: center; padding: 20px;\">\n                        <img src=\"${responseData.data.dataUrl}\" alt=\"QR Code ${this.config.partnerName}\" style=\"max-width: 300px; border: 2px solid #ddd; border-radius: 10px;\">\n                    </div>\n                `;\n                \n                // Afficher les instructions et le statut maintenant que le QR est pr√™t\n                const instructionsElement = qrContainer.parentElement.querySelector('.sunuid-qr-instructions');\n                const statusElement = qrContainer.parentElement.querySelector('.sunuid-qr-status');\n                \n                if (instructionsElement) {\n                    instructionsElement.style.display = 'block';\n                    instructionsElement.classList.add('sunuid-qr-ready');\n                }\n                if (statusElement) {\n                    statusElement.style.display = 'block';\n                    statusElement.classList.add('sunuid-qr-ready');\n                }\n                \n                console.log('‚úÖ QR code PHP affich√© dans le conteneur');\n\n            } catch (error) {\n                console.error('‚ùå Erreur g√©n√©ration QR PHP:', error);\n                console.error('Stack trace:', error.stack);\n                this.displayFallbackImage();\n            }\n        }\n\n        /**\n         * Ajouter le logo au centre du QR code\n         */\n        addLogoToCenter(ctx, x, y, width, height) {\n            try {\n                // Cr√©er une image pour le logo\n                const logo = new Image();\n                logo.onload = () => {\n                    const logoSize = 40;\n                    const logoX = x + (width - logoSize) / 2;\n                    const logoY = y + (width - logoSize) / 2;\n\n                    // Dessiner un fond blanc pour le logo\n                    ctx.fillStyle = 'white';\n                    ctx.fillRect(logoX - 2, logoY - 2, logoSize + 4, logoSize + 4);\n\n                    // Dessiner le logo\n                    ctx.drawImage(logo, logoX, logoY, logoSize, logoSize);\n                };\n                logo.src = 'src/logoqr.png';\n            } catch (error) {\n                console.warn('Logo non disponible:', error);\n            }\n        }\n\n        /**\n         * Afficher l'image de fallback\n         */\n        displayFallbackImage() {\n            console.log('‚ö†Ô∏è Affichage de l\\'image de fallback');\n            const qrContainer = document.getElementById('sunuid-qr-container');\n            if (qrContainer) {\n                qrContainer.innerHTML = `\n                    <div style=\"text-align: center; padding: 20px; color: #666;\">\n                        <p>‚ö†Ô∏è G√©n√©ration QR personnalis√© non disponible</p>\n                        <p>Utilisation de l'image par d√©faut</p>\n                        <p><strong>Debug:</strong> QRCode disponible: ${typeof QRCode !== 'undefined'}</p>\n                        <p><strong>Debug:</strong> Container trouv√©: ${qrContainer !== null}</p>\n                    </div>\n                `;\n            } else {\n                console.error('‚ùå Container QR non trouv√© pour fallback');\n            }\n        }\n\n        /**\n         * Afficher \"Service non disponible\"\n         */\n        displayServiceUnavailable(containerId, type) {\n            console.log(`displayServiceUnavailable appel√©e pour ${containerId}, type: ${type}`);\n            const container = document.getElementById(containerId);\n            if (!container) {\n                console.error(`Container ${containerId} non trouv√©`);\n                return;\n            }\n\n            container.innerHTML = `\n                <div class=\"sunuid-service-unavailable\" style=\"\n                    text-align: center;\n                    padding: 40px 20px;\n                    background: #f8f9fa;\n                    border: 2px dashed #dee2e6;\n                    border-radius: 10px;\n                    color: #6c757d;\n                    font-family: Arial, sans-serif;\n                \">\n                    <div style=\"font-size: 48px; margin-bottom: 20px;\">‚ö†Ô∏è</div>\n                    <h3 style=\"margin: 0 0 10px 0; color: #495057;\">Service Non Disponible</h3>\n                    <p style=\"margin: 0; font-size: 14px;\">\n                        Le service d'authentification est temporairement indisponible.<br>\n                        Veuillez r√©essayer plus tard.\n                    </p>\n                    <div style=\"margin-top: 20px; font-size: 12px; color: #adb5bd;\">\n                        Type: ${String(type).toUpperCase()}\n                    </div>\n                </div>\n            `;\n        }\n\n        /**\n         * Rafra√Æchir un QR code\n         */\n        async refreshQR(containerId, options = {}) {\n            try {\n                const result = await this.generateQR(containerId, options);\n                return result;\n            } catch (error) {\n                console.error('Erreur lors du rafra√Æchissement:', error.message);\n                this.displayServiceUnavailable(containerId, this.config.type);\n                throw error;\n            }\n        }\n\n        /**\n         * D√©marrer le rafra√Æchissement automatique\n         */\n        startAutoRefresh(containerId, type, options) {\n            if (!this.config.autoRefresh) return;\n\n            this.refreshTimer = setInterval(async () => {\n                try {\n                    await this.refreshQR(containerId, type, options);\n                } catch (error) {\n                    console.warn('Erreur lors du rafra√Æchissement automatique:', error);\n                }\n            }, this.config.refreshInterval);\n        }\n\n        /**\n         * D√©marrer le timer de compte √† rebours\n         */\n\n\n        /**\n         * Effectuer une requ√™te API s√©curis√©e\n         */\n        async makeRequest(endpoint, data) {\n            // Validation de s√©curit√©\n            if (!this.isInitialized) {\n                this.logSecurityEvent('REQUEST_BEFORE_INIT', { endpoint });\n                throw new Error('SDK non initialis√©');\n            }\n\n            // V√©rifier les limites de requ√™tes pour l'initialisation s√©curis√©e\n            if (this.config.secureInit) {\n                this.config.requestCount++;\n                if (this.config.requestCount > this.config.maxRequests) {\n                    this.logSecurityEvent('API_REQUEST_LIMIT_EXCEEDED', { \n                        requestCount: this.config.requestCount,\n                        maxRequests: this.config.maxRequests \n                    });\n                    throw new Error('Limite de requ√™tes d√©pass√©e');\n                }\n            }\n\n            // Sanitisation des donn√©es\n            const sanitizedData = this.sanitizeRequestData(data);\n            \n            // Debug: Afficher les donn√©es envoy√©es\n            console.log('üîç Debug makeRequest - endpoint:', endpoint);\n            console.log('üîç Debug makeRequest - apiUrl:', this.config.apiUrl);\n            console.log('üîç Debug makeRequest - url:', `${this.config.apiUrl}${endpoint}`);\n            console.log('üîç Debug makeRequest - data:', JSON.stringify(sanitizedData, null, 2));\n            console.log('üîç Debug makeRequest - secureInit:', this.config.secureInit);\n            console.log('üîç Debug makeRequest - isInitialized:', this.isInitialized);\n            \n            // Utiliser l'endpoint depuis la configuration si disponible\n            const endpointPath = window.SunuIDConfig?.endpoints?.[endpoint.replace('/', '')] || endpoint;\n            const url = `${this.config.apiUrl}${endpointPath}`;\n            \n            // Debug: Afficher l'URL finale\n            console.log('üîç URL finale construite:', url);\n            console.log('üîç EndpointPath:', endpointPath);\n            console.log('üîç SunuIDConfig endpoints:', JSON.stringify(window.SunuIDConfig?.endpoints));\n            \n            // Log de s√©curit√© pour la requ√™te\n            this.logSecurityEvent('API_REQUEST_START', {\n                endpoint: endpointPath,\n                url: url,\n                dataKeys: Object.keys(sanitizedData),\n                secureInit: this.config.secureInit\n            });\n            \n            let retryCount = 0;\n            const maxRetries = this.config.maxRetries;\n            \n            while (retryCount <= maxRetries) {\n                try {\n                    const controller = new AbortController();\n                    const timeoutId = setTimeout(() => controller.abort(), this.config.requestTimeout);\n                    \n                    // Headers minimaux (API SunuID n'accepte que les headers essentiels)\n                    const headers = {\n                        'Content-Type': 'application/json'\n                    };\n\n                    // Note: En mode s√©curis√©, les credentials sont dans le body\n                    // Pas besoin d'ajouter de header sp√©cial pour √©viter les probl√®mes CORS\n                    // if (this.config.secureInit && this.config.token) {\n                    //     headers['X-Secure-Token'] = this.config.token;\n                    // }\n                    \n                    const response = await fetch(url, {\n                        method: 'POST',\n                        headers: headers,\n                        body: JSON.stringify(sanitizedData),\n                        signal: controller.signal\n                    });\n\n                    clearTimeout(timeoutId);\n\n                    if (!response.ok) {\n                        const errorText = await response.text();\n                        let errorData;\n                        try {\n                            errorData = JSON.parse(errorText);\n                        } catch (e) {\n                            errorData = { message: errorText };\n                        }\n                        \n                        this.logSecurityEvent('API_REQUEST_ERROR', {\n                            status: response.status,\n                            statusText: response.statusText,\n                            error: errorData.message\n                        });\n                        \n                        throw new Error(errorData.message || `Erreur HTTP: ${response.status}`);\n                    }\n\n                    const result = await response.json();\n                    \n                    this.logSecurityEvent('API_REQUEST_SUCCESS', {\n                        endpoint: endpointPath,\n                        responseKeys: Object.keys(result)\n                    });\n                    \n                    return result;\n                    \n                } catch (error) {\n                    retryCount++;\n                    \n                    if (error.name === 'AbortError') {\n                        this.logSecurityEvent('API_REQUEST_TIMEOUT', { retryCount });\n                        if (retryCount > maxRetries) {\n                            throw new Error('Timeout de la requ√™te API');\n                        }\n                        continue;\n                    }\n                    \n                    if (retryCount > maxRetries) {\n                        this.logSecurityEvent('API_REQUEST_MAX_RETRIES', { \n                            retryCount, \n                            error: error.message \n                        });\n                        throw error;\n                    }\n                    \n                    // Attendre avant de r√©essayer\n                    await new Promise(resolve => setTimeout(resolve, 1000 * retryCount));\n                }\n            }\n        }\n\n        /**\n         * Sanitisation des donn√©es de requ√™te\n         */\n        sanitizeRequestData(data) {\n            const sanitized = {};\n            \n            for (const [key, value] of Object.entries(data)) {\n                if (typeof value === 'string') {\n                    sanitized[key] = this.sanitizeInput(value);\n                } else if (typeof value === 'object' && value !== null) {\n                    sanitized[key] = this.sanitizeRequestData(value);\n                } else {\n                    sanitized[key] = value;\n                }\n            }\n            \n            // Ajouter les credentials dans le body (API SunuID les attend ici)\n            // Utiliser les vraies valeurs (originales) si disponibles, sinon les valeurs directes\n            sanitized.client_id = this.config.originalClientId || this.config.clientId;\n            sanitized.secret_id = this.config.originalSecretId || this.config.secretId;\n            \n            // Debug: V√©rifier les credentials\n            console.log('üîç Credentials dans sanitizeRequestData - clientId:', this.config.clientId);\n            console.log('üîç Credentials dans sanitizeRequestData - secretId:', this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null');\n            console.log('üîç Credentials dans sanitizeRequestData - sanitizedClientId:', sanitized.client_id);\n            console.log('üîç Credentials dans sanitizeRequestData - sanitizedSecretId:', sanitized.secret_id ? '***' + sanitized.secret_id.slice(-4) : 'null');\n            console.log('üîç Credentials dans sanitizeRequestData - data complet:', JSON.stringify(sanitized, null, 2));\n            \n            // Debug: V√©rifier les credentials\n            console.log('üîç Credentials dans sanitizeRequestData - clientId:', this.config.clientId);\n            console.log('üîç Credentials dans sanitizeRequestData - secretId:', this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null');\n            console.log('üîç Credentials dans sanitizeRequestData - sanitizedClientId:', sanitized.client_id);\n            console.log('üîç Credentials dans sanitizeRequestData - sanitizedSecretId:', sanitized.secret_id ? '***' + sanitized.secret_id.slice(-4) : 'null');\n            console.log('üîç Credentials dans sanitizeRequestData - data complet:', JSON.stringify(sanitized, null, 2));\n            \n            return sanitized;\n        }\n\n        /**\n         * G√©n√©rer un ID de requ√™te unique\n         */\n        generateRequestId() {\n            return 'req_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n        }\n\n        /**\n         * Appliquer le th√®me\n         */\n        applyTheme(theme) {\n            const container = document.querySelector('.sunuid-qr-code');\n            if (container) {\n                container.className = `sunuid-qr-code sunuid-theme-${theme}`;\n            }\n        }\n\n        /**\n         * G√©rer les erreurs\n         */\n        handleError(error) {\n            console.error('SunuID SDK Error:', error);\n            \n            if (this.config.onError) {\n                this.config.onError(error);\n            }\n        }\n\n        /**\n         * Obtenir l'URL du QR code g√©n√©r√©\n         */\n        getQRCode() {\n            // Retourner l'URL du QR code si disponible\n            if (this.currentQRUrl) {\n                return this.currentQRUrl;\n            }\n            \n            // Sinon, retourner une URL par d√©faut ou null\n            return null;\n        }\n\n        /**\n         * Nettoyer les ressources\n         */\n        destroy() {\n            if (this.refreshTimer) {\n                clearInterval(this.refreshTimer);\n            }\n            \n            // Fermer la connexion WebSocket\n            if (this.socket) {\n                this.socket.disconnect();\n                this.socket = null;\n                console.log('üåê WebSocket d√©connect√©');\n            }\n            \n            this.isInitialized = false;\n            this.logSecurityEvent('SDK_DESTROY');\n            console.log('SunuID SDK d√©truit');\n        }\n\n        /**\n         * Obtenir les logs de s√©curit√©\n         */\n        getSecurityLogs() {\n            return window.SunuIDSecurityLogs || [];\n        }\n\n        /**\n         * Nettoyer les logs de s√©curit√©\n         */\n        clearSecurityLogs() {\n            window.SunuIDSecurityLogs = [];\n            this.logSecurityEvent('SECURITY_LOGS_CLEARED');\n        }\n    }\n\n    // Exposer la classe globalement\n    window.SunuID = SunuID;\n    window.sunuidInstance = null;\n\n    // Fonction d'initialisation globale\n    window.initSunuID = function(config) {\n        try {\n            window.sunuidInstance = new SunuID(config);\n            return window.sunuidInstance;\n        } catch (error) {\n            console.error('Erreur lors de l\\'initialisation de SunuID:', error);\n            throw error;\n        }\n    };\n\n})(window); "],"names":["window","_window$SunuIDConfig","_window$SunuIDConfig2","DEFAULT_CONFIG","apiUrl","SunuIDConfig","clientId","secretId","type","partnerName","theme","language","autoRefresh","refreshInterval","onSuccess","onError","onStatusUpdate","onExpired","enableSecurityLogs","validateInputs","maxRetries","requestTimeout","secureInit","secureInitUrl","replace","token","SunuID","config","arguments","length","undefined","_classCallCheck","this","_objectSpread","qrCode","refreshTimer","isInitialized","socket","initPromise","init","key","value","_init","_asyncToGenerator","_regenerator","m","_callee","_t","w","_context","p","n","validateSecurityParams","logSecurityEvent","obfuscateCredentials","console","log","initWebSocket","v","error","message","a","apply","_secureInit","_callee2","initData","response","result","decodedToken","_t2","_context2","fetch","method","headers","Accept","body","JSON","stringify","ok","Error","concat","status","json","success","data","api_url","decodeSecureToken","client_id","secret_id","expiresIn","expires_in","maxRequests","max_requests","requestCount","parts","split","_parts","_slicedToArray","payload","decodedPayload","atob","tokenData","parse","exp","Date","now","_this","io","warn","setTimeout","ip","getClientIP","query","userId","username","on","id","reason","handleQRStatusUpdate","handleQRScanSuccess","handleQRExpired","errors","push","isValidUrl","includes","join","string","url","URL","protocol","_","event","securityLog","timestamp","toISOString","userAgent","navigator","location","href","SunuIDSecurityLogs","originalClientId","originalSecretId","clientIdDisplay","secretIdDisplay","input","trim","connected","emit","_generateQR","_callee3","containerId","options","qrImageUrl","_waitForSocketId","_t3","_this2","_args3","_context3","makeRequest","qrcode","currentQRUrl","displayQRCode","pendingQRInfo","code","waitForSocketId","socketId","qrContent","typeName","getTypeName","qrLabel","generateCustomQRCode","startAutoRefresh","emitWebSocketEvent","serviceId","service_id","qrCodeUrl","sessionId","stack","slice","displayServiceUnavailable","_x","_generateCustomQR","_callee4","_response","_waitForSocketId2","_t4","_this3","_args4","_context4","_x2","_x3","_generateAuthQR","_callee5","_args5","_context5","generateQR","_x4","_generateKYCQR","_callee6","originalType","_args6","_context6","f","_x5","_generateSignatureQR","_callee7","_args7","_context7","_x6","_checkQRStatus","_callee8","_response2","_t5","_context8","handleError","_x7","qrUrl","container","document","getElementById","innerHTML","qrElement","createElement","className","appendChild","applyTheme","_generateCustomQRCode","_callee9","content","label","qrContainer","qrGeneratorUrl","_response3","responseData","instructionsElement","statusElement","_t6","_context9","displayFallbackImage","size","margin","dataUrl","parentElement","querySelector","style","display","classList","add","_x8","_x9","ctx","x","y","width","height","logo","Image","onload","logoSize","logoX","logoY","fillStyle","fillRect","drawImage","src","QRCode","String","toUpperCase","_refreshQR","_callee0","_t7","_args0","_context0","_x0","_this4","setInterval","_callee1","_t8","_context1","refreshQR","_makeRequest","_callee10","endpoint","_window$SunuIDConfig3","_window$SunuIDConfig4","sanitizedData","endpointPath","retryCount","_loop","_ret","_this5","_context11","sanitizeRequestData","endpoints","dataKeys","Object","keys","controller","timeoutId","_response4","errorText","errorData","_t9","_context10","AbortController","abort","signal","clearTimeout","text","e","statusText","responseKeys","name","Promise","resolve","d","_regeneratorValues","_x1","_x10","sanitized","_i","_Object$entries","entries","_Object$entries$_i","sanitizeInput","_typeof","Math","random","toString","substr","clearInterval","disconnect","sunuidInstance","initSunuID"],"mappings":"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"}