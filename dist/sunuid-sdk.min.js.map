{"version":3,"file":"sunuid-sdk.min.js","sources":["../src/sunuid-sdk.js"],"sourcesContent":["/**\n * SunuID SDK - Package d'intégration pour partenaires\n * \n * @version 1.0.0\n * @author SunuID Team\n * @license MIT\n */\n\n(function(window) {\n    'use strict';\n\n    // Configuration par défaut\n    const DEFAULT_CONFIG = {\n        apiUrl: window.SunuIDConfig?.apiUrl || 'https://api.sunuid.fayma.sn',\n        clientId: null,\n        secretId: null,\n        theme: 'light',\n        language: 'fr',\n        autoRefresh: true,\n        refreshInterval: 30000, // 30 secondes\n        onSuccess: null,\n        onError: null,\n        onExpired: null\n    };\n\n    /**\n     * Classe principale SunuID\n     */\n    class SunuID {\n        constructor(config = {}) {\n            this.config = { ...DEFAULT_CONFIG, ...config };\n            this.qrCode = null;\n            this.refreshTimer = null;\n            this.isInitialized = false;\n            \n            this.init();\n        }\n\n        /**\n         * Initialisation du SDK\n         */\n        init() {\n            if (!this.config.clientId || !this.config.secretId) {\n                throw new Error('SunuID: clientId et secretId sont requis');\n            }\n\n            this.isInitialized = true;\n            console.log('SunuID SDK initialisé avec succès');\n        }\n\n        /**\n         * Générer un QR code d'authentification\n         */\n        async generateAuthQR(containerId, options = {}) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialisé');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-generate', {\n                    type: 'auth',\n                    ...options\n                });\n\n                if (response.success) {\n                    this.displayQRCode(containerId, response.data.qrCodeUrl, 'auth', options);\n                    this.startAutoRefresh(containerId, 'auth', options);\n                    return response.data;\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la génération du QR code');\n                }\n            } catch (error) {\n                console.warn('Erreur API détectée, génération d\\'un QR code de test:', error.message);\n                \n                // En cas d'échec de l'API (CORS, 500, ou autre), générer un QR code de test\n                const testData = {\n                    type: 'auth',\n                    clientId: this.config.clientId,\n                    timestamp: Date.now(),\n                    sessionId: 'test_' + Math.random().toString(36).substr(2, 9),\n                    apiUrl: this.config.apiUrl,\n                    error: error.message,\n                    errorType: error.name,\n                    fallback: true,\n                    ...options\n                };\n                \n                const qrData = JSON.stringify(testData);\n                const qrUrl = `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${encodeURIComponent(qrData)}`;\n                \n                this.displayQRCode(containerId, qrUrl, 'auth', options);\n                this.startAutoRefresh(containerId, 'auth', options);\n                \n                return {\n                    success: true,\n                    data: {\n                        sessionId: testData.sessionId,\n                        qrCodeUrl: qrUrl,\n                        expires: Date.now() + 30000,\n                        type: 'auth',\n                        fallback: true\n                    }\n                };\n            }\n        }\n\n        /**\n         * Générer un QR code KYC\n         */\n        async generateKYCQR(containerId, options = {}) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialisé');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-generate', {\n                    type: 'kyc',\n                    ...options\n                });\n\n                if (response.success) {\n                    this.displayQRCode(containerId, response.data.qrCodeUrl, 'kyc', options);\n                    this.startAutoRefresh(containerId, 'kyc', options);\n                    return response.data;\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la génération du QR code KYC');\n                }\n            } catch (error) {\n                console.warn('Erreur API détectée, génération d\\'un QR code KYC de test:', error.message);\n                \n                // En cas d'échec de l'API, générer un QR code de test\n                const testData = {\n                    type: 'kyc',\n                    clientId: this.config.clientId,\n                    timestamp: Date.now(),\n                    sessionId: 'test_' + Math.random().toString(36).substr(2, 9),\n                    apiUrl: this.config.apiUrl,\n                    error: error.message,\n                    errorType: error.name,\n                    fallback: true,\n                    ...options\n                };\n                \n                const qrData = JSON.stringify(testData);\n                const qrUrl = `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${encodeURIComponent(qrData)}`;\n                \n                this.displayQRCode(containerId, qrUrl, 'kyc', options);\n                this.startAutoRefresh(containerId, 'kyc', options);\n                \n                return {\n                    success: true,\n                    data: {\n                        sessionId: testData.sessionId,\n                        qrCodeUrl: qrUrl,\n                        expires: Date.now() + 30000,\n                        type: 'kyc',\n                        fallback: true\n                    }\n                };\n            }\n        }\n\n        /**\n         * Vérifier le statut d'un QR code\n         */\n        async checkQRStatus(sessionId) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialisé');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-status', {\n                    sessionId: sessionId\n                });\n\n                if (response.success) {\n                return response.data;\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la vérification du statut');\n                }\n            } catch (error) {\n                this.handleError(error);\n                throw error;\n            }\n        }\n\n        /**\n         * Afficher un QR code dans un conteneur\n         */\n        displayQRCode(containerId, qrUrl, type, options = {}) {\n            const container = document.getElementById(containerId);\n            if (!container) {\n                throw new Error(`Conteneur avec l'ID \"${containerId}\" non trouvé`);\n            }\n\n            // Nettoyer le conteneur\n            container.innerHTML = '';\n\n            // Créer l'élément QR code\n            const qrElement = document.createElement('div');\n            qrElement.className = 'sunuid-qr-code';\n            qrElement.innerHTML = `\n                    <div class=\"sunuid-qr-header\">\n                    <h3>${type === 'auth' ? 'Authentification' : 'Vérification KYC'}</h3>\n                    <div class=\"sunuid-timer\">\n                        <span>Expire dans: </span>\n                        <span id=\"sunuid-timer\">30</span>\n                        <span> secondes</span>\n                    </div>\n                        </div>\n                <div class=\"sunuid-qr-image\">\n                    <img src=\"${qrUrl}\" alt=\"QR Code SunuID\" style=\"max-width: 300px; height: auto;\">\n                    </div>\n                <div class=\"sunuid-qr-instructions\">\n                    <p>Scannez ce QR code avec l'application SunuID pour vous connecter</p>\n                    </div>\n                <div class=\"sunuid-qr-status\" id=\"sunuid-status\">\n                    <p>En attente de scan...</p>\n                </div>\n            `;\n\n            container.appendChild(qrElement);\n\n            // Démarrer le timer\n            this.startTimer();\n\n            // Appliquer le thème\n            this.applyTheme(options.theme || this.config.theme);\n        }\n\n        /**\n         * Rafraîchir un QR code\n         */\n        async refreshQR(containerId, type, options = {}) {\n            try {\n                const result = type === 'auth' \n                    ? await this.generateAuthQR(containerId, options)\n                    : await this.generateKYCQR(containerId, options);\n                \n                return result;\n            } catch (error) {\n                this.handleError(error);\n                throw error;\n            }\n        }\n\n        /**\n         * Démarrer le rafraîchissement automatique\n         */\n        startAutoRefresh(containerId, type, options) {\n            if (!this.config.autoRefresh) return;\n\n            this.refreshTimer = setInterval(async () => {\n                try {\n                    await this.refreshQR(containerId, type, options);\n                } catch (error) {\n                    console.warn('Erreur lors du rafraîchissement automatique:', error);\n                }\n            }, this.config.refreshInterval);\n        }\n\n        /**\n         * Démarrer le timer de compte à rebours\n         */\n        startTimer() {\n            let timeLeft = 30;\n            const timerElement = document.getElementById('sunuid-timer');\n            \n            const timer = setInterval(() => {\n                timeLeft--;\n                if (timerElement) {\n                    timerElement.textContent = timeLeft;\n                }\n                \n                if (timeLeft <= 0) {\n                    clearInterval(timer);\n                    if (this.config.onExpired) {\n                        this.config.onExpired();\n                    }\n                }\n            }, 1000);\n        }\n\n        /**\n         * Effectuer une requête API\n         */\n        async makeRequest(endpoint, data) {\n            // Utiliser l'endpoint depuis la configuration si disponible\n            const endpointPath = window.SunuIDConfig?.endpoints?.[endpoint.replace('/', '')] || endpoint;\n            const url = `${this.config.apiUrl}${endpointPath}`;\n            \n            try {\n                const response = await fetch(url, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': `Bearer ${this.config.clientId}:${this.config.secretId}`,\n                        'Accept': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        ...data,\n                        client_id: this.config.clientId,\n                        secret_id: this.config.secretId\n                    })\n                });\n\n                if (!response.ok) {\n                    const errorText = await response.text();\n                    let errorData;\n                    try {\n                        errorData = JSON.parse(errorText);\n                    } catch (e) {\n                        errorData = { message: errorText };\n                    }\n                    \n                    throw new Error(errorData.message || `Erreur HTTP: ${response.status}`);\n                }\n\n                const result = await response.json();\n                return result;\n            } catch (error) {\n                console.error('Erreur API SunuID:', error);\n                throw error;\n            }\n        }\n\n        /**\n         * Appliquer le thème\n         */\n        applyTheme(theme) {\n            const container = document.querySelector('.sunuid-qr-code');\n            if (container) {\n                container.className = `sunuid-qr-code sunuid-theme-${theme}`;\n            }\n        }\n\n        /**\n         * Gérer les erreurs\n         */\n        handleError(error) {\n            console.error('SunuID SDK Error:', error);\n            \n            if (this.config.onError) {\n                this.config.onError(error);\n            }\n        }\n\n        /**\n         * Nettoyer les ressources\n         */\n        destroy() {\n            if (this.refreshTimer) {\n                clearInterval(this.refreshTimer);\n            }\n            \n            this.isInitialized = false;\n            console.log('SunuID SDK détruit');\n        }\n    }\n\n    // Exposer la classe globalement\n    window.SunuID = SunuID;\n    window.sunuidInstance = null;\n\n    // Fonction d'initialisation globale\n    window.initSunuID = function(config) {\n        try {\n            window.sunuidInstance = new SunuID(config);\n            return window.sunuidInstance;\n        } catch (error) {\n            console.error('Erreur lors de l\\'initialisation de SunuID:', error);\n            throw error;\n        }\n    };\n\n})(window); "],"names":["window","_window$SunuIDConfig","DEFAULT_CONFIG","apiUrl","SunuIDConfig","clientId","secretId","theme","language","autoRefresh","refreshInterval","onSuccess","onError","onExpired","SunuID","config","arguments","length","undefined","_classCallCheck","this","_objectSpread","qrCode","refreshTimer","isInitialized","init","key","value","Error","console","log","_generateAuthQR","_asyncToGenerator","_regenerator","m","_callee","containerId","options","response","testData","qrData","qrUrl","_t","_args","w","_context","p","n","makeRequest","type","v","success","displayQRCode","data","qrCodeUrl","startAutoRefresh","a","message","warn","timestamp","Date","now","sessionId","Math","random","toString","substr","error","errorType","name","fallback","JSON","stringify","concat","encodeURIComponent","expires","_x","apply","_generateKYCQR","_callee2","_t2","_args2","_context2","_x2","_checkQRStatus","_callee3","_t3","_context3","handleError","_x3","container","document","getElementById","innerHTML","qrElement","createElement","className","appendChild","startTimer","applyTheme","_refreshQR","_callee4","result","_t4","_t5","_args4","_context4","generateAuthQR","generateKYCQR","_x4","_x5","_this","setInterval","_callee5","_t6","_context5","refreshQR","_this2","timeLeft","timerElement","timer","textContent","clearInterval","_makeRequest","_callee6","endpoint","_window$SunuIDConfig2","endpointPath","url","errorText","errorData","_t7","_context6","endpoints","replace","fetch","method","headers","Authorization","Accept","body","client_id","secret_id","ok","text","parse","e","status","json","_x6","_x7","querySelector","sunuidInstance","initSunuID"],"mappings":"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"}