{"version":3,"file":"sunuid-sdk.min.js","sources":["../src/sunuid-sdk.js"],"sourcesContent":["/**\n * SunuID SDK - Package d'int√©gration pour partenaires\n * \n * @version 1.0.0\n * @author SunuID Team\n * @license MIT\n */\n\n(function(window) {\n    'use strict';\n\n    // Configuration par d√©faut\n    const DEFAULT_CONFIG = {\n        apiUrl: window.SunuIDConfig?.apiUrl || 'https://api.sunuid.fayma.sn',\n        clientId: null,\n        secretId: null,\n        type: 2, // Type par d√©faut (2 = authentification)\n        partnerName: null, // Nom du partenaire r√©cup√©r√© depuis l'API\n        theme: 'light',\n        language: 'fr',\n        autoRefresh: false, // D√©sactiv√© par d√©faut pour √©viter les appels r√©p√©titifs\n        refreshInterval: 30000, // 30 secondes\n        autoInit: true, // Initialisation automatique par d√©faut\n        onSuccess: null,\n        onError: null,\n        onStatusUpdate: null,\n        onExpired: null,\n        // Nouvelles options de s√©curit√©\n        enableSecurityLogs: true,\n        validateInputs: true,\n        maxRetries: 3,\n        requestTimeout: 10000, // 10 secondes\n        // Options d'initialisation s√©curis√©e\n        secureInit: false,\n        secureInitUrl: (() => {\n            if (window.SunuIDConfig?.apiUrl?.includes('api.sunuid.fayma.sn')) {\n                return 'https://api.sunuid.fayma.sn/secure-init.php';\n            }\n            return window.SunuIDConfig?.apiUrl?.replace('/api', '') + '/secure-init.php' || 'https://api.sunuid.fayma.sn/secure-init.php';\n        })(),\n        token: null,\n        // Configuration pour forcer l'utilisation du serveur distant\n        forceRemoteServer: true,\n        useLocalFallback: false\n    };\n\n    /**\n     * Classe principale SunuID\n     */\n    class SunuID {\n        constructor(config = {}) {\n            this.config = { ...DEFAULT_CONFIG, ...config };\n            this.qrCode = null;\n            this.refreshTimer = null;\n            this.isInitialized = false;\n            this.socket = null;\n            \n            // Initialisation asynchrone seulement si autoInit est activ√©\n            if (this.config.autoInit !== false) {\n                this.initPromise = this.init();\n            }\n        }\n\n        /**\n         * Initialisation du SDK\n         */\n        async init() {\n            try {\n                // Initialisation s√©curis√©e si activ√©e\n                if (this.config.secureInit) {\n                    await this.secureInit();\n                } else {\n                    // Validation s√©curis√©e des param√®tres\n                    if (this.config.validateInputs) {\n                        this.validateSecurityParams();\n                    }\n                }\n\n                // Log de s√©curit√© pour l'initialisation\n                this.logSecurityEvent('SDK_INIT_START', {\n                    apiUrl: this.config.apiUrl,\n                    type: this.config.type,\n                    secureInit: this.config.secureInit\n                });\n\n                // R√©cup√©rer les informations du partenaire depuis l'API\n                await this.fetchPartnerInfo();\n\n                // Obscurcir les credentials dans les logs\n                this.obfuscateCredentials();\n\n                this.isInitialized = true;\n                console.log('SunuID SDK initialis√© avec succ√®s');\n                console.log('üìã Configuration SDK:', {\n                    apiUrl: this.config.apiUrl,\n                    type: this.config.type,\n                    partnerName: this.config.partnerName,\n                    clientId: this.config.clientId ? '***' + this.config.clientId.slice(-4) : 'null',\n                    secretId: this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null',\n                    secureInit: this.config.secureInit,\n                    theme: this.config.theme\n                });\n                \n                this.logSecurityEvent('SDK_INIT_SUCCESS');\n                \n                // Initialiser la connexion WebSocket\n                this.initWebSocket();\n                \n            } catch (error) {\n                this.logSecurityEvent('SDK_INIT_ERROR', { error: error.message });\n                throw error;\n            }\n        }\n\n        /**\n         * Initialisation s√©curis√©e via PHP\n         */\n        async secureInit() {\n            try {\n                this.logSecurityEvent('SECURE_INIT_START');\n                \n                const initData = {\n                    type: this.config.type,\n                    partnerName: this.config.partnerName,\n                    theme: this.config.theme\n                };\n\n                const response = await fetch(this.config.secureInitUrl, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json'\n                    },\n                    body: JSON.stringify(initData)\n                });\n\n                if (!response.ok) {\n                    throw new Error(`Erreur HTTP: ${response.status}`);\n                }\n\n                const result = await response.json();\n                \n                console.log('üìã R√©ponse initialisation s√©curis√©e:', result);\n                \n                if (!result.success) {\n                    throw new Error(result.error || 'Erreur lors de l\\'initialisation s√©curis√©e');\n                }\n\n                // Stocker le token et les donn√©es s√©curis√©es\n                this.config.token = result.data.token;\n                this.config.apiUrl = result.data.api_url;\n                \n                // D√©coder le token pour r√©cup√©rer les credentials\n                const decodedToken = this.decodeSecureToken(result.data.token);\n                if (decodedToken) {\n                    this.config.clientId = decodedToken.client_id;\n                    this.config.secretId = decodedToken.secret_id;\n                } else {\n                    throw new Error('Impossible de d√©coder le token s√©curis√©');\n                }\n                \n                this.config.expiresIn = result.data.expires_in;\n                this.config.maxRequests = result.data.max_requests;\n                this.config.requestCount = 0;\n\n                this.logSecurityEvent('SECURE_INIT_SUCCESS', {\n                    expiresIn: result.data.expires_in,\n                    maxRequests: result.data.max_requests\n                });\n\n                console.log('‚úÖ Initialisation s√©curis√©e r√©ussie');\n                \n            } catch (error) {\n                this.logSecurityEvent('SECURE_INIT_ERROR', { error: error.message });\n                throw new Error(`√âchec de l'initialisation s√©curis√©e: ${error.message}`);\n            }\n        }\n\n        /**\n         * D√©coder le token s√©curis√©\n         */\n        decodeSecureToken(token) {\n            try {\n                const parts = token.split('.');\n                if (parts.length !== 2) {\n                    console.error('‚ùå Format de token invalide');\n                    return null;\n                }\n                \n                const [payload, signature] = parts;\n                \n                // D√©coder le payload (base64)\n                const decodedPayload = atob(payload);\n                const tokenData = JSON.parse(decodedPayload);\n                \n                // V√©rifier l'expiration\n                if (tokenData.exp && tokenData.exp < Date.now() / 1000) {\n                    console.error('‚ùå Token expir√©');\n                    return null;\n                }\n                \n                console.log('‚úÖ Token d√©cod√© avec succ√®s');\n                return tokenData;\n                \n            } catch (error) {\n                console.error('‚ùå Erreur d√©codage token:', error);\n                return null;\n            }\n        }\n\n        /**\n         * Initialiser la connexion WebSocket\n         */\n        initWebSocket() {\n            try {\n                // V√©rifier si Socket.IO est disponible\n                if (typeof io === 'undefined') {\n                    console.warn('‚ö†Ô∏è Socket.IO non disponible, WebSocket sera initialis√© plus tard');\n                    // R√©essayer apr√®s un d√©lai\n                    setTimeout(() => this.initWebSocket(), 1000);\n                    return;\n                }\n                \n                // Obtenir l'IP du client (simulation)\n                const ip = this.getClientIP();\n                \n                // Initialiser la connexion WebSocket si elle n'existe pas\n                if (!this.socket) {\n                    console.log('üåê Initialisation Socket.IO...');\n                    \n                    this.socket = io('wss://samasocket.fayma.sn:9443', {\n                        query: {\n                            token: this.config.clientId,\n                            type: 'web',\n                            userId: this.config.clientId,\n                            username: ip\n                        },\n                        transports: ['websocket', 'polling']\n                    });\n\n                    // Gestion des √©v√©nements WebSocket\n                    this.socket.on('connect', () => {\n                        console.log('üåê WebSocket connect√© avec succ√®s');\n                        console.log('üìä Socket ID:', this.socket.id);\n                        this.socket.connected = true;\n                    });\n\n                    this.socket.on('disconnect', (reason) => {\n                        console.log('‚ùå WebSocket d√©connect√©:', reason);\n                        this.socket.connected = false;\n                    });\n\n                    this.socket.on('connect_error', (error) => {\n                        console.error('‚ùå Erreur connexion WebSocket:', error);\n                        this.socket.connected = false;\n                    });\n\n                    // √âcouter les √©v√©nements sp√©cifiques\n                    this.socket.on('qr_status_update', (data) => {\n                        console.log('üì± Mise √† jour statut QR re√ßue:', data);\n                        this.handleQRStatusUpdate(data);\n                    });\n\n                    this.socket.on('qr_scan_success', (data) => {\n                        console.log('‚úÖ Scan QR r√©ussi re√ßu:', data);\n                        this.handleQRScanSuccess(data);\n                    });\n\n                    this.socket.on('qr_expired', (data) => {\n                        console.log('‚è∞ QR expir√© re√ßu:', data);\n                        this.handleQRExpired(data);\n                    });\n\n                    // √âcouter tous les √©v√©nements socket pour les logger\n                    this.socket.onAny((eventName, ...args) => {\n                        console.log(`üåê Socket Event [${eventName}]:`, args);\n                        \n                        // Si c'est un √©v√©nement qr_scan_initiated, afficher le loader\n                        if (eventName === 'qr_scan_initiated') {\n                            this.showQRLoader();\n                        }\n                    });\n                } else {\n                    console.log('üåê WebSocket d√©j√† connect√©');\n                }\n            } catch (error) {\n                console.error('‚ùå Erreur initialisation WebSocket:', error);\n            }\n        }\n\n        /**\n         * Obtenir l'IP du client (simulation)\n         */\n        getClientIP() {\n            // Simulation - en production, vous pourriez utiliser un service d'IP\n            return '127.0.0.1';\n        }\n\n        /**\n         * Obtenir le nom du type √† partir du num√©ro\n         */\n        getTypeName(type) {\n            switch(type) {\n                case 1: return 'KYC';\n                case 2: return 'AUTH';\n                case 3: return 'SIGNATURE';\n                default: return `TYPE-${type}`;\n            }\n        }\n\n        /**\n         * Validation s√©curis√©e des param√®tres\n         */\n        validateSecurityParams() {\n            const errors = [];\n            \n            // Validation du clientId\n            if (!this.config.clientId || typeof this.config.clientId !== 'string') {\n                errors.push('clientId invalide ou manquant');\n            } else if (this.config.clientId.length < 10) {\n                errors.push('clientId trop court');\n            }\n            \n            // Validation du secretId\n            if (!this.config.secretId || typeof this.config.secretId !== 'string') {\n                errors.push('secretId invalide ou manquant');\n            } else if (this.config.secretId.length < 32) {\n                errors.push('secretId trop court (minimum 32 caract√®res)');\n            }\n            \n            // Validation de l'URL API\n            if (!this.config.apiUrl || !this.isValidUrl(this.config.apiUrl)) {\n                errors.push('apiUrl invalide');\n            }\n            \n            // Validation du type\n            if (![1, 2, 3].includes(this.config.type)) {\n                errors.push('type invalide (doit √™tre 1, 2 ou 3)');\n            }\n            \n            if (errors.length > 0) {\n                this.logSecurityEvent('VALIDATION_ERROR', { errors });\n                throw new Error(`Param√®tres de s√©curit√© invalides: ${errors.join(', ')}`);\n            }\n            \n            this.logSecurityEvent('VALIDATION_SUCCESS');\n        }\n\n        /**\n         * Validation d'URL s√©curis√©e\n         */\n        isValidUrl(string) {\n            try {\n                const url = new URL(string);\n                return url.protocol === 'https:' || url.protocol === 'http:';\n            } catch (_) {\n                return false;\n            }\n        }\n\n        /**\n         * Logs de s√©curit√©\n         */\n        logSecurityEvent(event, data = {}) {\n            if (!this.config.enableSecurityLogs) return;\n            \n            const securityLog = {\n                timestamp: new Date().toISOString(),\n                event: event,\n                data: data,\n                userAgent: navigator.userAgent,\n                url: window.location.href\n            };\n            \n            console.warn('üîí [SECURITY]', securityLog);\n            \n            // Stocker les logs de s√©curit√© (optionnel)\n            if (!window.SunuIDSecurityLogs) {\n                window.SunuIDSecurityLogs = [];\n            }\n            window.SunuIDSecurityLogs.push(securityLog);\n        }\n\n        /**\n         * Chiffrement simple des credentials (pour √©viter l'exposition en clair)\n         */\n        obfuscateCredentials() {\n            // Stocker les vraies valeurs pour les logs de s√©curit√©\n            this.config.originalClientId = this.config.clientId;\n            this.config.originalSecretId = this.config.secretId;\n            \n            // Cr√©er des versions obfusqu√©es pour l'affichage uniquement\n            if (this.config.clientId) {\n                this.config.clientIdDisplay = this.config.clientId.replace(/(.{3}).*(.{3})/, '$1***$2');\n            }\n            if (this.config.secretId) {\n                this.config.secretIdDisplay = this.config.secretId.replace(/(.{4}).*(.{4})/, '$1***$2');\n            }\n        }\n\n        /**\n         * Validation des entr√©es utilisateur\n         */\n        sanitizeInput(input) {\n            if (typeof input !== 'string') return input;\n            \n            // Protection contre les injections XSS basiques\n            return input\n                .replace(/[<>]/g, '') // Supprimer les balises HTML\n                .replace(/javascript:/gi, '') // Supprimer les protocoles dangereux\n                .trim();\n        }\n\n        /**\n         * G√©rer la mise √† jour du statut QR\n         */\n        handleQRStatusUpdate(data) {\n            console.log('üì± QR Status Update:', data);\n            if (this.config.onStatusUpdate) {\n                this.config.onStatusUpdate(data);\n            }\n        }\n\n        /**\n         * G√©rer le succ√®s du scan QR\n         */\n        handleQRScanSuccess(data) {\n            console.log('‚úÖ QR Scan Success:', data);\n            if (this.config.onSuccess) {\n                this.config.onSuccess(data);\n            }\n        }\n\n        /**\n         * G√©rer l'expiration du QR\n         */\n        handleQRExpired(data) {\n            console.log('‚è∞ QR Expired:', data);\n            if (this.config.onExpired) {\n                this.config.onExpired(data);\n            }\n        }\n\n        /**\n         * √âmettre un √©v√©nement WebSocket\n         */\n        emitWebSocketEvent(event, data) {\n            if (this.socket && this.socket.connected) {\n                this.socket.emit(event, data);\n                console.log(`üì§ √âv√©nement WebSocket √©mis: ${event}`, data);\n            } else {\n                console.warn('‚ö†Ô∏è WebSocket non connect√©, impossible d\\'√©mettre l\\'√©v√©nement:', event);\n            }\n        }\n\n        /**\n         * Obtenir le statut de la connexion WebSocket\n         */\n        getWebSocketStatus() {\n            if (!this.socket) {\n                return 'not_initialized';\n            }\n            return this.socket.connected ? 'connected' : 'disconnected';\n        }\n\n        /**\n         * Forcer l'initialisation WebSocket (si Socket.IO devient disponible plus tard)\n         */\n        forceWebSocketInit() {\n            if (typeof io !== 'undefined' && !this.socket) {\n                console.log('üîÑ For√ßage de l\\'initialisation WebSocket...');\n                this.initWebSocket();\n            }\n        }\n\n        /**\n         * G√©n√©rer un QR code avec le type configur√©\n         */\n        async generateQR(containerId = 'sunuid-qr-container', options = {}) {\n            // Attendre l'initialisation si n√©cessaire\n            if (this.initPromise) {\n                await this.initPromise;\n                this.initPromise = null;\n            }\n            \n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n            \n            console.log('üéØ generateQR appel√© avec containerId:', containerId);\n            \n            // Attendre que les connexions soient pr√™tes\n            console.log('üîç Attente connexions API et WebSocket...');\n            try {\n                const connectionStatus = await this.waitForConnections(5000); // 5 secondes max\n                console.log('‚úÖ Connexions pr√™tes:', connectionStatus);\n            } catch (connectionError) {\n                console.error('‚ùå Erreur connexions:', connectionError.message);\n                throw new Error('Connexions non disponibles - Impossible de g√©n√©rer le QR code');\n            }\n\n            try {\n                // Utiliser uniquement le socketID comme contenu du QR\n                const socketId = this.socket ? this.socket.id : 'timeout-socket-id';\n                const qrContent = socketId;\n                \n                console.log('üìÑ Contenu QR pr√©par√©:', qrContent);\n                console.log('üîå Socket ID:', socketId);\n                \n                                    // G√©n√©rer le QR avec le contenu complet\n                    const partnerName = this.config.partnerName || 'Partner_unknown';\n                    const response = await this.makeRequest('/qr-generate', {\n                        type: this.config.type,\n                        content: qrContent, // Contenu personnalis√© pour le QR\n                        label: `${this.getTypeName(this.config.type)} ${partnerName}`, // Label du QR avec nom du partenaire\n                        ...options\n                    });\n\n                if (response.success) {\n                    // Construire l'URL compl√®te du QR code\n                    let qrImageUrl = response.data.qrCodeUrl;\n                    \n                    // Si l'URL est relative, la rendre absolue\n                    if (qrImageUrl.startsWith('/')) {\n                        qrImageUrl = `${this.config.apiUrl}${qrImageUrl}`;\n                    }\n                    \n                    this.currentQRUrl = qrImageUrl;\n                    \n                    console.log('‚úÖ QR code g√©n√©r√© par API principale:', qrImageUrl);\n                    console.log('üìÑ Contenu QR final:', qrContent);\n                    console.log('üè∑Ô∏è Label QR:', response.data.label);\n                    console.log('üÜî Session ID:', response.data.sessionId);\n                    \n                    // Afficher le QR code\n                    this.displayQRCode(containerId, qrImageUrl, this.config.type, options);\n                    \n                    this.startAutoRefresh(containerId, this.config.type, options);\n                    \n                    // √âmettre un √©v√©nement WebSocket pour la g√©n√©ration du QR\n                    this.emitWebSocketEvent('qr_generated', {\n                        type: this.config.type,\n                        qrCodeUrl: qrImageUrl,\n                        socketId: socketId,\n                        qrContent: qrContent,\n                        label: response.data.label,\n                        sessionId: response.data.sessionId,\n                        timestamp: Date.now()\n                    });\n                    \n                    return {\n                        ...response.data,\n                        qrCodeUrl: qrImageUrl,\n                        qrContent: qrContent,\n                        label: response.data.label,\n                        sessionId: response.data.sessionId\n                    };\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la g√©n√©ration du QR code');\n                }\n            } catch (error) {\n                console.error('Erreur API d√©tect√©e:', error.message);\n                console.error('Stack trace complet:', error.stack);\n                console.error('Configuration SDK:', {\n                    apiUrl: this.config.apiUrl,\n                    type: this.config.type,\n                    secureInit: this.config.secureInit,\n                    clientId: this.config.clientId ? '***' + this.config.clientId.slice(-4) : 'null',\n                    secretId: this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null'\n                });\n                \n                // Fallback vers le service local seulement si activ√©\n                if (this.config.useLocalFallback) {\n                    console.log('üîç V√©rification fallback local...');\n                    console.log('üîç Hostname:', window.location.hostname);\n                    console.log('üîç Protocol:', window.location.protocol);\n                    console.log('üîç URL compl√®te:', window.location.href);\n                    \n                    const isLocal = window.location.hostname === 'localhost' || \n                                   window.location.hostname === '127.0.0.1' || \n                                   window.location.protocol === 'file:';\n                    \n                    console.log('üîç Est local:', isLocal);\n                    \n                    if (isLocal) {\n                        console.log('üîÑ Tentative fallback vers service QR local...');\n                        console.log('‚ùå Fallback local non impl√©ment√© - utilisation serveur distant uniquement');\n                    } else {\n                        console.log('‚ùå Pas en local, pas de fallback');\n                    }\n                } else {\n                    console.log('üîí Fallback local d√©sactiv√©, utilisation serveur distant uniquement');\n                }\n                \n                console.log('Affichage du message \"Service non disponible\" pour type ' + this.config.type);\n                this.displayServiceUnavailable(containerId, this.config.type);\n                throw new Error('Service non disponible');\n            }\n        }\n\n\n\n        /**\n         * G√©n√©rer un QR code avec un type personnalis√©\n         */\n        async generateCustomQR(containerId, type, options = {}) {\n            // Attendre l'initialisation si n√©cessaire\n            if (this.initPromise) {\n                await this.initPromise;\n                this.initPromise = null;\n            }\n            \n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-generate', {\n                    type: type, // Type personnalis√© (1, 2, 3, etc.)\n                    ...options\n                });\n\n                if (response.success) {\n                    // Construire l'URL compl√®te de l'image QR avec la base URL pour les images\n                    const imageBaseUrl = 'https://sunuid.fayma.sn';\n                    const qrImageUrl = `${imageBaseUrl}${response.data.qrcode}`;\n                    this.displayQRCode(containerId, qrImageUrl, type, options);\n                    \n                    // Le QR code est d√©j√† g√©n√©r√© par l'API principale\n                    console.log('‚úÖ QR code personnalis√© g√©n√©r√© par API principale:', qrImageUrl);\n                    console.log('üìÑ Code de session:', response.data.code);\n                    console.log('üÜî Service ID:', response.data.service_id);\n                    \n                    this.startAutoRefresh(containerId, type, options);\n                    return {\n                        ...response.data,\n                        qrCodeUrl: qrImageUrl,\n                        sessionId: response.data.service_id\n                    };\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la g√©n√©ration du QR code');\n                }\n            } catch (error) {\n                console.error('Erreur API d√©tect√©e:', error.message);\n                console.error('Stack trace complet:', error.stack);\n                console.error('Configuration SDK (Custom):', {\n                    apiUrl: this.config.apiUrl,\n                    type: type,\n                    secureInit: this.config.secureInit,\n                    clientId: this.config.clientId ? '***' + this.config.clientId.slice(-4) : 'null',\n                    secretId: this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null'\n                });\n                console.log('Affichage du message \"Service non disponible\" pour type ' + type);\n                this.displayServiceUnavailable(containerId, type);\n                throw new Error('Service non disponible');\n            }\n        }\n\n        // Alias pour maintenir la compatibilit√©\n        async generateAuthQR(containerId, options = {}) {\n            return this.generateQR(containerId, options);\n        }\n\n        async generateKYCQR(containerId, options = {}) {\n            // Sauvegarder le type actuel\n            const originalType = this.config.type;\n            // Changer temporairement le type pour KYC\n            this.config.type = 1;\n            try {\n                return await this.generateQR(containerId, options);\n            } finally {\n                // Restaurer le type original\n                this.config.type = originalType;\n            }\n        }\n\n        async generateSignatureQR(containerId, options = {}) {\n            // Sauvegarder le type actuel\n            const originalType = this.config.type;\n            // Changer temporairement le type pour Signature\n            this.config.type = 3;\n            try {\n                return await this.generateQR(containerId, options);\n            } finally {\n                // Restaurer le type original\n                this.config.type = originalType;\n            }\n        }\n\n        /**\n         * V√©rifier le statut d'un QR code\n         */\n        async checkQRStatus(sessionId) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-status', {\n                    serviceId: sessionId\n                });\n\n                if (response.success) {\n                    return response.data;\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la v√©rification du statut');\n                }\n            } catch (error) {\n                this.handleError(error);\n                throw error;\n            }\n        }\n\n        /**\n         * G√©n√©rer un QR code avec un contenu sp√©cifique\n         */\n        async generateQRWithContent(content, containerId, type, options = {}) {\n            console.log('üé® G√©n√©ration QR avec contenu:', content);\n            \n            try {\n                // Essayer d'abord le service QR local\n                if (window.location.hostname === 'localhost' || \n                    window.location.hostname === '127.0.0.1' || \n                    window.location.protocol === 'file:') {\n                    \n                    console.log('üè† Utilisation service QR local...');\n                    const localQRUrl = await this.generateQRLocal(content, containerId, type, options);\n                    if (localQRUrl) {\n                        return localQRUrl;\n                    }\n                }\n                \n                // Fallback vers le service QR distant\n                console.log('üåê Utilisation service QR distant...');\n                return await this.generateQRRemote(content, containerId, type, options);\n                \n            } catch (error) {\n                console.error('‚ùå Erreur g√©n√©ration QR:', error);\n                // Fallback vers affichage simple du contenu\n                this.displayQRContent(containerId, content, type, options);\n                return null;\n            }\n        }\n        \n        /**\n         * G√©n√©rer QR code avec service local\n         */\n        async generateQRLocal(content, containerId, type, options = {}) {\n            try {\n                const response = await fetch('http://localhost:8000/api/generate/text', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/x-www-form-urlencoded'\n                    },\n                    body: `text=${encodeURIComponent(content)}&size=300`\n                });\n                \n                if (response.ok) {\n                    const data = await response.json();\n                    const qrUrl = `data:image/png;base64,${data.qrcode}`;\n                    this.displayQRCode(containerId, qrUrl, type, options);\n                    return qrUrl;\n                }\n            } catch (error) {\n                console.log('‚ùå Service QR local non disponible:', error.message);\n            }\n            return null;\n        }\n        \n        /**\n         * G√©n√©rer QR code avec service distant\n         */\n        async generateQRRemote(content, containerId, type, options = {}) {\n            try {\n                const response = await fetch('https://api.sunuid.fayma.sn/qr-generate', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        text: content,\n                        size: 300,\n                        type: type\n                    })\n                });\n                \n                if (response.ok) {\n                    const data = await response.json();\n                    const qrUrl = `data:image/png;base64,${data.qrcode}`;\n                    this.displayQRCode(containerId, qrUrl, type, options);\n                    return qrUrl;\n                }\n            } catch (error) {\n                console.error('‚ùå Erreur service QR distant:', error);\n            }\n            \n            // Fallback vers affichage du contenu\n            this.displayQRContent(containerId, content, type, options);\n            return null;\n        }\n        \n        /**\n         * Afficher le contenu QR en texte (fallback)\n         */\n        displayQRContent(containerId, content, type, options = {}) {\n            const container = document.getElementById(containerId);\n            if (!container) {\n                throw new Error(`Conteneur avec l'ID \"${containerId}\" non trouv√©`);\n            }\n\n            const typeName = this.getTypeName(type);\n            container.innerHTML = `\n                <div class=\"sunuid-qr-code\">\n                    <div class=\"sunuid-qr-header\">\n                        <h3>${typeName}</h3>\n                    </div>\n                    <div class=\"sunuid-qr-content\" style=\"text-align: center; padding: 20px; background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 5px; margin: 10px 0;\">\n                        <p><strong>Contenu QR Code:</strong></p>\n                        <p style=\"font-family: monospace; font-size: 14px; word-break: break-all;\">${content}</p>\n                    </div>\n                    <div class=\"sunuid-qr-instructions\">\n                        <p>Contenu QR g√©n√©r√© avec le format: {type}-{code}-{socketid}</p>\n                    </div>\n                </div>\n            `;\n            \n            console.log('‚úÖ Contenu QR affich√©:', content);\n        }\n        \n        /**\n         * Afficher un QR code dans un conteneur\n         */\n        displayQRCode(containerId, qrUrl, type, options = {}) {\n            const container = document.getElementById(containerId);\n            if (!container) {\n                throw new Error(`Conteneur avec l'ID \"${containerId}\" non trouv√©`);\n            }\n\n            // Nettoyer le conteneur\n            container.innerHTML = '';\n\n            // Cr√©er l'√©l√©ment QR code\n            const qrElement = document.createElement('div');\n            qrElement.className = 'sunuid-qr-code';\n            \n            // Afficher l'image QR avec les informations\n            const typeName = this.getTypeName(type);\n            qrElement.innerHTML = `\n                <div class=\"sunuid-qr-header\">\n                    <h3>${type === 1 ? 'V√©rification KYC' : type === 2 ? 'Authentification' : type === 3 ? 'Signature' : 'Service Type ' + type}</h3>\n                </div>\n                <div class=\"sunuid-qr-image\">\n                    <img src=\"${qrUrl}\" alt=\"QR Code ${typeName}\" style=\"max-width: 300px; border: 1px solid #ddd; border-radius: 5px;\" />\n                </div>\n               \n            `;\n\n            container.appendChild(qrElement);\n\n            // Appliquer le th√®me\n            this.applyTheme(options.theme || this.config.theme);\n            \n            console.log('‚úÖ QR code affich√©:', qrUrl);\n        }\n\n        /**\n         * G√©n√©rer un QR code personnalis√© avec PHP Endroid\n         */\n        async generateCustomQRCode(content, label, options = {}) {\n            console.log('üé® D√©but g√©n√©ration QR personnalis√©...');\n            console.log('üìÑ Contenu:', content);\n            console.log('üè∑Ô∏è Label:', label);\n            \n            // Chercher le conteneur QR\n            let qrContainer = document.getElementById('sunuid-qr-container');\n            if (!qrContainer) {\n                qrContainer = document.getElementById('qr-container');\n            }\n            if (!qrContainer) {\n                console.error('‚ùå QR container not found');\n                return;\n            }\n            \n            console.log('‚úÖ QR container trouv√©');\n\n            // Nettoyer le conteneur\n            qrContainer.innerHTML = '<div style=\"text-align: center; padding: 20px;\"><p>G√©n√©ration QR code...</p></div>';\n\n                         try {\n                 // Utiliser directement l'API principale (plus fiable)\n                 console.log('üé® Tentative g√©n√©ration via API principale...');\n                 await this.generateQRPHP(content, label, qrContainer);\n                 console.log('‚úÖ QR code g√©n√©r√© avec succ√®s');\n                 \n             } catch (error) {\n                 console.error('‚ùå Erreur g√©n√©ration API:', error);\n                 \n                 // Fallback final : image par d√©faut\n                 console.log('‚ö†Ô∏è Affichage image par d√©faut');\n                 this.displayDefaultQR(qrContainer, content, label);\n             }\n        }\n\n        /**\n         * G√©n√©rer un QR code c√¥t√© client (m√©thode principale)\n         */\n        async generateQRClientSide(content, label, qrContainer) {\n            // Charger QRCode si n√©cessaire\n            await this.ensureQRCodeLibrary();\n            \n            if (typeof QRCode === 'undefined') {\n                throw new Error('QRCode library non disponible');\n            }\n            \n            // Cr√©er un canvas\n            const canvas = document.createElement('canvas');\n            canvas.width = 300;\n            canvas.height = 320;\n            const ctx = canvas.getContext('2d');\n            \n            // Fond blanc\n            ctx.fillStyle = '#FFFFFF';\n            ctx.fillRect(0, 0, 300, 320);\n            \n            // G√©n√©rer le QR code\n            return new Promise((resolve, reject) => {\n                QRCode.toCanvas(canvas, content, {\n                    width: 280,\n                    margin: 10,\n                    color: {\n                        dark: '#000000',\n                        light: '#FFFFFF'\n                    }\n                }, (error) => {\n                    if (error) {\n                        reject(error);\n                        return;\n                    }\n                    \n                    // Ajouter le label\n                    ctx.fillStyle = '#333333';\n                    ctx.font = 'bold 14px Arial';\n                    ctx.textAlign = 'center';\n                    ctx.fillText(label, 150, 305);\n                    \n                    // Convertir en data URL\n                    const dataUrl = canvas.toDataURL('image/png');\n                    \n                    // Stocker l'URL\n                    this.currentQRUrl = dataUrl;\n                    \n                    // Afficher le QR code\n                    qrContainer.innerHTML = `\n                        <div style=\"text-align: center; padding: 20px;\">\n                            <img src=\"${dataUrl}\" alt=\"QR Code\" style=\"max-width: 300px; border: 2px solid #ddd; border-radius: 10px;\">\n                        </div>\n                    `;\n                    \n                    // Afficher les instructions\n                    this.showQRInstructions(qrContainer);\n                    \n                    resolve();\n                });\n            });\n        }\n\n        /**\n         * G√©n√©rer un QR code via endpoint PHP (fallback)\n         */\n        async generateQRPHP(content, label, qrContainer) {\n                         // Construire l'URL - Utiliser l'API principale qui fonctionne\n             let qrGeneratorUrl;\n             if (this.config.forceRemoteServer) {\n                 qrGeneratorUrl = 'https://api.sunuid.fayma.sn/qr-generate';\n             } else if (this.config.apiUrl.includes('api.sunuid.fayma.sn')) {\n                 qrGeneratorUrl = 'https://api.sunuid.fayma.sn/qr-generate';\n             } else if (this.config.apiUrl.includes('localhost') || this.config.apiUrl.includes('127.0.0.1')) {\n                 qrGeneratorUrl = 'http://localhost:8000/api/generate/text';\n             } else {\n                 qrGeneratorUrl = this.config.apiUrl + '/qr-generate';\n             }\n            \n            console.log('üîó URL QR Generator:', qrGeneratorUrl);\n            \n                         // Adapter le format selon l'URL\n             let requestBody;\n             let contentType;\n             \n             if (qrGeneratorUrl.includes('localhost:8000')) {\n                 // Service local - format form-data\n                 contentType = 'application/x-www-form-urlencoded';\n                 requestBody = new URLSearchParams({\n                     text: content,\n                     size: 300,\n                     margin: 10,\n                     foreground_color: '000000',\n                     background_color: 'FFFFFF'\n                 });\n             } else {\n                 // Service distant - format JSON avec les param√®tres de l'API principale\n                 contentType = 'application/json';\n                 requestBody = JSON.stringify({\n                     type: this.config.type,\n                     client_id: this.config.clientId,\n                     secret_id: this.config.secretId,\n                     content: content,\n                     label: label\n                 });\n             }\n             \n             const response = await fetch(qrGeneratorUrl, {\n                 method: 'POST',\n                 headers: {\n                     'Content-Type': contentType,\n                     'Accept': 'application/json'\n                 },\n                 body: requestBody\n             });\n            \n            if (!response.ok) {\n                throw new Error(`Erreur HTTP: ${response.status}`);\n            }\n            \n            const responseData = await response.json();\n            \n                         if (!responseData.success) {\n                 throw new Error(`Erreur QR: ${responseData.error}`);\n             }\n             \n             // Adapter selon le format de r√©ponse\n             let qrImageUrl;\n             if (qrGeneratorUrl.includes('localhost:8000')) {\n                 // Service local\n                 qrImageUrl = responseData.data_uri;\n             } else {\n                 // Service distant - utiliser le format de l'API principale\n                 const imageBaseUrl = 'https://sunuid.fayma.sn';\n                 qrImageUrl = `${imageBaseUrl}${responseData.data.qrcode}`;\n             }\n             \n             // Stocker l'URL\n             this.currentQRUrl = qrImageUrl;\n             \n             // Afficher le QR code\n             qrContainer.innerHTML = `\n                 <div style=\"text-align: center; padding: 20px;\">\n                     <img src=\"${qrImageUrl}\" alt=\"QR Code\" style=\"max-width: 300px; border: 2px solid #ddd; border-radius: 10px;\">\n                 </div>\n             `;\n            \n            // Afficher les instructions\n            this.showQRInstructions(qrContainer);\n        }\n\n        /**\n         * Afficher une image QR par d√©faut (fallback final)\n         */\n        displayDefaultQR(qrContainer, content, label) {\n            qrContainer.innerHTML = `\n                <div style=\"text-align: center; padding: 20px; color: #666;\">\n                    <div style=\"width: 300px; height: 300px; background: #f0f0f0; border: 2px solid #ddd; border-radius: 10px; display: flex; align-items: center; justify-content: center; margin: 0 auto;\">\n                        <div>\n                            <p style=\"font-size: 24px; margin: 0;\">üì±</p>\n                            <p style=\"font-size: 14px; margin: 10px 0 0 0;\">QR Code</p>\n                        </div>\n                    </div>\n                    <p style=\"margin-top: 10px; font-size: 12px;\">${label}</p>\n                    <p style=\"font-size: 10px; color: #999; margin-top: 5px;\">Contenu: ${content}</p>\n                </div>\n            `;\n        }\n\n        /**\n         * S'assurer que la biblioth√®que QRCode est disponible\n         */\n        async ensureQRCodeLibrary() {\n            if (typeof QRCode !== 'undefined') {\n                console.log('‚úÖ QRCode library d√©j√† disponible');\n                return true;\n            }\n            \n            console.log('üì¶ Chargement QRCode library...');\n            \n            return new Promise((resolve, reject) => {\n                const script = document.createElement('script');\n                script.src = 'https://cdn.jsdelivr.net/npm/qrcode@1.5.3/lib/browser.min.js';\n                script.onload = () => {\n                    setTimeout(() => {\n                        if (typeof QRCode !== 'undefined') {\n                            console.log('‚úÖ QRCode library charg√©e');\n                            resolve(true);\n                        } else {\n                            console.error('‚ùå QRCode non disponible apr√®s chargement');\n                            reject(new Error('QRCode library non disponible apr√®s chargement'));\n                        }\n                    }, 200);\n                };\n                script.onerror = () => {\n                    console.error('‚ùå Erreur chargement QRCode library');\n                    reject(new Error('Erreur chargement QRCode library'));\n                };\n                document.head.appendChild(script);\n            });\n        }\n\n        /**\n         * Afficher les instructions pour le QR code\n         */\n        showQRInstructions(qrContainer) {\n            const instructionsElement = qrContainer.parentElement.querySelector('.sunuid-qr-instructions');\n            const statusElement = qrContainer.parentElement.querySelector('.sunuid-qr-status');\n            \n            if (instructionsElement) {\n                instructionsElement.style.display = 'block';\n                instructionsElement.classList.add('sunuid-qr-ready');\n            }\n            if (statusElement) {\n                statusElement.style.display = 'block';\n                statusElement.classList.add('sunuid-qr-ready');\n            }\n        }\n\n        /**\n         * Ajouter le logo au centre du QR code\n         */\n        addLogoToCenter(ctx, x, y, width, height) {\n            try {\n                // Cr√©er une image pour le logo\n                const logo = new Image();\n                logo.onload = () => {\n                    const logoSize = 40;\n                    const logoX = x + (width - logoSize) / 2;\n                    const logoY = y + (width - logoSize) / 2;\n\n                    // Dessiner un fond blanc pour le logo\n                    ctx.fillStyle = 'white';\n                    ctx.fillRect(logoX - 2, logoY - 2, logoSize + 4, logoSize + 4);\n\n                    // Dessiner le logo\n                    ctx.drawImage(logo, logoX, logoY, logoSize, logoSize);\n                };\n                logo.src = 'src/logoqr.png';\n            } catch (error) {\n                console.warn('Logo non disponible:', error);\n            }\n        }\n\n        /**\n         * Afficher l'image de fallback\n         */\n        displayFallbackImage() {\n            console.log('‚ö†Ô∏è Affichage de l\\'image de fallback');\n            const qrContainer = document.getElementById('sunuid-qr-container');\n            if (qrContainer) {\n                qrContainer.innerHTML = `\n                    <div style=\"text-align: center; padding: 20px; color: #666;\">\n                        <p>‚ö†Ô∏è G√©n√©ration QR personnalis√© non disponible</p>\n                        <p>Utilisation de l'image par d√©faut</p>\n                        <p><strong>Debug:</strong> QRCode disponible: ${typeof QRCode !== 'undefined'}</p>\n                        <p><strong>Debug:</strong> Container trouv√©: ${qrContainer !== null}</p>\n                    </div>\n                `;\n            }\n        }\n\n        /**\n         * Afficher \"Service non disponible\"\n         */\n        displayServiceUnavailable(containerId, type) {\n            console.log(`displayServiceUnavailable appel√©e pour ${containerId}, type: ${type}`);\n            const container = document.getElementById(containerId);\n            if (!container) {\n                console.error(`Container ${containerId} non trouv√©`);\n                return;\n            }\n\n            container.innerHTML = `\n                <div class=\"sunuid-service-unavailable\" style=\"\n                    text-align: center;\n                    padding: 40px 20px;\n                    background: #f8f9fa;\n                    border: 2px dashed #dee2e6;\n                    border-radius: 10px;\n                    color: #6c757d;\n                    font-family: Arial, sans-serif;\n                \">\n                    <div style=\"font-size: 48px; margin-bottom: 20px;\">‚ö†Ô∏è</div>\n                    <h3 style=\"margin: 0 0 10px 0; color: #495057;\">Service Non Disponible</h3>\n                    <p style=\"margin: 0; font-size: 14px;\">\n                        Le service d'authentification est temporairement indisponible.<br>\n                        Veuillez r√©essayer plus tard.\n                    </p>\n                    <div style=\"margin-top: 20px; font-size: 12px; color: #adb5bd;\">\n                        Type: ${String(type).toUpperCase()}\n                    </div>\n                </div>\n            `;\n        }\n\n        /**\n         * Rafra√Æchir un QR code\n         */\n        async refreshQR(containerId, options = {}) {\n            try {\n                // V√©rifier si on a d√©j√† un QR code g√©n√©r√©\n                if (this.currentQRUrl) {\n                    console.log('üîÑ V√©rification du statut du QR code existant...');\n                    \n                    // Option 1: V√©rifier le statut du QR code via l'API\n                    // (√† impl√©menter si l'API le supporte)\n                    \n                    // Option 2: R√©g√©n√©rer le QR code seulement si n√©cessaire\n                    // Pour l'instant, on r√©g√©n√®re pour s'assurer qu'il est √† jour\n                    const result = await this.generateQR(containerId, options);\n                    return result;\n                } else {\n                    console.log('üîÑ Pas de QR code existant, g√©n√©ration d\\'un nouveau...');\n                    const result = await this.generateQR(containerId, options);\n                    return result;\n                }\n            } catch (error) {\n                console.error('Erreur lors du rafra√Æchissement:', error.message);\n                this.displayServiceUnavailable(containerId, this.config.type);\n                throw error;\n            }\n        }\n\n        /**\n         * D√©marrer le rafra√Æchissement automatique\n         */\n        startAutoRefresh(containerId, type, options) {\n            if (!this.config.autoRefresh) return;\n\n            // Arr√™ter le timer existant s'il y en a un\n            if (this.refreshTimer) {\n                clearInterval(this.refreshTimer);\n                console.log('üîÑ Timer de rafra√Æchissement pr√©c√©dent arr√™t√©');\n            }\n\n            this.refreshTimer = setInterval(async () => {\n                try {\n                    console.log('üîÑ Rafra√Æchissement automatique du QR code...');\n                    await this.refreshQR(containerId, type, options);\n                } catch (error) {\n                    console.warn('Erreur lors du rafra√Æchissement automatique:', error);\n                }\n            }, this.config.refreshInterval);\n            \n            console.log(`üîÑ Timer de rafra√Æchissement d√©marr√© (${this.config.refreshInterval}ms)`);\n        }\n\n        /**\n         * D√©marrer le timer de compte √† rebours\n         */\n\n\n        /**\n         * Effectuer une requ√™te API s√©curis√©e\n         */\n        async makeRequest(endpoint, data) {\n            // Validation de s√©curit√©\n            if (!this.isInitialized) {\n                this.logSecurityEvent('REQUEST_BEFORE_INIT', { endpoint });\n                throw new Error('SDK non initialis√©');\n            }\n\n            // V√©rifier les limites de requ√™tes pour l'initialisation s√©curis√©e\n            if (this.config.secureInit) {\n                this.config.requestCount++;\n                if (this.config.requestCount > this.config.maxRequests) {\n                    this.logSecurityEvent('API_REQUEST_LIMIT_EXCEEDED', { \n                        requestCount: this.config.requestCount,\n                        maxRequests: this.config.maxRequests \n                    });\n                    throw new Error('Limite de requ√™tes d√©pass√©e');\n                }\n            }\n\n            // Sanitisation des donn√©es\n            const sanitizedData = this.sanitizeRequestData(data);\n            \n            // Debug: Afficher les donn√©es envoy√©es\n            console.log('üîç Debug makeRequest - endpoint:', endpoint);\n            console.log('üîç Debug makeRequest - apiUrl:', this.config.apiUrl);\n            console.log('üîç Debug makeRequest - url:', `${this.config.apiUrl}${endpoint}`);\n            console.log('üîç Debug makeRequest - data:', JSON.stringify(sanitizedData, null, 2));\n            console.log('üîç Debug makeRequest - secureInit:', this.config.secureInit);\n            console.log('üîç Debug makeRequest - isInitialized:', this.isInitialized);\n            \n            // Utiliser l'endpoint depuis la configuration si disponible\n            const endpointPath = window.SunuIDConfig?.endpoints?.[endpoint.replace('/', '')] || endpoint;\n            const url = `${this.config.apiUrl}${endpointPath}`;\n            \n            // Debug: Afficher l'URL finale\n            console.log('üîç URL finale construite:', url);\n            console.log('üîç EndpointPath:', endpointPath);\n            console.log('üîç SunuIDConfig endpoints:', JSON.stringify(window.SunuIDConfig?.endpoints));\n            \n            // Log de s√©curit√© pour la requ√™te\n            this.logSecurityEvent('API_REQUEST_START', {\n                endpoint: endpointPath,\n                url: url,\n                dataKeys: Object.keys(sanitizedData),\n                secureInit: this.config.secureInit\n            });\n            \n            let retryCount = 0;\n            const maxRetries = this.config.maxRetries;\n            \n            while (retryCount <= maxRetries) {\n                try {\n                    const controller = new AbortController();\n                    const timeoutId = setTimeout(() => controller.abort(), this.config.requestTimeout);\n                    \n                    // Headers minimaux (API SunuID n'accepte que les headers essentiels)\n                    const headers = {\n                        'Content-Type': 'application/json'\n                    };\n\n                    // Note: En mode s√©curis√©, les credentials sont dans le body\n                    // Pas besoin d'ajouter de header sp√©cial pour √©viter les probl√®mes CORS\n                    // if (this.config.secureInit && this.config.token) {\n                    //     headers['X-Secure-Token'] = this.config.token;\n                    // }\n                    \n                    const response = await fetch(url, {\n                        method: 'POST',\n                        headers: headers,\n                        body: JSON.stringify(sanitizedData),\n                        signal: controller.signal\n                    });\n\n                    clearTimeout(timeoutId);\n\n                    if (!response.ok) {\n                        const errorText = await response.text();\n                        let errorData;\n                        try {\n                            errorData = JSON.parse(errorText);\n                        } catch (e) {\n                            errorData = { message: errorText };\n                        }\n                        \n                        this.logSecurityEvent('API_REQUEST_ERROR', {\n                            status: response.status,\n                            statusText: response.statusText,\n                            error: errorData.message\n                        });\n                        \n                        throw new Error(errorData.message || `Erreur HTTP: ${response.status}`);\n                    }\n\n                    const result = await response.json();\n                    \n                    this.logSecurityEvent('API_REQUEST_SUCCESS', {\n                        endpoint: endpointPath,\n                        responseKeys: Object.keys(result)\n                    });\n                    \n                    return result;\n                    \n                } catch (error) {\n                    retryCount++;\n                    \n                    if (error.name === 'AbortError') {\n                        this.logSecurityEvent('API_REQUEST_TIMEOUT', { retryCount });\n                        if (retryCount > maxRetries) {\n                            throw new Error('Timeout de la requ√™te API');\n                        }\n                        continue;\n                    }\n                    \n                    if (retryCount > maxRetries) {\n                        this.logSecurityEvent('API_REQUEST_MAX_RETRIES', { \n                            retryCount, \n                            error: error.message \n                        });\n                        throw error;\n                    }\n                    \n                    // Attendre avant de r√©essayer\n                    await new Promise(resolve => setTimeout(resolve, 1000 * retryCount));\n                }\n            }\n        }\n\n        /**\n         * Sanitisation des donn√©es de requ√™te\n         */\n        sanitizeRequestData(data) {\n            const sanitized = {};\n            \n            for (const [key, value] of Object.entries(data)) {\n                if (typeof value === 'string') {\n                    sanitized[key] = this.sanitizeInput(value);\n                } else if (typeof value === 'object' && value !== null) {\n                    sanitized[key] = this.sanitizeRequestData(value);\n                } else {\n                    sanitized[key] = value;\n                }\n            }\n            \n            // Ajouter les credentials dans le body (API SunuID les attend ici)\n            // Utiliser les vraies valeurs (originales) si disponibles, sinon les valeurs directes\n            sanitized.client_id = this.config.originalClientId || this.config.clientId;\n            sanitized.secret_id = this.config.originalSecretId || this.config.secretId;\n            \n            // Debug: V√©rifier les credentials\n            console.log('üîç Credentials dans sanitizeRequestData - clientId:', this.config.clientId);\n            console.log('üîç Credentials dans sanitizeRequestData - secretId:', this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null');\n            console.log('üîç Credentials dans sanitizeRequestData - sanitizedClientId:', sanitized.client_id);\n            console.log('üîç Credentials dans sanitizeRequestData - sanitizedSecretId:', sanitized.secret_id ? '***' + sanitized.secret_id.slice(-4) : 'null');\n            console.log('üîç Credentials dans sanitizeRequestData - data complet:', JSON.stringify(sanitized, null, 2));\n            \n            // Debug: V√©rifier les credentials\n            console.log('üîç Credentials dans sanitizeRequestData - clientId:', this.config.clientId);\n            console.log('üîç Credentials dans sanitizeRequestData - secretId:', this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null');\n            console.log('üîç Credentials dans sanitizeRequestData - sanitizedClientId:', sanitized.client_id);\n            console.log('üîç Credentials dans sanitizeRequestData - sanitizedSecretId:', sanitized.secret_id ? '***' + sanitized.secret_id.slice(-4) : 'null');\n            console.log('üîç Credentials dans sanitizeRequestData - data complet:', JSON.stringify(sanitized, null, 2));\n            \n            return sanitized;\n        }\n\n        /**\n         * G√©n√©rer un ID de requ√™te unique\n         */\n        generateRequestId() {\n            return 'req_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n        }\n\n        /**\n         * G√©n√©rer un code de session unique\n         */\n        generateSessionCode() {\n            const timestamp = Date.now();\n            const random = Math.random().toString(36).substr(2, 9);\n            const code = `${timestamp}_${random}`;\n            return btoa(code); // Encoder en base64\n        }\n\n        /**\n         * R√©cup√©rer les informations du partenaire depuis l'API\n         */\n        async fetchPartnerInfo() {\n            try {\n                const response = await this.makeRequest('/debug', {\n                    type: this.config.type,\n                    client_id: this.config.clientId,\n                    secret_id: this.config.secretId\n                });\n\n                console.log('üìã R√©ponse debug API:', response);\n\n                if (response.success && response.authentication && response.authentication.auth_test) {\n                    const authTest = response.authentication.auth_test;\n                    this.config.partnerId = authTest.partner_id;\n                    \n                    // R√©cup√©rer le service_id depuis la r√©ponse\n                    if (response.service_id) {\n                        this.config.serviceId = response.service_id;\n                    } else {\n                        // Fallback: utiliser le partner_id comme service_id\n                        this.config.serviceId = authTest.partner_id;\n                    }\n                    \n                    // Utiliser le partner_id pour d√©terminer le nom du partenaire\n                    // Pour l'instant, on utilise une logique simple bas√©e sur l'ID\n                    if (authTest.partner_id === 21) {\n                        this.config.partnerName = 'Fayma';\n                    } else {\n                        this.config.partnerName = `Partner_${authTest.partner_id}`;\n                    }\n                    \n                    console.log('‚úÖ Informations partenaire r√©cup√©r√©es:', {\n                        partnerName: this.config.partnerName,\n                        partnerId: this.config.partnerId,\n                        serviceId: this.config.serviceId\n                    });\n                } else {\n                    console.warn('‚ö†Ô∏è Impossible de r√©cup√©rer les informations du partenaire, utilisation du partner_id');\n                    this.config.partnerName = `Partner_${this.config.partnerId || 'unknown'}`;\n                }\n            } catch (error) {\n                console.warn('‚ö†Ô∏è Erreur lors de la r√©cup√©ration des informations du partenaire:', error.message);\n                this.config.partnerName = 'Partner_unknown';\n            }\n        }\n\n        /**\n         * Appliquer le th√®me\n         */\n        applyTheme(theme) {\n            const container = document.querySelector('.sunuid-qr-code');\n            if (container) {\n                container.className = `sunuid-qr-code sunuid-theme-${theme}`;\n            }\n        }\n\n        /**\n         * G√©rer les erreurs\n         */\n        handleError(error) {\n            console.error('SunuID SDK Error:', error);\n            \n            if (this.config.onError) {\n                this.config.onError(error);\n            }\n        }\n\n        /**\n         * V√©rifier le statut des connexions\n         */\n        async checkConnections() {\n            const status = {\n                api: false,\n                websocket: false,\n                ready: false\n            };\n            \n            // V√©rifier l'API en utilisant l'endpoint debug\n            try {\n                const testResponse = await fetch(this.config.apiUrl + '/debug', {\n                    method: 'GET',\n                    timeout: 3000\n                });\n                \n                if (testResponse.ok) {\n                    const debugData = await testResponse.json();\n                    status.api = debugData.status === 'operational';\n                    console.log('üîç API Status:', debugData.status);\n                } else {\n                    status.api = false;\n                }\n            } catch (error) {\n                console.log('üîç Test API √©chou√©:', error.message);\n                status.api = false;\n            }\n            \n            // V√©rifier le WebSocket\n            status.websocket = this.socket && this.socket.connected;\n            \n            // Connexions pr√™tes si API est accessible\n            status.ready = status.api;\n            \n            return status;\n        }\n        \n        /**\n         * Attendre que les connexions soient pr√™tes\n         */\n        async waitForConnections(timeout = 5000) {\n            const startTime = Date.now();\n            \n            while (Date.now() - startTime < timeout) {\n                const status = await this.checkConnections();\n                \n                if (status.ready) {\n                    console.log('‚úÖ Connexions pr√™tes');\n                    return status;\n                }\n                \n                console.log('‚è≥ Attente connexions...', status);\n                await new Promise(resolve => setTimeout(resolve, 1000)); // V√©rification toutes les secondes\n            }\n            \n            throw new Error('Timeout connexions - Impossible de g√©n√©rer le QR code');\n        }\n        \n        /**\n         * Obtenir l'URL du QR code g√©n√©r√©\n         */\n        getQRCode() {\n            // Retourner l'URL du QR code si disponible\n            if (this.currentQRUrl) {\n                return this.currentQRUrl;\n            }\n            \n            // Sinon, retourner une URL par d√©faut ou null\n            return null;\n        }\n\n        /**\n         * Nettoyer les ressources\n         */\n        destroy() {\n            this.stopAutoRefresh();\n            \n            // Fermer la connexion WebSocket\n            if (this.socket) {\n                this.socket.disconnect();\n                this.socket = null;\n                console.log('üåê WebSocket d√©connect√©');\n            }\n            \n            this.isInitialized = false;\n            this.logSecurityEvent('SDK_DESTROY');\n            console.log('SunuID SDK d√©truit');\n        }\n\n        /**\n         * Arr√™ter le rafra√Æchissement automatique\n         */\n        stopAutoRefresh() {\n            if (this.refreshTimer) {\n                clearInterval(this.refreshTimer);\n                this.refreshTimer = null;\n                console.log('üîÑ Timer de rafra√Æchissement arr√™t√©');\n            }\n        }\n\n        /**\n         * Obtenir les logs de s√©curit√©\n         */\n        getSecurityLogs() {\n            return window.SunuIDSecurityLogs || [];\n        }\n\n        /**\n         * Nettoyer les logs de s√©curit√©\n         */\n        clearSecurityLogs() {\n            window.SunuIDSecurityLogs = [];\n            this.logSecurityEvent('SECURITY_LOGS_CLEARED');\n        }\n\n        /**\n         * Afficher un loader pendant le scan du QR code\n         */\n        showQRLoader() {\n            console.log('üîÑ Affichage du loader - Scan QR initi√©');\n            \n            // Chercher le conteneur QR dans diff√©rents IDs possibles\n            const containerIds = ['qr-area', 'qr-container', 'sunuid-qr-container'];\n            let container = null;\n            \n            for (const id of containerIds) {\n                container = document.getElementById(id);\n                if (container) break;\n            }\n            \n            if (!container) {\n                console.warn('‚ö†Ô∏è Conteneur QR non trouv√© pour afficher le loader');\n                return;\n            }\n            \n            // Remplacer le contenu par un loader anim√©\n            container.innerHTML = `\n                <div style=\"\n                    text-align: center;\n                    padding: 40px 20px;\n                    background: #f8f9fa;\n                    border: 2px solid #007bff;\n                    border-radius: 10px;\n                    color: #007bff;\n                    font-family: Arial, sans-serif;\n                \">\n                    <div style=\"\n                        width: 60px;\n                        height: 60px;\n                        border: 4px solid #e3f2fd;\n                        border-top: 4px solid #007bff;\n                        border-radius: 50%;\n                        animation: spin 1s linear infinite;\n                        margin: 0 auto 20px auto;\n                    \"></div>\n                    <h3 style=\"margin: 0 0 10px 0; color: #007bff;\">üîç Scan en cours...</h3>\n                    <p style=\"margin: 0; font-size: 14px;\">\n                        Veuillez patienter pendant la v√©rification de votre identit√©.\n                    </p>\n                    <div style=\"margin-top: 15px; font-size: 12px; color: #6c757d;\">\n                        ‚è±Ô∏è Traitement en cours...\n                    </div>\n                </div>\n                <style>\n                    @keyframes spin {\n                        0% { transform: rotate(0deg); }\n                        100% { transform: rotate(360deg); }\n                    }\n                </style>\n            `;\n            \n            console.log('‚úÖ Loader affich√© avec succ√®s');\n        }\n    }\n\n    // Exposer la classe globalement\n    window.SunuID = SunuID;\n    window.sunuidInstance = null;\n\n    // Fonction d'initialisation globale\n    window.initSunuID = function(config) {\n        try {\n            window.sunuidInstance = new SunuID(config);\n            return window.sunuidInstance;\n        } catch (error) {\n            console.error('Erreur lors de l\\'initialisation de SunuID:', error);\n            throw error;\n        }\n    };\n\n})(window); "],"names":["window","_window$SunuIDConfig","_window$SunuIDConfig2","_window$SunuIDConfig3","DEFAULT_CONFIG","apiUrl","SunuIDConfig","clientId","secretId","type","partnerName","theme","language","autoRefresh","refreshInterval","autoInit","onSuccess","onError","onStatusUpdate","onExpired","enableSecurityLogs","validateInputs","maxRetries","requestTimeout","secureInit","secureInitUrl","includes","replace","token","forceRemoteServer","useLocalFallback","SunuID","config","arguments","length","undefined","_classCallCheck","this","_objectSpread","qrCode","refreshTimer","isInitialized","socket","initPromise","init","key","value","_init","_asyncToGenerator","_regenerator","m","_callee","_t","w","_context","p","n","validateSecurityParams","logSecurityEvent","fetchPartnerInfo","obfuscateCredentials","console","log","slice","initWebSocket","v","error","message","a","apply","_secureInit","_callee2","initData","response","result","decodedToken","_t2","_context2","fetch","method","headers","Accept","body","JSON","stringify","ok","Error","concat","status","json","success","data","api_url","decodeSecureToken","client_id","secret_id","expiresIn","expires_in","maxRequests","max_requests","requestCount","parts","split","_parts","_slicedToArray","payload","decodedPayload","atob","tokenData","parse","exp","Date","now","_this","io","warn","setTimeout","ip","getClientIP","query","userId","username","transports","on","id","connected","reason","handleQRStatusUpdate","handleQRScanSuccess","handleQRExpired","onAny","eventName","_len","args","Array","_key","showQRLoader","errors","push","isValidUrl","join","string","url","URL","protocol","_","event","securityLog","timestamp","toISOString","userAgent","navigator","location","href","SunuIDSecurityLogs","originalClientId","originalSecretId","clientIdDisplay","secretIdDisplay","input","trim","emit","_generateQR","_callee3","containerId","options","connectionStatus","socketId","qrContent","qrImageUrl","isLocal","_t3","_t4","_args3","_context3","waitForConnections","makeRequest","content","label","getTypeName","qrCodeUrl","startsWith","currentQRUrl","sessionId","displayQRCode","startAutoRefresh","emitWebSocketEvent","stack","hostname","displayServiceUnavailable","_generateCustomQR","_callee4","_t5","_args4","_context4","qrcode","code","service_id","_x","_x2","_generateAuthQR","_callee5","_args5","_context5","generateQR","_x3","_generateKYCQR","_callee6","originalType","_args6","_context6","f","_x4","_generateSignatureQR","_callee7","_args7","_context7","_x5","_checkQRStatus","_callee8","_t6","_context8","serviceId","handleError","_x6","_generateQRWithContent","_callee9","localQRUrl","_t7","_args9","_context9","generateQRLocal","generateQRRemote","displayQRContent","_x7","_x8","_x9","_generateQRLocal","_callee0","qrUrl","_t8","_args0","_context0","encodeURIComponent","_x0","_x1","_x10","_generateQRRemote","_callee1","_t9","_args1","_context1","text","size","_x11","_x12","_x13","container","document","getElementById","typeName","innerHTML","qrElement","createElement","className","appendChild","applyTheme","_generateCustomQRCode","_callee10","qrContainer","_t0","_context10","generateQRPHP","displayDefaultQR","_x14","_x15","_generateQRClientSide","_callee11","canvas","ctx","_this2","_context11","ensureQRCodeLibrary","QRCode","width","height","getContext","fillStyle","fillRect","Promise","resolve","reject","toCanvas","margin","color","dark","light","font","textAlign","fillText","dataUrl","toDataURL","showQRInstructions","_x16","_x17","_x18","_generateQRPHP","_callee12","qrGeneratorUrl","requestBody","contentType","responseData","_context12","URLSearchParams","foreground_color","background_color","data_uri","_x19","_x20","_x21","_ensureQRCodeLibrary","_callee13","_context13","script","src","onload","onerror","head","instructionsElement","parentElement","querySelector","statusElement","style","display","classList","add","x","y","logo","Image","logoSize","logoX","logoY","drawImage","String","toUpperCase","_refreshQR","_callee14","_result","_t1","_args14","_context14","_x22","_this3","clearInterval","setInterval","_callee15","_t10","_context15","refreshQR","_makeRequest","_callee16","endpoint","_window$SunuIDConfig4","_window$SunuIDConfig5","sanitizedData","endpointPath","retryCount","_loop","_ret","_this4","_context17","sanitizeRequestData","endpoints","dataKeys","Object","keys","controller","timeoutId","errorText","errorData","_t11","_context16","AbortController","abort","signal","clearTimeout","e","statusText","responseKeys","name","d","_regeneratorValues","_x23","_x24","sanitized","_i","_Object$entries","entries","_Object$entries$_i","sanitizeInput","_typeof","Math","random","toString","substr","btoa","_fetchPartnerInfo","_callee17","authTest","_t12","_context18","authentication","auth_test","partnerId","partner_id","_checkConnections","_callee18","testResponse","debugData","_t13","_context19","api","websocket","ready","timeout","_waitForConnections","_callee19","startTime","_args20","_context20","checkConnections","stopAutoRefresh","disconnect","_i2","_containerIds","sunuidInstance","initSunuID"],"mappings":"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"}