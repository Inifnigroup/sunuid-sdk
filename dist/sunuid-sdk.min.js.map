{"version":3,"file":"sunuid-sdk.min.js","sources":["../src/sunuid-sdk.js"],"sourcesContent":["/**\n * SunuID SDK - Package d'int√©gration pour partenaires\n * \n * @version 1.0.0\n * @author SunuID Team\n * @license MIT\n */\n\n(function(window) {\n    'use strict';\n\n    // Configuration par d√©faut\n    const DEFAULT_CONFIG = {\n        apiUrl: window.SunuIDConfig?.apiUrl || 'https://api.sunuid.fayma.sn',\n        clientId: null,\n        secretId: null,\n        type: 1, // Type par d√©faut (1 = authentification)\n        theme: 'light',\n        language: 'fr',\n        autoRefresh: true,\n        refreshInterval: 30000, // 30 secondes\n        onSuccess: null,\n        onError: null,\n        onStatusUpdate: null,\n        onExpired: null\n    };\n\n    /**\n     * Classe principale SunuID\n     */\n    class SunuID {\n        constructor(config = {}) {\n            this.config = { ...DEFAULT_CONFIG, ...config };\n            this.qrCode = null;\n            this.refreshTimer = null;\n            this.isInitialized = false;\n            this.socket = null;\n            \n            this.init();\n        }\n\n        /**\n         * Initialisation du SDK\n         */\n        init() {\n            if (!this.config.clientId || !this.config.secretId) {\n                throw new Error('SunuID: clientId et secretId sont requis');\n            }\n\n            this.isInitialized = true;\n            console.log('SunuID SDK initialis√© avec succ√®s');\n            \n            // Initialiser la connexion WebSocket\n            this.initWebSocket();\n        }\n\n        /**\n         * Initialiser la connexion WebSocket\n         */\n        initWebSocket() {\n            try {\n                // Obtenir l'IP du client (simulation)\n                const ip = this.getClientIP();\n                \n                // Initialiser la connexion WebSocket si elle n'existe pas\n                if (!this.socket) {\n                    this.socket = io('wss://samasocket.fayma.sn:9443', {\n                        query: {\n                            token: this.config.clientId,\n                            type: 'web',\n                            userId: this.config.clientId,\n                            username: ip\n                        }\n                    });\n\n                    // Gestion des √©v√©nements WebSocket\n                    this.socket.on('connect', () => {\n                        console.log('üåê WebSocket connect√© avec succ√®s');\n                        console.log('üìä Socket ID:', this.socket.id);\n                    });\n\n                    this.socket.on('disconnect', (reason) => {\n                        console.log('‚ùå WebSocket d√©connect√©:', reason);\n                    });\n\n                    this.socket.on('connect_error', (error) => {\n                        console.error('‚ùå Erreur connexion WebSocket:', error);\n                    });\n\n                    // √âcouter les √©v√©nements sp√©cifiques\n                    this.socket.on('qr_status_update', (data) => {\n                        console.log('üì± Mise √† jour statut QR re√ßue:', data);\n                        this.handleQRStatusUpdate(data);\n                    });\n\n                    this.socket.on('qr_scan_success', (data) => {\n                        console.log('‚úÖ Scan QR r√©ussi re√ßu:', data);\n                        this.handleQRScanSuccess(data);\n                    });\n\n                    this.socket.on('qr_expired', (data) => {\n                        console.log('‚è∞ QR expir√© re√ßu:', data);\n                        this.handleQRExpired(data);\n                    });\n                }\n            } catch (error) {\n                console.error('‚ùå Erreur initialisation WebSocket:', error);\n            }\n        }\n\n        /**\n         * Obtenir l'IP du client (simulation)\n         */\n        getClientIP() {\n            // Simulation - en production, vous pourriez utiliser un service d'IP\n            return '127.0.0.1';\n        }\n\n        /**\n         * G√©rer la mise √† jour du statut QR\n         */\n        handleQRStatusUpdate(data) {\n            if (this.config.onStatusUpdate) {\n                this.config.onStatusUpdate(data);\n            }\n        }\n\n        /**\n         * G√©rer le succ√®s du scan QR\n         */\n        handleQRScanSuccess(data) {\n            if (this.config.onSuccess) {\n                this.config.onSuccess(data);\n            }\n        }\n\n        /**\n         * G√©rer l'expiration du QR\n         */\n        handleQRExpired(data) {\n            if (this.config.onExpired) {\n                this.config.onExpired(data);\n            }\n        }\n\n        /**\n         * √âmettre un √©v√©nement WebSocket\n         */\n        emitWebSocketEvent(event, data) {\n            if (this.socket && this.socket.connected) {\n                this.socket.emit(event, data);\n                console.log(`üì§ √âv√©nement WebSocket √©mis: ${event}`, data);\n            } else {\n                console.warn('‚ö†Ô∏è WebSocket non connect√©, impossible d\\'√©mettre l\\'√©v√©nement:', event);\n            }\n        }\n\n        /**\n         * Obtenir le statut de la connexion WebSocket\n         */\n        getWebSocketStatus() {\n            if (!this.socket) {\n                return 'not_initialized';\n            }\n            return this.socket.connected ? 'connected' : 'disconnected';\n        }\n\n        /**\n         * G√©n√©rer un QR code avec le type configur√©\n         */\n        async generateQR(containerId, options = {}) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-generate', {\n                    type: this.config.type, // Utilise le type configur√©\n                    ...options\n                });\n\n                if (response.success) {\n                    // Construire l'URL compl√®te de l'image QR avec la base URL pour les images\n                    const imageBaseUrl = 'https://sunuid.fayma.sn';\n                    const qrImageUrl = `${imageBaseUrl}${response.data.qrcode}`;\n                    this.displayQRCode(containerId, qrImageUrl, this.config.type, options);\n                    this.startAutoRefresh(containerId, this.config.type, options);\n                    \n                    // √âmettre un √©v√©nement WebSocket pour la g√©n√©ration du QR\n                    this.emitWebSocketEvent('qr_generated', {\n                        serviceId: response.data.service_id,\n                        type: this.config.type,\n                        qrCodeUrl: qrImageUrl,\n                        timestamp: Date.now()\n                    });\n                    \n                    return {\n                        ...response.data,\n                        qrCodeUrl: qrImageUrl,\n                        sessionId: response.data.service_id\n                    };\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la g√©n√©ration du QR code');\n                }\n            } catch (error) {\n                console.error('Erreur API d√©tect√©e:', error.message);\n                console.log('Affichage du message \"Service non disponible\" pour type ' + this.config.type);\n                this.displayServiceUnavailable(containerId, this.config.type);\n                throw new Error('Service non disponible');\n            }\n        }\n\n\n\n        /**\n         * G√©n√©rer un QR code avec un type personnalis√©\n         */\n        async generateCustomQR(containerId, type, options = {}) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-generate', {\n                    type: type, // Type personnalis√© (1, 2, 3, etc.)\n                    ...options\n                });\n\n                if (response.success) {\n                    // Construire l'URL compl√®te de l'image QR avec la base URL pour les images\n                    const imageBaseUrl = 'https://sunuid.fayma.sn';\n                    const qrImageUrl = `${imageBaseUrl}${response.data.qrcode}`;\n                    this.displayQRCode(containerId, qrImageUrl, type, options);\n                    this.startAutoRefresh(containerId, type, options);\n                    return {\n                        ...response.data,\n                        qrCodeUrl: qrImageUrl,\n                        sessionId: response.data.service_id\n                    };\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la g√©n√©ration du QR code');\n                }\n            } catch (error) {\n                console.error('Erreur API d√©tect√©e:', error.message);\n                console.log('Affichage du message \"Service non disponible\" pour type ' + type);\n                this.displayServiceUnavailable(containerId, type);\n                throw new Error('Service non disponible');\n            }\n        }\n\n        // Alias pour maintenir la compatibilit√©\n        async generateAuthQR(containerId, options = {}) {\n            return this.generateQR(containerId, options);\n        }\n\n        async generateKYCQR(containerId, options = {}) {\n            // Sauvegarder le type actuel\n            const originalType = this.config.type;\n            // Changer temporairement le type pour KYC\n            this.config.type = 2;\n            try {\n                return await this.generateQR(containerId, options);\n            } finally {\n                // Restaurer le type original\n                this.config.type = originalType;\n            }\n        }\n\n        /**\n         * V√©rifier le statut d'un QR code\n         */\n        async checkQRStatus(sessionId) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-status', {\n                    serviceId: sessionId\n                });\n\n                if (response.success) {\n                    return response.data;\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la v√©rification du statut');\n                }\n            } catch (error) {\n                this.handleError(error);\n                throw error;\n            }\n        }\n\n        /**\n         * Afficher un QR code dans un conteneur\n         */\n        displayQRCode(containerId, qrUrl, type, options = {}) {\n            const container = document.getElementById(containerId);\n            if (!container) {\n                throw new Error(`Conteneur avec l'ID \"${containerId}\" non trouv√©`);\n            }\n\n            // Nettoyer le conteneur\n            container.innerHTML = '';\n\n            // Cr√©er l'√©l√©ment QR code\n            const qrElement = document.createElement('div');\n            qrElement.className = 'sunuid-qr-code';\n            qrElement.innerHTML = `\n                    <div class=\"sunuid-qr-header\">\n                    <h3>${type === 1 ? 'Authentification' : type === 2 ? 'V√©rification KYC' : type === 3 ? 'Service Type 3' : 'Service Type ' + type}</h3>\n                    </div>\n                <div class=\"sunuid-qr-image\">\n                    <img src=\"${qrUrl}\" alt=\"QR Code SunuID\" style=\"max-width: 300px; height: auto;\">\n                    </div>\n                <div class=\"sunuid-qr-instructions\">\n                    <p>Scannez ce QR code avec l'application SunuID pour vous connecter</p>\n                    </div>\n                <div class=\"sunuid-qr-status\" id=\"sunuid-status\">\n                    <p>En attente de scan...</p>\n                </div>\n            `;\n\n            container.appendChild(qrElement);\n\n            // Appliquer le th√®me\n            this.applyTheme(options.theme || this.config.theme);\n        }\n\n        /**\n         * Afficher \"Service non disponible\"\n         */\n        displayServiceUnavailable(containerId, type) {\n            console.log(`displayServiceUnavailable appel√©e pour ${containerId}, type: ${type}`);\n            const container = document.getElementById(containerId);\n            if (!container) {\n                console.error(`Container ${containerId} non trouv√©`);\n                return;\n            }\n\n            container.innerHTML = `\n                <div class=\"sunuid-service-unavailable\" style=\"\n                    text-align: center;\n                    padding: 40px 20px;\n                    background: #f8f9fa;\n                    border: 2px dashed #dee2e6;\n                    border-radius: 10px;\n                    color: #6c757d;\n                    font-family: Arial, sans-serif;\n                \">\n                    <div style=\"font-size: 48px; margin-bottom: 20px;\">‚ö†Ô∏è</div>\n                    <h3 style=\"margin: 0 0 10px 0; color: #495057;\">Service Non Disponible</h3>\n                    <p style=\"margin: 0; font-size: 14px;\">\n                        Le service d'authentification est temporairement indisponible.<br>\n                        Veuillez r√©essayer plus tard.\n                    </p>\n                    <div style=\"margin-top: 20px; font-size: 12px; color: #adb5bd;\">\n                        Type: ${type.toUpperCase()}\n                    </div>\n                </div>\n            `;\n        }\n\n        /**\n         * Rafra√Æchir un QR code\n         */\n        async refreshQR(containerId, options = {}) {\n            try {\n                const result = await this.generateQR(containerId, options);\n                return result;\n            } catch (error) {\n                console.error('Erreur lors du rafra√Æchissement:', error.message);\n                this.displayServiceUnavailable(containerId, this.config.type);\n                throw error;\n            }\n        }\n\n        /**\n         * D√©marrer le rafra√Æchissement automatique\n         */\n        startAutoRefresh(containerId, type, options) {\n            if (!this.config.autoRefresh) return;\n\n            this.refreshTimer = setInterval(async () => {\n                try {\n                    await this.refreshQR(containerId, type, options);\n                } catch (error) {\n                    console.warn('Erreur lors du rafra√Æchissement automatique:', error);\n                }\n            }, this.config.refreshInterval);\n        }\n\n        /**\n         * D√©marrer le timer de compte √† rebours\n         */\n\n\n        /**\n         * Effectuer une requ√™te API\n         */\n        async makeRequest(endpoint, data) {\n            // Utiliser l'endpoint depuis la configuration si disponible\n            const endpointPath = window.SunuIDConfig?.endpoints?.[endpoint.replace('/', '')] || endpoint;\n            const url = `${this.config.apiUrl}${endpointPath}`;\n            \n            // Log pour d√©boguer l'envoi du type\n            if (data.type !== undefined) {\n                console.log(`üåê Envoi requ√™te API - Type: ${data.type}, Endpoint: ${endpoint}`);\n            }\n            \n            try {\n                const response = await fetch(url, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': `Bearer ${this.config.clientId}:${this.config.secretId}`,\n                        'Accept': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        ...data,\n                        client_id: this.config.clientId,\n                        secret_id: this.config.secretId\n                    })\n                });\n\n                if (!response.ok) {\n                    const errorText = await response.text();\n                    let errorData;\n                    try {\n                        errorData = JSON.parse(errorText);\n                    } catch (e) {\n                        errorData = { message: errorText };\n                    }\n                    \n                    throw new Error(errorData.message || `Erreur HTTP: ${response.status}`);\n                }\n\n                const result = await response.json();\n                return result;\n            } catch (error) {\n                console.error('Erreur API SunuID:', error);\n                throw error;\n            }\n        }\n\n        /**\n         * Appliquer le th√®me\n         */\n        applyTheme(theme) {\n            const container = document.querySelector('.sunuid-qr-code');\n            if (container) {\n                container.className = `sunuid-qr-code sunuid-theme-${theme}`;\n            }\n        }\n\n        /**\n         * G√©rer les erreurs\n         */\n        handleError(error) {\n            console.error('SunuID SDK Error:', error);\n            \n            if (this.config.onError) {\n                this.config.onError(error);\n            }\n        }\n\n        /**\n         * Nettoyer les ressources\n         */\n        destroy() {\n            if (this.refreshTimer) {\n                clearInterval(this.refreshTimer);\n            }\n            \n            // Fermer la connexion WebSocket\n            if (this.socket) {\n                this.socket.disconnect();\n                this.socket = null;\n                console.log('üåê WebSocket d√©connect√©');\n            }\n            \n            this.isInitialized = false;\n            console.log('SunuID SDK d√©truit');\n        }\n    }\n\n    // Exposer la classe globalement\n    window.SunuID = SunuID;\n    window.sunuidInstance = null;\n\n    // Fonction d'initialisation globale\n    window.initSunuID = function(config) {\n        try {\n            window.sunuidInstance = new SunuID(config);\n            return window.sunuidInstance;\n        } catch (error) {\n            console.error('Erreur lors de l\\'initialisation de SunuID:', error);\n            throw error;\n        }\n    };\n\n})(window); "],"names":["window","_window$SunuIDConfig","DEFAULT_CONFIG","apiUrl","SunuIDConfig","clientId","secretId","type","theme","language","autoRefresh","refreshInterval","onSuccess","onError","onStatusUpdate","onExpired","SunuID","config","arguments","length","undefined","_classCallCheck","this","_objectSpread","qrCode","refreshTimer","isInitialized","socket","init","key","value","Error","console","log","initWebSocket","_this","ip","getClientIP","io","query","token","userId","username","on","id","reason","error","data","handleQRStatusUpdate","handleQRScanSuccess","handleQRExpired","event","connected","emit","concat","warn","_generateQR","_asyncToGenerator","_regenerator","m","_callee","containerId","options","response","qrImageUrl","_t","_args","w","_context","p","n","makeRequest","v","success","qrcode","displayQRCode","startAutoRefresh","emitWebSocketEvent","serviceId","service_id","qrCodeUrl","timestamp","Date","now","a","sessionId","message","displayServiceUnavailable","_x","apply","_generateCustomQR","_callee2","_t2","_args2","_context2","_x2","_x3","_generateAuthQR","_callee3","_args3","_context3","generateQR","_x4","_generateKYCQR","_callee4","originalType","_args4","_context4","f","_x5","_checkQRStatus","_callee5","_t3","_context5","handleError","_x6","qrUrl","container","document","getElementById","innerHTML","qrElement","createElement","className","appendChild","applyTheme","toUpperCase","_refreshQR","_callee6","result","_t4","_args6","_context6","_x7","_this2","setInterval","_callee7","_t5","_context7","refreshQR","_makeRequest","_callee8","endpoint","_window$SunuIDConfig2","endpointPath","url","errorText","errorData","_t6","_context8","endpoints","replace","fetch","method","headers","Authorization","Accept","body","JSON","stringify","client_id","secret_id","ok","text","parse","e","status","json","_x8","_x9","querySelector","clearInterval","disconnect","sunuidInstance","initSunuID"],"mappings":";;;;;;;;;MAQA,SAAUA,EAAMC,GAIZ,IAAMC,EAAiB,CACnBC,QAA2BF,QAAnBA,EAAAD,EAAOI,oBAAPH,IAAmBA,OAAnBA,EAAAA,EAAqBE,SAAU,8BACvCE,SAAU,KACVC,SAAU,KACVC,KAAM,EACNC,MAAO,QACPC,SAAU,KACVC,aAAa,EACbC,gBAAiB,IACjBC,UAAW,KACXC,QAAS,KACTC,eAAgB,KAChBC,UAAW,MAMTC,EAAM,WAWR,SAVA,SAAAA,IAAyB,IAAbC,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAA,+FAAEG,MAAAL,GACnBM,KAAKL,OAAMM,EAAAA,EAAQrB,CAAAA,EAAAA,GAAmBe,GACtCK,KAAKE,OAAS,KACdF,KAAKG,aAAe,KACpBH,KAAKI,eAAgB,EACrBJ,KAAKK,OAAS,KAEdL,KAAKM,MACT,IAEA,CAAA,CAAAC,IAAA,OAAAC,MAGA,WACI,IAAKR,KAAKL,OAAOZ,WAAaiB,KAAKL,OAAOX,SACtC,MAAM,IAAIyB,MAAM,4CAGpBT,KAAKI,eAAgB,EACrBM,QAAQC,IAAI,qCAGZX,KAAKY,eACT,GAEA,CAAAL,IAAA,gBAAAC,MAGA,WAAgB,IAAAK,EAAAb,KACZ,IAEI,IAAMc,EAAKd,KAAKe,cAGXf,KAAKK,SACNL,KAAKK,OAASW,GAAG,iCAAkC,CAC/CC,MAAO,CACHC,MAAOlB,KAAKL,OAAOZ,SACnBE,KAAM,MACNkC,OAAQnB,KAAKL,OAAOZ,SACpBqC,SAAUN,KAKlBd,KAAKK,OAAOgB,GAAG,UAAW,WACtBX,QAAQC,IAAI,qCACZD,QAAQC,IAAI,gBAAiBE,EAAKR,OAAOiB,GAC7C,GAEAtB,KAAKK,OAAOgB,GAAG,aAAc,SAACE,GAC1Bb,QAAQC,IAAI,0BAA2BY,EAC3C,GAEAvB,KAAKK,OAAOgB,GAAG,gBAAiB,SAACG,GAC7Bd,QAAQc,MAAM,gCAAiCA,EACnD,GAGAxB,KAAKK,OAAOgB,GAAG,mBAAoB,SAACI,GAChCf,QAAQC,IAAI,kCAAmCc,GAC/CZ,EAAKa,qBAAqBD,EAC9B,GAEAzB,KAAKK,OAAOgB,GAAG,kBAAmB,SAACI,GAC/Bf,QAAQC,IAAI,yBAA0Bc,GACtCZ,EAAKc,oBAAoBF,EAC7B,GAEAzB,KAAKK,OAAOgB,GAAG,aAAc,SAACI,GAC1Bf,QAAQC,IAAI,oBAAqBc,GACjCZ,EAAKe,gBAAgBH,EACzB,GAEP,CAAC,MAAOD,GACLd,QAAQc,MAAM,qCAAsCA,EACxD,CACJ,GAEA,CAAAjB,IAAA,cAAAC,MAGA,WAEI,MAAO,WACX,GAEA,CAAAD,IAAA,uBAAAC,MAGA,SAAqBiB,GACbzB,KAAKL,OAAOH,gBACZQ,KAAKL,OAAOH,eAAeiC,EAEnC,GAEA,CAAAlB,IAAA,sBAAAC,MAGA,SAAoBiB,GACZzB,KAAKL,OAAOL,WACZU,KAAKL,OAAOL,UAAUmC,EAE9B,GAEA,CAAAlB,IAAA,kBAAAC,MAGA,SAAgBiB,GACRzB,KAAKL,OAAOF,WACZO,KAAKL,OAAOF,UAAUgC,EAE9B,GAEA,CAAAlB,IAAA,qBAAAC,MAGA,SAAmBqB,EAAOJ,GAClBzB,KAAKK,QAAUL,KAAKK,OAAOyB,WAC3B9B,KAAKK,OAAO0B,KAAKF,EAAOJ,GACxBf,QAAQC,IAAGqB,gCAAAA,OAAiCH,GAASJ,IAErDf,QAAQuB,KAAK,+DAAkEJ,EAEvF,GAEA,CAAAtB,IAAA,qBAAAC,MAGA,WACI,OAAKR,KAAKK,OAGHL,KAAKK,OAAOyB,UAAY,YAAc,eAFlC,iBAGf,GAEA,CAAAvB,IAAA,aAAAC,OAAA0B,EAAAC,EAAAC,IAAAC,EAGA,SAAAC,EAAiBC,GAAW,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAhD,UAAA,OAAAwC,IAAAS,EAAA,SAAAC,GAAA,cAAAA,EAAAC,EAAAD,EAAAE,GAAA,KAAA,EAAc,GAAZR,EAAOI,EAAA/C,OAAA+C,QAAA9C,IAAA8C,EAAA9C,GAAA8C,EAAG,GAAA,CAAA,EAC/B5C,KAAKI,cAAa,CAAA0C,EAAAE,EAAA,EAAA,KAAA,CAAA,MACb,IAAIvC,MAAM,8BAA6B,KAAA,EAAA,OAAAqC,EAAAC,EAAA,EAAAD,EAAAE,EAAA,EAItBhD,KAAKiD,YAAY,eAAchD,EAAA,CAClDhB,KAAMe,KAAKL,OAAOV,MACfuD,IACL,KAAA,EAHY,KAARC,EAAQK,EAAAI,GAKDC,QAAO,CAAAL,EAAAE,EAAA,EAAA,KAAA,CAab,OAVGN,EAAU,GAAAV,OADK,2BACaA,OAAGS,EAAShB,KAAK2B,QACnDpD,KAAKqD,cAAcd,EAAaG,EAAY1C,KAAKL,OAAOV,KAAMuD,GAC9DxC,KAAKsD,iBAAiBf,EAAavC,KAAKL,OAAOV,KAAMuD,GAGrDxC,KAAKuD,mBAAmB,eAAgB,CACpCC,UAAWf,EAAShB,KAAKgC,WACzBxE,KAAMe,KAAKL,OAAOV,KAClByE,UAAWhB,EACXiB,UAAWC,KAAKC,QACjBf,EAAAgB,EAAA7D,EAAAA,EAAAA,EAAA,CAAA,EAGIwC,EAAShB,MAAI,GAAA,CAChBiC,UAAWhB,EACXqB,UAAWtB,EAAShB,KAAKgC,cAAU,KAAA,EAAA,MAGjC,IAAIhD,MAAMgC,EAASuB,SAAW,2CAA0C,KAAA,EAAAlB,EAAAE,EAAA,EAAA,MAAA,KAAA,EAKpB,MALoBF,EAAAC,EAAA,EAAAJ,EAAAG,EAAAI,EAGlFxC,QAAQc,MAAM,uBAAwBmB,EAAMqB,SAC5CtD,QAAQC,IAAI,2DAA6DX,KAAKL,OAAOV,MACrFe,KAAKiE,0BAA0B1B,EAAavC,KAAKL,OAAOV,MAClD,IAAIwB,MAAM,0BAAyB,KAAA,EAAA,OAAAqC,EAAAgB,EAAA,GAAA,EAAAxB,EAAAtC,KAAA,CAAA,CAAA,EAAA,IAEhD,IAAA,SAxCekE,GAAA,OAAAhC,EAAAiC,MAAAnE,KAAAJ,UAAA,IA4ChB,CAAAW,IAAA,mBAAAC,OAAA4D,EAAAjC,EAAAC,IAAAC,EAGA,SAAAgC,EAAuB9B,EAAatD,GAAI,IAAAuD,EAAAC,EAAAC,EAAA4B,EAAAC,EAAA3E,UAAA,OAAAwC,IAAAS,EAAA,SAAA2B,GAAA,cAAAA,EAAAzB,EAAAyB,EAAAxB,GAAA,KAAA,EAAc,GAAZR,EAAO+B,EAAA1E,OAAA0E,QAAAzE,IAAAyE,EAAAzE,GAAAyE,EAAG,GAAA,CAAA,EAC3CvE,KAAKI,cAAa,CAAAoE,EAAAxB,EAAA,EAAA,KAAA,CAAA,MACb,IAAIvC,MAAM,8BAA6B,KAAA,EAAA,OAAA+D,EAAAzB,EAAA,EAAAyB,EAAAxB,EAAA,EAItBhD,KAAKiD,YAAY,eAAchD,EAAA,CAClDhB,KAAMA,GACHuD,IACL,KAAA,EAHY,KAARC,EAAQ+B,EAAAtB,GAKDC,QAAO,CAAAqB,EAAAxB,EAAA,EAAA,KAAA,CAKkC,OAF5CN,EAAU,GAAAV,OADK,2BACaA,OAAGS,EAAShB,KAAK2B,QACnDpD,KAAKqD,cAAcd,EAAaG,EAAYzD,EAAMuD,GAClDxC,KAAKsD,iBAAiBf,EAAatD,EAAMuD,GAASgC,EAAAV,EAAA7D,EAAAA,EAAAA,EAAA,CAAA,EAE3CwC,EAAShB,MAAI,GAAA,CAChBiC,UAAWhB,EACXqB,UAAWtB,EAAShB,KAAKgC,cAAU,KAAA,EAAA,MAGjC,IAAIhD,MAAMgC,EAASuB,SAAW,2CAA0C,KAAA,EAAAQ,EAAAxB,EAAA,EAAA,MAAA,KAAA,EAKhC,MALgCwB,EAAAzB,EAAA,EAAAuB,EAAAE,EAAAtB,EAGlFxC,QAAQc,MAAM,uBAAwB8C,EAAMN,SAC5CtD,QAAQC,IAAI,2DAA6D1B,GACzEe,KAAKiE,0BAA0B1B,EAAatD,GACtC,IAAIwB,MAAM,0BAAyB,KAAA,EAAA,OAAA+D,EAAAV,EAAA,GAAA,EAAAO,EAAArE,KAAA,CAAA,CAAA,EAAA,IAEhD,IAAA,SA/BqByE,EAAAC,GAAA,OAAAN,EAAAD,MAAAnE,KAAAJ,UAAA,IAiCtB,CAAAW,IAAA,iBAAAC,OAAAmE,EAAAxC,EAAAC,IAAAC,EACA,SAAAuC,EAAqBrC,GAAW,IAAAC,EAAAqC,EAAAjF,UAAA,OAAAwC,IAAAS,EAAA,SAAAiC,GAAA,UAAA,IAAAA,EAAA9B,EAAc,OAAZR,EAAOqC,EAAAhF,OAAAgF,QAAA/E,IAAA+E,EAAA/E,GAAA+E,EAAG,GAAA,CAAA,EAAEC,EAAAhB,EACnC,EAAA9D,KAAK+E,WAAWxC,EAAaC,GAAQ,EAAAoC,EAAA5E,KAC/C,IAAA,SAFmBgF,GAAA,OAAAL,EAAAR,MAAAnE,KAAAJ,UAAA,IAAA,CAAAW,IAAA,gBAAAC,OAAAyE,EAAA9C,EAAAC,IAAAC,EAIpB,SAAA6C,EAAoB3C,GAAW,IAAAC,EAAA2C,EAAAC,EAAAxF,UAAA,OAAAwC,IAAAS,EAAA,SAAAwC,GAAA,cAAAA,EAAAtC,EAAAsC,EAAArC,GAAA,KAAA,EAIN,OAJQR,EAAO4C,EAAAvF,OAAAuF,QAAAtF,IAAAsF,EAAAtF,GAAAsF,EAAG,GAAA,CAAA,EAEjCD,EAAenF,KAAKL,OAAOV,KAEjCe,KAAKL,OAAOV,KAAO,EAAEoG,EAAAtC,EAAA,EAAAsC,EAAArC,EAAA,EAEJhD,KAAK+E,WAAWxC,EAAaC,GAAQ,KAAA,EAAA,OAAA6C,EAAAvB,EAAAuB,EAAAA,EAAAnC,GAAA,KAAA,EAGlB,OAHkBmC,EAAAtC,EAAA,EAGlD/C,KAAKL,OAAOV,KAAOkG,EAAaE,EAAAC,EAAA,GAAA,KAAA,EAAA,OAAAD,EAAAvB,EAAA,GAAA,EAAAoB,EAAAlF,KAAA,CAAA,CAAA,EAAA,CAAA,EAAA,IAEvC,IAAA,SAXkBuF,GAAA,OAAAN,EAAAd,MAAAnE,KAAAJ,UAAA,IAanB,CAAAW,IAAA,gBAAAC,OAAAgF,EAAArD,EAAAC,IAAAC,EAGA,SAAAoD,EAAoB1B,GAAS,IAAAtB,EAAAiD,EAAA,OAAAtD,IAAAS,EAAA,SAAA8C,GAAA,cAAAA,EAAA5C,EAAA4C,EAAA3C,GAAA,KAAA,EAAA,GACpBhD,KAAKI,cAAa,CAAAuF,EAAA3C,EAAA,EAAA,KAAA,CAAA,MACb,IAAIvC,MAAM,8BAA6B,KAAA,EAAA,OAAAkF,EAAA5C,EAAA,EAAA4C,EAAA3C,EAAA,EAItBhD,KAAKiD,YAAY,aAAc,CAClDO,UAAWO,IACb,KAAA,EAFY,KAARtB,EAAQkD,EAAAzC,GAIDC,QAAO,CAAAwC,EAAA3C,EAAA,EAAA,KAAA,CAAA,OAAA2C,EAAA7B,EACTrB,EAAAA,EAAShB,MAAI,KAAA,EAAA,MAEd,IAAIhB,MAAMgC,EAASuB,SAAW,4CAA2C,KAAA,EAAA2B,EAAA3C,EAAA,EAAA,MAAA,KAAA,EAG3D,MAH2D2C,EAAA5C,EAAA,EAAA2C,EAAAC,EAAAzC,EAGnFlD,KAAK4F,YAAWF,GAAQA,EAAA,KAAA,EAAA,OAAAC,EAAA7B,EAAA,GAAA,EAAA2B,EAAAzF,KAAA,CAAA,CAAA,EAAA,IAG/B,IAAA,SAnBkB6F,GAAA,OAAAL,EAAArB,MAAAnE,KAAAJ,UAAA,IAqBnB,CAAAW,IAAA,gBAAAC,MAGA,SAAc+B,EAAauD,EAAO7G,GAAoB,IAAduD,EAAO5C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAA,EACxCmG,EAAYC,SAASC,eAAe1D,GAC1C,IAAKwD,EACD,MAAM,IAAItF,MAAK,yBAAAuB,OAAyBO,mBAI5CwD,EAAUG,UAAY,GAGtB,IAAMC,EAAYH,SAASI,cAAc,OACzCD,EAAUE,UAAY,iBACtBF,EAAUD,UAASlE,iFAAAA,OAEI,IAAT/C,EAAa,mBAA8B,IAATA,EAAa,mBAA8B,IAATA,EAAa,iBAAmB,gBAAkBA,EAAI,oHAAA+C,OAGpH8D,EAQnB,0aAEDC,EAAUO,YAAYH,GAGtBnG,KAAKuG,WAAW/D,EAAQtD,OAASc,KAAKL,OAAOT,MACjD,GAEA,CAAAqB,IAAA,4BAAAC,MAGA,SAA0B+B,EAAatD,GACnCyB,QAAQC,IAAG,0CAAAqB,OAA2CO,EAAW,YAAAP,OAAW/C,IAC5E,IAAM8G,EAAYC,SAASC,eAAe1D,GACrCwD,EAKLA,EAAUG,UAAS,45BAAAlE,OAiBC/C,EAAKuH,cAGxB,sEAxBG9F,QAAQc,MAAK,aAAAQ,OAAcO,iBAyBnC,GAEA,CAAAhC,IAAA,YAAAC,OAAAiG,EAAAtE,EAAAC,IAAAC,EAGA,SAAAqE,EAAgBnE,GAAW,IAAAC,EAAAmE,EAAAC,EAAAC,EAAAjH,UAAA,OAAAwC,IAAAS,EAAA,SAAAiE,GAAA,cAAAA,EAAA/D,EAAA+D,EAAA9D,GAAA,KAAA,EAAc,OAAZR,EAAOqE,EAAAhH,OAAAgH,QAAA/G,IAAA+G,EAAA/G,GAAA+G,EAAG,GAAA,CAAA,EAAEC,EAAA/D,EAAA,EAAA+D,EAAA9D,EAAA,EAEZhD,KAAK+E,WAAWxC,EAAaC,GAAQ,KAAA,EAA9C,OAANmE,EAAMG,EAAA5D,EAAA4D,EAAAhD,EAAA,EACL6C,GAAM,KAAA,EAGiD,MAHjDG,EAAA/D,EAAA,EAAA6D,EAAAE,EAAA5D,EAEbxC,QAAQc,MAAM,mCAAoCoF,EAAM5C,SACxDhE,KAAKiE,0BAA0B1B,EAAavC,KAAKL,OAAOV,MAAM2H,EAAA,KAAA,EAAA,OAAAE,EAAAhD,EAAA,GAAA,EAAA4C,EAAA1G,KAAA,CAAA,CAAA,EAAA,IAGrE,IAAA,SATc+G,GAAA,OAAAN,EAAAtC,MAAAnE,KAAAJ,UAAA,IAWf,CAAAW,IAAA,mBAAAC,MAGA,SAAiB+B,EAAatD,EAAMuD,GAAS,IAAAwE,EAAAhH,KACpCA,KAAKL,OAAOP,cAEjBY,KAAKG,aAAe8G,YAAW9E,EAAAC,IAAAC,EAAC,SAAA6E,IAAA,IAAAC,EAAA,OAAA/E,IAAAS,EAAA,SAAAuE,GAAA,cAAAA,EAAArE,EAAAqE,EAAApE,GAAA,KAAA,EAAA,OAAAoE,EAAArE,EAAA,EAAAqE,EAAApE,EAAA,EAElBgE,EAAKK,UAAU9E,EAAatD,EAAMuD,GAAQ,KAAA,EAAA4E,EAAApE,EAAA,EAAA,MAAA,KAAA,EAAAoE,EAAArE,EAAA,EAAAoE,EAAAC,EAAAlE,EAEhDxC,QAAQuB,KAAK,+CAA8CkF,GAAS,KAAA,EAAA,OAAAC,EAAAtD,EAAA,GAAA,EAAAoD,EAAA,KAAA,CAAA,CAAA,EAAA,IAE3E,IAAElH,KAAKL,OAAON,iBACnB,GAOA,CAAAkB,IAAA,cAAAC,OAAA8G,EAAAnF,EAAAC,IAAAC,EAGA,SAAAkF,EAAkBC,EAAU/F,GAAI,IAAAgG,EAAAC,EAAAC,EAAAlF,EAAAmF,EAAAC,EAAAlB,EAAAmB,EAAA,OAAA1F,IAAAS,EAAA,SAAAkF,GAAA,cAAAA,EAAAhF,EAAAgF,EAAA/E,GAAA,KAAA,EAQ3B,OANK0E,GAAkC,QAAnBD,EAAA/I,EAAOI,oBAAY,IAAA2I,GAAWA,QAAXA,EAAnBA,EAAqBO,iBAArBP,IAA8BA,OAA9BA,EAAAA,EAAiCD,EAASS,QAAQ,IAAK,OAAQT,EAC9EG,EAAG3F,GAAAA,OAAMhC,KAAKL,OAAOd,QAAMmD,OAAG0F,QAGlB5H,IAAd2B,EAAKxC,MACLyB,QAAQC,IAAGqB,gCAAAA,OAAiCP,EAAKxC,KAAI+C,gBAAAA,OAAewF,IACvEO,EAAAhF,EAAA,EAAAgF,EAAA/E,EAAA,EAG0BkF,MAAMP,EAAK,CAC9BQ,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChBC,wBAAerG,OAAYhC,KAAKL,OAAOZ,SAAQiD,KAAAA,OAAIhC,KAAKL,OAAOX,UAC/DsJ,OAAU,oBAEdC,KAAMC,KAAKC,UAASxI,EAAAA,EAAA,GACbwB,GAAI,GAAA,CACPiH,UAAW1I,KAAKL,OAAOZ,SACvB4J,UAAW3I,KAAKL,OAAOX,cAE7B,KAAA,EAZY,IAARyD,EAAQsF,EAAA7E,GAcA0F,GAAE,CAAAb,EAAA/E,EAAA,EAAA,KAAA,CAAA,OAAA+E,EAAA/E,EAAA,EACYP,EAASoG,OAAM,KAAA,EAAjCjB,EAASG,EAAA7E,EAEf,IACI2E,EAAYW,KAAKM,MAAMlB,EAC1B,CAAC,MAAOmB,GACLlB,EAAY,CAAE7D,QAAS4D,EAC3B,CAAC,MAEK,IAAInH,MAAMoH,EAAU7D,SAAOhC,gBAAAA,OAAoBS,EAASuG,SAAS,KAAA,EAAA,OAAAjB,EAAA/E,EAAA,EAGtDP,EAASwG,OAAM,KAAA,EAAxB,OAANtC,EAAMoB,EAAA7E,EAAA6E,EAAAjE,EAAA,EACL6C,GAAM,KAAA,EAE8B,MAF9BoB,EAAAhF,EAAA,EAAA+E,EAAAC,EAAA7E,EAEbxC,QAAQc,MAAM,qBAAoBsG,GAASA,EAAA,KAAA,EAAA,OAAAC,EAAAjE,EAAA,GAAA,EAAAyD,EAAAvH,KAAA,CAAA,CAAA,EAAA,IAGlD,IAAA,SA3CgBkJ,EAAAC,GAAA,OAAA7B,EAAAnD,MAAAnE,KAAAJ,UAAA,IA6CjB,CAAAW,IAAA,aAAAC,MAGA,SAAWtB,GACP,IAAM6G,EAAYC,SAASoD,cAAc,mBACrCrD,IACAA,EAAUM,UAAS,+BAAArE,OAAkC9C,GAE7D,GAEA,CAAAqB,IAAA,cAAAC,MAGA,SAAYgB,GACRd,QAAQc,MAAM,oBAAqBA,GAE/BxB,KAAKL,OAAOJ,SACZS,KAAKL,OAAOJ,QAAQiC,EAE5B,GAEA,CAAAjB,IAAA,UAAAC,MAGA,WACQR,KAAKG,cACLkJ,cAAcrJ,KAAKG,cAInBH,KAAKK,SACLL,KAAKK,OAAOiJ,aACZtJ,KAAKK,OAAS,KACdK,QAAQC,IAAI,4BAGhBX,KAAKI,eAAgB,EACrBM,QAAQC,IAAI,qBAChB,iGAtFA2G,EAlCAb,EA9FAjB,EAjBoBP,EADpBN,EApCAP,EA/CAlC,EAzIQ,GAwcZxD,EAAOgB,OAASA,EAChBhB,EAAO6K,eAAiB,KAGxB7K,EAAO8K,WAAa,SAAS7J,GACzB,IAEI,OADAjB,EAAO6K,eAAiB,IAAI7J,EAAOC,GAC5BjB,EAAO6K,cACjB,CAAC,MAAO/H,GAEL,MADAd,QAAQc,MAAM,6CAA+CA,GACvDA,CACV,EAGP,CA5eD,CA4eG9C"}