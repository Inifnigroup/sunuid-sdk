{"version":3,"file":"sunuid-sdk.min.js","sources":["../src/sunuid-sdk.js"],"sourcesContent":["/**\n * SunuID SDK - Package d'int√©gration pour partenaires\n * \n * @version 1.0.0\n * @author SunuID Team\n * @license MIT\n */\n\n(function(window) {\n    'use strict';\n\n    // Configuration par d√©faut\n    const DEFAULT_CONFIG = {\n        apiUrl: window.SunuIDConfig?.apiUrl || 'https://api.sunuid.fayma.sn',\n        clientId: null,\n        secretId: null,\n        type: 2, // Type par d√©faut (2 = authentification)\n        partnerName: null, // Nom du partenaire r√©cup√©r√© depuis l'API\n        theme: 'light',\n        language: 'fr',\n        autoRefresh: false, // D√©sactiv√© par d√©faut pour √©viter les appels r√©p√©titifs\n        refreshInterval: 30000, // 30 secondes\n        autoInit: true, // Initialisation automatique par d√©faut\n        onSuccess: null,\n        onError: null,\n        onStatusUpdate: null,\n        onExpired: null,\n        // Nouvelles options de s√©curit√©\n        enableSecurityLogs: true,\n        validateInputs: true,\n        maxRetries: 3,\n        requestTimeout: 10000, // 10 secondes\n        // Options d'initialisation s√©curis√©e\n        secureInit: false,\n        secureInitUrl: (() => {\n            if (window.SunuIDConfig?.apiUrl?.includes('api.sunuid.fayma.sn')) {\n                return 'https://api.sunuid.fayma.sn/secure-init.php';\n            }\n            return window.SunuIDConfig?.apiUrl?.replace('/api', '') + '/secure-init.php' || 'https://api.sunuid.fayma.sn/secure-init.php';\n        })(),\n        token: null,\n        // Configuration pour forcer l'utilisation du serveur distant\n        forceRemoteServer: true,\n        useLocalFallback: false,\n        // Nouvelles options pour les callbacks\n        redirectAfterSuccess: null,\n        verifySignature: false,\n        tokenMaxAge: 300, // 5 minutes par d√©faut\n        onAuthenticationSuccess: null,\n        onAuthenticationError: null,\n        state: null\n    };\n\n    /**\n     * Classe principale SunuID\n     */\n    class SunuID {\n        constructor(config = {}) {\n            this.config = { ...DEFAULT_CONFIG, ...config };\n            this.qrCode = null;\n            this.refreshTimer = null;\n            this.isInitialized = false;\n            this.socket = null;\n            \n            // Initialisation asynchrone seulement si autoInit est activ√©\n            if (this.config.autoInit !== false) {\n                this.initPromise = this.init();\n            }\n        }\n\n        /**\n         * Initialisation du SDK\n         */\n        async init() {\n            try {\n                // V√©rifier s'il y a un callback √† traiter en premier\n                if (this.handleCallback()) {\n                    console.log('‚úÖ Callback trait√©, initialisation termin√©e');\n                    return;\n                }\n\n                // Initialisation s√©curis√©e si activ√©e\n                if (this.config.secureInit) {\n                    await this.secureInit();\n                } else {\n                    // Validation s√©curis√©e des param√®tres\n                    if (this.config.validateInputs) {\n                        this.validateSecurityParams();\n                    }\n                }\n\n                // Log de s√©curit√© pour l'initialisation\n                this.logSecurityEvent('SDK_INIT_START', {\n                    apiUrl: this.config.apiUrl,\n                    type: this.config.type,\n                    secureInit: this.config.secureInit\n                });\n\n                // R√©cup√©rer les informations du partenaire depuis l'API\n                await this.fetchPartnerInfo();\n\n                // Obscurcir les credentials dans les logs\n                this.obfuscateCredentials();\n\n                this.isInitialized = true;\n                console.log('SunuID SDK initialis√© avec succ√®s');\n                console.log('üìã Configuration SDK:', {\n                    apiUrl: this.config.apiUrl,\n                    type: this.config.type,\n                    partnerName: this.config.partnerName,\n                    clientId: this.config.clientId ? '***' + this.config.clientId.slice(-4) : 'null',\n                    secretId: this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null',\n                    secureInit: this.config.secureInit,\n                    theme: this.config.theme\n                });\n                \n                this.logSecurityEvent('SDK_INIT_SUCCESS');\n                \n                // Initialiser la connexion WebSocket\n                this.initWebSocket();\n                \n            } catch (error) {\n                this.logSecurityEvent('SDK_INIT_ERROR', { error: error.message });\n                throw error;\n            }\n        }\n\n        /**\n         * Initialisation s√©curis√©e via PHP\n         */\n        async secureInit() {\n            try {\n                this.logSecurityEvent('SECURE_INIT_START');\n                \n                const initData = {\n                    type: this.config.type,\n                    partnerName: this.config.partnerName,\n                    theme: this.config.theme\n                };\n\n                const response = await fetch(this.config.secureInitUrl, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json'\n                    },\n                    body: JSON.stringify(initData)\n                });\n\n                if (!response.ok) {\n                    throw new Error(`Erreur HTTP: ${response.status}`);\n                }\n\n                const result = await response.json();\n                \n                console.log('üìã R√©ponse initialisation s√©curis√©e:', result);\n                \n                if (!result.success) {\n                    throw new Error(result.error || 'Erreur lors de l\\'initialisation s√©curis√©e');\n                }\n\n                // Stocker le token et les donn√©es s√©curis√©es\n                this.config.token = result.data.token;\n                this.config.apiUrl = result.data.api_url;\n                \n                // D√©coder le token pour r√©cup√©rer les credentials\n                const decodedToken = this.decodeSecureToken(result.data.token);\n                if (decodedToken) {\n                    this.config.clientId = decodedToken.client_id;\n                    this.config.secretId = decodedToken.secret_id;\n                } else {\n                    throw new Error('Impossible de d√©coder le token s√©curis√©');\n                }\n                \n                this.config.expiresIn = result.data.expires_in;\n                this.config.maxRequests = result.data.max_requests;\n                this.config.requestCount = 0;\n\n                this.logSecurityEvent('SECURE_INIT_SUCCESS', {\n                    expiresIn: result.data.expires_in,\n                    maxRequests: result.data.max_requests\n                });\n\n                console.log('‚úÖ Initialisation s√©curis√©e r√©ussie');\n                \n            } catch (error) {\n                this.logSecurityEvent('SECURE_INIT_ERROR', { error: error.message });\n                throw new Error(`√âchec de l'initialisation s√©curis√©e: ${error.message}`);\n            }\n        }\n\n        /**\n         * D√©coder le token s√©curis√©\n         */\n        decodeSecureToken(token) {\n            try {\n                const parts = token.split('.');\n                if (parts.length !== 2) {\n                    console.error('‚ùå Format de token invalide');\n                    return null;\n                }\n                \n                const [payload, signature] = parts;\n                \n                // D√©coder le payload (base64)\n                const decodedPayload = atob(payload);\n                const tokenData = JSON.parse(decodedPayload);\n                \n                // V√©rifier l'expiration\n                if (tokenData.exp && tokenData.exp < Date.now() / 1000) {\n                    console.error('‚ùå Token expir√©');\n                    return null;\n                }\n                \n                console.log('‚úÖ Token d√©cod√© avec succ√®s');\n                return tokenData;\n                \n            } catch (error) {\n                console.error('‚ùå Erreur d√©codage token:', error);\n                return null;\n            }\n        }\n\n        /**\n         * Initialiser la connexion WebSocket\n         */\n        initWebSocket() {\n            try {\n                // V√©rifier si Socket.IO est disponible\n                if (typeof io === 'undefined') {\n                    console.warn('‚ö†Ô∏è Socket.IO non disponible, WebSocket sera initialis√© plus tard');\n                    // R√©essayer apr√®s un d√©lai\n                    setTimeout(() => this.initWebSocket(), 1000);\n                    return;\n                }\n                \n                // Obtenir l'IP du client (simulation)\n                const ip = this.getClientIP();\n                \n                // Initialiser la connexion WebSocket si elle n'existe pas\n                if (!this.socket) {\n                    console.log('üåê Initialisation Socket.IO...');\n                    \n                    this.socket = io('wss://samasocket.fayma.sn:9443', {\n                        query: {\n                            token: this.config.clientId,\n                            type: 'web',\n                            userId: this.config.clientId,\n                            username: ip\n                        },\n                        transports: ['websocket', 'polling']\n                    });\n\n                    // Gestion des √©v√©nements WebSocket\n                    this.socket.on('connect', () => {\n                        console.log('üåê WebSocket connect√© avec succ√®s');\n                        console.log('üìä Socket ID:', this.socket.id);\n                        this.socket.connected = true;\n                    });\n\n                    this.socket.on('disconnect', (reason) => {\n                        console.log('‚ùå WebSocket d√©connect√©:', reason);\n                        this.socket.connected = false;\n                    });\n\n                    this.socket.on('connect_error', (error) => {\n                        console.error('‚ùå Erreur connexion WebSocket:', error);\n                        this.socket.connected = false;\n                    });\n\n                    // √âcouter les √©v√©nements sp√©cifiques\n                    this.socket.on('qr_status_update', (data) => {\n                        console.log('üì± Mise √† jour statut QR re√ßue:', data);\n                        this.handleQRStatusUpdate(data);\n                    });\n\n                    this.socket.on('qr_scan_success', (data) => {\n                        console.log('‚úÖ Scan QR r√©ussi re√ßu:', data);\n                        this.handleQRScanSuccess(data);\n                    });\n\n                    this.socket.on('qr_expired', (data) => {\n                        console.log('‚è∞ QR expir√© re√ßu:', data);\n                        this.handleQRExpired(data);\n                    });\n\n                    // √âcouter l'√©v√©nement qr_scan_initiated sp√©cifiquement\n                    this.socket.on('qr_scan_initiated', (data) => {\n                        console.log('üîç QR Scan Initiated re√ßu:', data);\n                        this.showQRLoader();\n                    });\n\n                    // √âcouter l'√©v√©nement message g√©n√©rique (fallback)\n                    this.socket.on('message', (data) => {\n                        console.log('üì® Message socket re√ßu:', data);\n                        if (data && data.type === 'qr_scan_initiated') {\n                            console.log('üîç QR Scan Initiated d√©tect√© dans message:', data);\n                            this.showQRLoader();\n                        }\n                    });\n\n                    // √âcouter tous les √©v√©nements socket pour le debugging\n                    this.socket.onAny = this.socket.onAny || function(eventName, callback) {\n                        // Fallback pour les versions de Socket.IO qui n'ont pas onAny\n                        console.log(`üåê Socket Event [${eventName}]:`, callback);\n                    };\n                    \n                    // Logger tous les √©v√©nements re√ßus\n                    this.socket.onAny((eventName, ...args) => {\n                        console.log(`üåê Socket Event [${eventName}]:`, args);\n                    });\n                } else {\n                    console.log('üåê WebSocket d√©j√† connect√©');\n                }\n            } catch (error) {\n                console.error('‚ùå Erreur initialisation WebSocket:', error);\n            }\n        }\n\n        /**\n         * Obtenir l'IP du client (simulation)\n         */\n        getClientIP() {\n            // Simulation - en production, vous pourriez utiliser un service d'IP\n            return '127.0.0.1';\n        }\n\n        /**\n         * Obtenir le nom du type √† partir du num√©ro\n         */\n        getTypeName(type) {\n            switch(type) {\n                case 1: return 'KYC';\n                case 2: return 'AUTH';\n                case 3: return 'SIGNATURE';\n                default: return `TYPE-${type}`;\n            }\n        }\n\n        /**\n         * Validation s√©curis√©e des param√®tres\n         */\n        validateSecurityParams() {\n            const errors = [];\n            \n            // Validation du clientId\n            if (!this.config.clientId || typeof this.config.clientId !== 'string') {\n                errors.push('clientId invalide ou manquant');\n            } else if (this.config.clientId.length < 10) {\n                errors.push('clientId trop court');\n            }\n            \n            // Validation du secretId\n            if (!this.config.secretId || typeof this.config.secretId !== 'string') {\n                errors.push('secretId invalide ou manquant');\n            } else if (this.config.secretId.length < 32) {\n                errors.push('secretId trop court (minimum 32 caract√®res)');\n            }\n            \n            // Validation de l'URL API\n            if (!this.config.apiUrl || !this.isValidUrl(this.config.apiUrl)) {\n                errors.push('apiUrl invalide');\n            }\n            \n            // Validation du type\n            if (![1, 2, 3].includes(this.config.type)) {\n                errors.push('type invalide (doit √™tre 1, 2 ou 3)');\n            }\n            \n            if (errors.length > 0) {\n                this.logSecurityEvent('VALIDATION_ERROR', { errors });\n                throw new Error(`Param√®tres de s√©curit√© invalides: ${errors.join(', ')}`);\n            }\n            \n            this.logSecurityEvent('VALIDATION_SUCCESS');\n        }\n\n        /**\n         * Validation d'URL s√©curis√©e\n         */\n        isValidUrl(string) {\n            try {\n                const url = new URL(string);\n                return url.protocol === 'https:' || url.protocol === 'http:';\n            } catch (_) {\n                return false;\n            }\n        }\n\n        /**\n         * Logs de s√©curit√©\n         */\n        logSecurityEvent(event, data = {}) {\n            if (!this.config.enableSecurityLogs) return;\n            \n            const securityLog = {\n                timestamp: new Date().toISOString(),\n                event: event,\n                data: data,\n                userAgent: navigator.userAgent,\n                url: window.location.href\n            };\n            \n            console.warn('üîí [SECURITY]', securityLog);\n            \n            // Stocker les logs de s√©curit√© (optionnel)\n            if (!window.SunuIDSecurityLogs) {\n                window.SunuIDSecurityLogs = [];\n            }\n            window.SunuIDSecurityLogs.push(securityLog);\n        }\n\n        /**\n         * Chiffrement simple des credentials (pour √©viter l'exposition en clair)\n         */\n        obfuscateCredentials() {\n            // Stocker les vraies valeurs pour les logs de s√©curit√©\n            this.config.originalClientId = this.config.clientId;\n            this.config.originalSecretId = this.config.secretId;\n            \n            // Cr√©er des versions obfusqu√©es pour l'affichage uniquement\n            if (this.config.clientId) {\n                this.config.clientIdDisplay = this.config.clientId.replace(/(.{3}).*(.{3})/, '$1***$2');\n            }\n            if (this.config.secretId) {\n                this.config.secretIdDisplay = this.config.secretId.replace(/(.{4}).*(.{4})/, '$1***$2');\n            }\n        }\n\n        /**\n         * Validation des entr√©es utilisateur\n         */\n        sanitizeInput(input) {\n            if (typeof input !== 'string') return input;\n            \n            // Protection contre les injections XSS basiques\n            return input\n                .replace(/[<>]/g, '') // Supprimer les balises HTML\n                .replace(/javascript:/gi, '') // Supprimer les protocoles dangereux\n                .trim();\n        }\n\n        /**\n         * G√©rer la mise √† jour du statut QR\n         */\n        handleQRStatusUpdate(data) {\n            console.log('üì± QR Status Update:', data);\n            if (this.config.onStatusUpdate) {\n                this.config.onStatusUpdate(data);\n            }\n        }\n\n        /**\n         * G√©rer le succ√®s du scan QR\n         */\n        handleQRScanSuccess(data) {\n            console.log('‚úÖ QR Scan Success:', data);\n            if (this.config.onSuccess) {\n                this.config.onSuccess(data);\n            }\n        }\n\n        /**\n         * G√©rer l'expiration du QR\n         */\n        handleQRExpired(data) {\n            console.log('‚è∞ QR Expired:', data);\n            if (this.config.onExpired) {\n                this.config.onExpired(data);\n            }\n        }\n\n        /**\n         * √âmettre un √©v√©nement WebSocket\n         */\n        emitWebSocketEvent(event, data) {\n            if (this.socket && this.socket.connected) {\n                this.socket.emit(event, data);\n                console.log(`üì§ √âv√©nement WebSocket √©mis: ${event}`, data);\n            } else {\n                console.warn('‚ö†Ô∏è WebSocket non connect√©, impossible d\\'√©mettre l\\'√©v√©nement:', event);\n            }\n        }\n\n        /**\n         * Obtenir le statut de la connexion WebSocket\n         */\n        getWebSocketStatus() {\n            if (!this.socket) {\n                return 'not_initialized';\n            }\n            return this.socket.connected ? 'connected' : 'disconnected';\n        }\n\n        /**\n         * Forcer l'initialisation WebSocket (si Socket.IO devient disponible plus tard)\n         */\n        forceWebSocketInit() {\n            if (typeof io !== 'undefined' && !this.socket) {\n                console.log('üîÑ For√ßage de l\\'initialisation WebSocket...');\n                this.initWebSocket();\n            }\n        }\n\n        /**\n         * G√©n√©rer un QR code avec le type configur√©\n         */\n        async generateQR(containerId = 'sunuid-qr-container', options = {}) {\n            // Attendre l'initialisation si n√©cessaire\n            if (this.initPromise) {\n                await this.initPromise;\n                this.initPromise = null;\n            }\n            \n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n            \n            console.log('üéØ generateQR appel√© avec containerId:', containerId);\n            \n            // Attendre que les connexions soient pr√™tes\n            console.log('üîç Attente connexions API et WebSocket...');\n            try {\n                const connectionStatus = await this.waitForConnections(5000); // 5 secondes max\n                console.log('‚úÖ Connexions pr√™tes:', connectionStatus);\n            } catch (connectionError) {\n                console.error('‚ùå Erreur connexions:', connectionError.message);\n                throw new Error('Connexions non disponibles - Impossible de g√©n√©rer le QR code');\n            }\n\n            try {\n                // Utiliser uniquement le socketID comme contenu du QR\n                const socketId = this.socket ? this.socket.id : 'timeout-socket-id';\n                const qrContent = socketId;\n                \n                console.log('üìÑ Contenu QR pr√©par√©:', qrContent);\n                console.log('üîå Socket ID:', socketId);\n                \n                                    // G√©n√©rer le QR avec le contenu complet\n                    const partnerName = this.config.partnerName || 'Partner_unknown';\n                    const response = await this.makeRequest('/qr-generate', {\n                        type: this.config.type,\n                        data: qrContent, // Essayer data au lieu de content\n                        label: `${this.getTypeName(this.config.type)} ${partnerName}`, // Label du QR avec nom du partenaire\n                        ...options\n                    });\n\n                if (response.success) {\n                    // Debug: Afficher la structure compl√®te de la r√©ponse\n                    console.log('üìã R√©ponse QR API compl√®te:', response);\n                    console.log('üìã Structure response.data:', response.data);\n                    \n                    // Construire l'URL compl√®te du QR code\n                    let qrImageUrl = response.data.qrCodeUrl;\n                    \n                    // Si l'URL est relative, la rendre absolue\n                    if (qrImageUrl && qrImageUrl.startsWith('/')) {\n                        qrImageUrl = `${this.config.apiUrl}${qrImageUrl}`;\n                    }\n                    \n                    // V√©rifier si l'URL du QR code existe\n                    if (!qrImageUrl) {\n                        console.warn('‚ö†Ô∏è qrCodeUrl non trouv√© dans la r√©ponse, recherche d\\'alternatives...');\n                        \n                        // Essayer d'autres champs possibles\n                        qrImageUrl = response.data.qr_url || \n                                    response.data.qrUrl || \n                                    response.data.url || \n                                    response.data.image_url ||\n                                    response.data.imageUrl;\n                        \n                        if (qrImageUrl) {\n                            console.log('‚úÖ URL QR trouv√©e dans un champ alternatif:', qrImageUrl);\n                        } else {\n                            console.error('‚ùå Aucune URL QR trouv√©e dans la r√©ponse');\n                            throw new Error('URL du QR code non trouv√©e dans la r√©ponse API');\n                        }\n                    }\n                    \n                    this.currentQRUrl = qrImageUrl;\n                    \n                    console.log('‚úÖ QR code g√©n√©r√© par API principale:', qrImageUrl);\n                    console.log('üìÑ Contenu QR final:', qrContent);\n                    console.log('üè∑Ô∏è Label QR:', response.data.label || 'N/A');\n                    console.log('üÜî Session ID:', response.data.sessionId || 'N/A');\n                    \n                    // Afficher le QR code\n                    this.displayQRCode(containerId, qrImageUrl, this.config.type, options);\n                    \n                    this.startAutoRefresh(containerId, this.config.type, options);\n                    \n                    // √âmettre un √©v√©nement WebSocket pour la g√©n√©ration du QR\n                    this.emitWebSocketEvent('qr_generated', {\n                        type: this.config.type,\n                        qrCodeUrl: qrImageUrl,\n                        socketId: socketId,\n                        qrContent: qrContent,\n                        label: response.data.label,\n                        sessionId: response.data.sessionId,\n                        timestamp: Date.now()\n                    });\n                    \n                    return {\n                        ...response.data,\n                        qrCodeUrl: qrImageUrl,\n                        qrContent: qrContent,\n                        label: response.data.label,\n                        sessionId: response.data.sessionId\n                    };\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la g√©n√©ration du QR code');\n                }\n            } catch (error) {\n                console.error('Erreur API d√©tect√©e:', error.message);\n                console.error('Stack trace complet:', error.stack);\n                console.error('Configuration SDK:', {\n                    apiUrl: this.config.apiUrl,\n                    type: this.config.type,\n                    secureInit: this.config.secureInit,\n                    clientId: this.config.clientId ? '***' + this.config.clientId.slice(-4) : 'null',\n                    secretId: this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null'\n                });\n                \n                // Fallback vers le service local seulement si activ√©\n                if (this.config.useLocalFallback) {\n                    console.log('üîç V√©rification fallback local...');\n                    console.log('üîç Hostname:', window.location.hostname);\n                    console.log('üîç Protocol:', window.location.protocol);\n                    console.log('üîç URL compl√®te:', window.location.href);\n                    \n                    const isLocal = window.location.hostname === 'localhost' || \n                                   window.location.hostname === '127.0.0.1' || \n                                   window.location.protocol === 'file:';\n                    \n                    console.log('üîç Est local:', isLocal);\n                    \n                    if (isLocal) {\n                        console.log('üîÑ Tentative fallback vers service QR local...');\n                        console.log('‚ùå Fallback local non impl√©ment√© - utilisation serveur distant uniquement');\n                    } else {\n                        console.log('‚ùå Pas en local, pas de fallback');\n                    }\n                } else {\n                    console.log('üîí Fallback local d√©sactiv√©, utilisation serveur distant uniquement');\n                }\n                \n                console.log('Affichage du message \"Service non disponible\" pour type ' + this.config.type);\n                this.displayServiceUnavailable(containerId, this.config.type);\n                throw new Error('Service non disponible');\n            }\n        }\n\n\n\n        /**\n         * G√©n√©rer un QR code avec un type personnalis√©\n         */\n        async generateCustomQR(containerId, type, options = {}) {\n            // Attendre l'initialisation si n√©cessaire\n            if (this.initPromise) {\n                await this.initPromise;\n                this.initPromise = null;\n            }\n            \n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-generate', {\n                    type: type, // Type personnalis√© (1, 2, 3, etc.)\n                    ...options\n                });\n\n                if (response.success) {\n                    // Construire l'URL compl√®te de l'image QR avec la base URL pour les images\n                    const imageBaseUrl = 'https://sunuid.fayma.sn';\n                    const qrImageUrl = `${imageBaseUrl}${response.data.qrcode}`;\n                    this.displayQRCode(containerId, qrImageUrl, type, options);\n                    \n                    // Le QR code est d√©j√† g√©n√©r√© par l'API principale\n                    console.log('‚úÖ QR code personnalis√© g√©n√©r√© par API principale:', qrImageUrl);\n                    console.log('üìÑ Code de session:', response.data.code);\n                    console.log('üÜî Service ID:', response.data.service_id);\n                    \n                    this.startAutoRefresh(containerId, type, options);\n                    return {\n                        ...response.data,\n                        qrCodeUrl: qrImageUrl,\n                        sessionId: response.data.service_id\n                    };\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la g√©n√©ration du QR code');\n                }\n            } catch (error) {\n                console.error('Erreur API d√©tect√©e:', error.message);\n                console.error('Stack trace complet:', error.stack);\n                console.error('Configuration SDK (Custom):', {\n                    apiUrl: this.config.apiUrl,\n                    type: type,\n                    secureInit: this.config.secureInit,\n                    clientId: this.config.clientId ? '***' + this.config.clientId.slice(-4) : 'null',\n                    secretId: this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null'\n                });\n                console.log('Affichage du message \"Service non disponible\" pour type ' + type);\n                this.displayServiceUnavailable(containerId, type);\n                throw new Error('Service non disponible');\n            }\n        }\n\n        // Alias pour maintenir la compatibilit√©\n        async generateAuthQR(containerId, options = {}) {\n            return this.generateQR(containerId, options);\n        }\n\n        async generateKYCQR(containerId, options = {}) {\n            // Sauvegarder le type actuel\n            const originalType = this.config.type;\n            // Changer temporairement le type pour KYC\n            this.config.type = 1;\n            try {\n                return await this.generateQR(containerId, options);\n            } finally {\n                // Restaurer le type original\n                this.config.type = originalType;\n            }\n        }\n\n        async generateSignatureQR(containerId, options = {}) {\n            // Sauvegarder le type actuel\n            const originalType = this.config.type;\n            // Changer temporairement le type pour Signature\n            this.config.type = 3;\n            try {\n                return await this.generateQR(containerId, options);\n            } finally {\n                // Restaurer le type original\n                this.config.type = originalType;\n            }\n        }\n\n        /**\n         * V√©rifier le statut d'un QR code\n         */\n        async checkQRStatus(sessionId) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-status', {\n                    serviceId: sessionId\n                });\n\n                if (response.success) {\n                    return response.data;\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la v√©rification du statut');\n                }\n            } catch (error) {\n                this.handleError(error);\n                throw error;\n            }\n        }\n\n        /**\n         * G√©n√©rer un QR code avec un contenu sp√©cifique\n         */\n        async generateQRWithContent(content, containerId, type, options = {}) {\n            console.log('üé® G√©n√©ration QR avec contenu:', content);\n            \n            try {\n                // Essayer d'abord le service QR local\n                if (window.location.hostname === 'localhost' || \n                    window.location.hostname === '127.0.0.1' || \n                    window.location.protocol === 'file:') {\n                    \n                    console.log('üè† Utilisation service QR local...');\n                    const localQRUrl = await this.generateQRLocal(content, containerId, type, options);\n                    if (localQRUrl) {\n                        return localQRUrl;\n                    }\n                }\n                \n                // Fallback vers le service QR distant\n                console.log('üåê Utilisation service QR distant...');\n                return await this.generateQRRemote(content, containerId, type, options);\n                \n            } catch (error) {\n                console.error('‚ùå Erreur g√©n√©ration QR:', error);\n                // Fallback vers affichage simple du contenu\n                this.displayQRContent(containerId, content, type, options);\n                return null;\n            }\n        }\n        \n        /**\n         * G√©n√©rer QR code avec service local\n         */\n        async generateQRLocal(content, containerId, type, options = {}) {\n            try {\n                const response = await fetch('http://localhost:8000/api/generate/text', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/x-www-form-urlencoded'\n                    },\n                    body: `text=${encodeURIComponent(content)}&size=300`\n                });\n                \n                if (response.ok) {\n                    const data = await response.json();\n                    const qrUrl = `data:image/png;base64,${data.qrcode}`;\n                    this.displayQRCode(containerId, qrUrl, type, options);\n                    return qrUrl;\n                }\n            } catch (error) {\n                console.log('‚ùå Service QR local non disponible:', error.message);\n            }\n            return null;\n        }\n        \n        /**\n         * G√©n√©rer QR code avec service distant\n         */\n        async generateQRRemote(content, containerId, type, options = {}) {\n            try {\n                const response = await fetch('https://api.sunuid.fayma.sn/qr-generate', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        text: content,\n                        size: 300,\n                        type: type\n                    })\n                });\n                \n                if (response.ok) {\n                    const data = await response.json();\n                    const qrUrl = `data:image/png;base64,${data.qrcode}`;\n                    this.displayQRCode(containerId, qrUrl, type, options);\n                    return qrUrl;\n                }\n            } catch (error) {\n                console.error('‚ùå Erreur service QR distant:', error);\n            }\n            \n            // Fallback vers affichage du contenu\n            this.displayQRContent(containerId, content, type, options);\n            return null;\n        }\n        \n        /**\n         * Afficher le contenu QR en texte (fallback)\n         */\n        displayQRContent(containerId, content, type, options = {}) {\n            const container = document.getElementById(containerId);\n            if (!container) {\n                throw new Error(`Conteneur avec l'ID \"${containerId}\" non trouv√©`);\n            }\n\n            const typeName = this.getTypeName(type);\n            container.innerHTML = `\n                <div class=\"sunuid-qr-code\">\n                    <div class=\"sunuid-qr-header\">\n                        <h3>${typeName}</h3>\n                    </div>\n                    <div class=\"sunuid-qr-content\" style=\"text-align: center; padding: 20px; background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 5px; margin: 10px 0;\">\n                        <p><strong>Contenu QR Code:</strong></p>\n                        <p style=\"font-family: monospace; font-size: 14px; word-break: break-all;\">${content}</p>\n                    </div>\n                    <div class=\"sunuid-qr-instructions\">\n                        <p>Contenu QR g√©n√©r√© avec le format: {type}-{code}-{socketid}</p>\n                    </div>\n                </div>\n            `;\n            \n            console.log('‚úÖ Contenu QR affich√©:', content);\n        }\n        \n        /**\n         * Afficher un QR code dans un conteneur\n         */\n        displayQRCode(containerId, qrUrl, type, options = {}) {\n            const container = document.getElementById(containerId);\n            if (!container) {\n                throw new Error(`Conteneur avec l'ID \"${containerId}\" non trouv√©`);\n            }\n\n            // Nettoyer le conteneur\n            container.innerHTML = '';\n\n            // Cr√©er l'√©l√©ment QR code\n            const qrElement = document.createElement('div');\n            qrElement.className = 'sunuid-qr-code';\n            \n            // Afficher l'image QR avec les informations\n            const typeName = this.getTypeName(type);\n            qrElement.innerHTML = `\n                <div class=\"sunuid-qr-header\">\n                    <h3>${type === 1 ? 'V√©rification KYC' : type === 2 ? 'Authentification' : type === 3 ? 'Signature' : 'Service Type ' + type}</h3>\n                </div>\n                <div class=\"sunuid-qr-image\">\n                    <img src=\"${qrUrl}\" alt=\"QR Code ${typeName}\" style=\"max-width: 300px; border: 1px solid #ddd; border-radius: 5px;\" />\n                </div>\n               \n            `;\n\n            container.appendChild(qrElement);\n\n            // Appliquer le th√®me\n            this.applyTheme(options.theme || this.config.theme);\n            \n            console.log('‚úÖ QR code affich√©:', qrUrl);\n        }\n\n        /**\n         * G√©n√©rer un QR code personnalis√© avec PHP Endroid\n         */\n        async generateCustomQRCode(content, label, options = {}) {\n            console.log('üé® D√©but g√©n√©ration QR personnalis√©...');\n            console.log('üìÑ Contenu:', content);\n            console.log('üè∑Ô∏è Label:', label);\n            \n            // Chercher le conteneur QR\n            let qrContainer = document.getElementById('sunuid-qr-container');\n            if (!qrContainer) {\n                qrContainer = document.getElementById('qr-container');\n            }\n            if (!qrContainer) {\n                console.error('‚ùå QR container not found');\n                return;\n            }\n            \n            console.log('‚úÖ QR container trouv√©');\n\n            // Nettoyer le conteneur\n            qrContainer.innerHTML = '<div style=\"text-align: center; padding: 20px;\"><p>G√©n√©ration QR code...</p></div>';\n\n                         try {\n                 // Utiliser directement l'API principale (plus fiable)\n                 console.log('üé® Tentative g√©n√©ration via API principale...');\n                 await this.generateQRPHP(content, label, qrContainer);\n                 console.log('‚úÖ QR code g√©n√©r√© avec succ√®s');\n                 \n             } catch (error) {\n                 console.error('‚ùå Erreur g√©n√©ration API:', error);\n                 \n                 // Fallback final : image par d√©faut\n                 console.log('‚ö†Ô∏è Affichage image par d√©faut');\n                 this.displayDefaultQR(qrContainer, content, label);\n             }\n        }\n\n        /**\n         * G√©n√©rer un QR code c√¥t√© client (m√©thode principale)\n         */\n        async generateQRClientSide(content, label, qrContainer) {\n            // Charger QRCode si n√©cessaire\n            await this.ensureQRCodeLibrary();\n            \n            if (typeof QRCode === 'undefined') {\n                throw new Error('QRCode library non disponible');\n            }\n            \n            // Cr√©er un canvas\n            const canvas = document.createElement('canvas');\n            canvas.width = 300;\n            canvas.height = 320;\n            const ctx = canvas.getContext('2d');\n            \n            // Fond blanc\n            ctx.fillStyle = '#FFFFFF';\n            ctx.fillRect(0, 0, 300, 320);\n            \n            // G√©n√©rer le QR code\n            return new Promise((resolve, reject) => {\n                QRCode.toCanvas(canvas, content, {\n                    width: 280,\n                    margin: 10,\n                    color: {\n                        dark: '#000000',\n                        light: '#FFFFFF'\n                    }\n                }, (error) => {\n                    if (error) {\n                        reject(error);\n                        return;\n                    }\n                    \n                    // Ajouter le label\n                    ctx.fillStyle = '#333333';\n                    ctx.font = 'bold 14px Arial';\n                    ctx.textAlign = 'center';\n                    ctx.fillText(label, 150, 305);\n                    \n                    // Convertir en data URL\n                    const dataUrl = canvas.toDataURL('image/png');\n                    \n                    // Stocker l'URL\n                    this.currentQRUrl = dataUrl;\n                    \n                    // Afficher le QR code\n                    qrContainer.innerHTML = `\n                        <div style=\"text-align: center; padding: 20px;\">\n                            <img src=\"${dataUrl}\" alt=\"QR Code\" style=\"max-width: 300px; border: 2px solid #ddd; border-radius: 10px;\">\n                        </div>\n                    `;\n                    \n                    // Afficher les instructions\n                    this.showQRInstructions(qrContainer);\n                    \n                    resolve();\n                });\n            });\n        }\n\n        /**\n         * G√©n√©rer un QR code via endpoint PHP (fallback)\n         */\n        async generateQRPHP(content, label, qrContainer) {\n                         // Construire l'URL - Utiliser l'API principale qui fonctionne\n             let qrGeneratorUrl;\n             if (this.config.forceRemoteServer) {\n                 qrGeneratorUrl = 'https://api.sunuid.fayma.sn/qr-generate';\n             } else if (this.config.apiUrl.includes('api.sunuid.fayma.sn')) {\n                 qrGeneratorUrl = 'https://api.sunuid.fayma.sn/qr-generate';\n             } else if (this.config.apiUrl.includes('localhost') || this.config.apiUrl.includes('127.0.0.1')) {\n                 qrGeneratorUrl = 'http://localhost:8000/api/generate/text';\n             } else {\n                 qrGeneratorUrl = this.config.apiUrl + '/qr-generate';\n             }\n            \n            console.log('üîó URL QR Generator:', qrGeneratorUrl);\n            \n                         // Adapter le format selon l'URL\n             let requestBody;\n             let contentType;\n             \n             if (qrGeneratorUrl.includes('localhost:8000')) {\n                 // Service local - format form-data\n                 contentType = 'application/x-www-form-urlencoded';\n                 requestBody = new URLSearchParams({\n                     text: content,\n                     size: 300,\n                     margin: 10,\n                     foreground_color: '000000',\n                     background_color: 'FFFFFF'\n                 });\n             } else {\n                 // Service distant - format JSON avec les param√®tres de l'API principale\n                 contentType = 'application/json';\n                 requestBody = JSON.stringify({\n                     type: this.config.type,\n                     client_id: this.config.clientId,\n                     secret_id: this.config.secretId,\n                     content: content,\n                     label: label\n                 });\n             }\n             \n             const response = await fetch(qrGeneratorUrl, {\n                 method: 'POST',\n                 headers: {\n                     'Content-Type': contentType,\n                     'Accept': 'application/json'\n                 },\n                 body: requestBody\n             });\n            \n            if (!response.ok) {\n                throw new Error(`Erreur HTTP: ${response.status}`);\n            }\n            \n            const responseData = await response.json();\n            \n                         if (!responseData.success) {\n                 throw new Error(`Erreur QR: ${responseData.error}`);\n             }\n             \n             // Adapter selon le format de r√©ponse\n             let qrImageUrl;\n             if (qrGeneratorUrl.includes('localhost:8000')) {\n                 // Service local\n                 qrImageUrl = responseData.data_uri;\n             } else {\n                 // Service distant - utiliser le format de l'API principale\n                 const imageBaseUrl = 'https://sunuid.fayma.sn';\n                 qrImageUrl = `${imageBaseUrl}${responseData.data.qrcode}`;\n             }\n             \n             // Stocker l'URL\n             this.currentQRUrl = qrImageUrl;\n             \n             // Afficher le QR code\n             qrContainer.innerHTML = `\n                 <div style=\"text-align: center; padding: 20px;\">\n                     <img src=\"${qrImageUrl}\" alt=\"QR Code\" style=\"max-width: 300px; border: 2px solid #ddd; border-radius: 10px;\">\n                 </div>\n             `;\n            \n            // Afficher les instructions\n            this.showQRInstructions(qrContainer);\n        }\n\n        /**\n         * Afficher une image QR par d√©faut (fallback final)\n         */\n        displayDefaultQR(qrContainer, content, label) {\n            qrContainer.innerHTML = `\n                <div style=\"text-align: center; padding: 20px; color: #666;\">\n                    <div style=\"width: 300px; height: 300px; background: #f0f0f0; border: 2px solid #ddd; border-radius: 10px; display: flex; align-items: center; justify-content: center; margin: 0 auto;\">\n                        <div>\n                            <p style=\"font-size: 24px; margin: 0;\">üì±</p>\n                            <p style=\"font-size: 14px; margin: 10px 0 0 0;\">QR Code</p>\n                        </div>\n                    </div>\n                    <p style=\"margin-top: 10px; font-size: 12px;\">${label}</p>\n                    <p style=\"font-size: 10px; color: #999; margin-top: 5px;\">Contenu: ${content}</p>\n                </div>\n            `;\n        }\n\n        /**\n         * S'assurer que la biblioth√®que QRCode est disponible\n         */\n        async ensureQRCodeLibrary() {\n            if (typeof QRCode !== 'undefined') {\n                console.log('‚úÖ QRCode library d√©j√† disponible');\n                return true;\n            }\n            \n            console.log('üì¶ Chargement QRCode library...');\n            \n            return new Promise((resolve, reject) => {\n                const script = document.createElement('script');\n                script.src = 'https://cdn.jsdelivr.net/npm/qrcode@1.5.3/lib/browser.min.js';\n                script.onload = () => {\n                    setTimeout(() => {\n                        if (typeof QRCode !== 'undefined') {\n                            console.log('‚úÖ QRCode library charg√©e');\n                            resolve(true);\n                        } else {\n                            console.error('‚ùå QRCode non disponible apr√®s chargement');\n                            reject(new Error('QRCode library non disponible apr√®s chargement'));\n                        }\n                    }, 200);\n                };\n                script.onerror = () => {\n                    console.error('‚ùå Erreur chargement QRCode library');\n                    reject(new Error('Erreur chargement QRCode library'));\n                };\n                document.head.appendChild(script);\n            });\n        }\n\n        /**\n         * Afficher les instructions pour le QR code\n         */\n        showQRInstructions(qrContainer) {\n            const instructionsElement = qrContainer.parentElement.querySelector('.sunuid-qr-instructions');\n            const statusElement = qrContainer.parentElement.querySelector('.sunuid-qr-status');\n            \n            if (instructionsElement) {\n                instructionsElement.style.display = 'block';\n                instructionsElement.classList.add('sunuid-qr-ready');\n            }\n            if (statusElement) {\n                statusElement.style.display = 'block';\n                statusElement.classList.add('sunuid-qr-ready');\n            }\n        }\n\n        /**\n         * Ajouter le logo au centre du QR code\n         */\n        addLogoToCenter(ctx, x, y, width, height) {\n            try {\n                // Cr√©er une image pour le logo\n                const logo = new Image();\n                logo.onload = () => {\n                    const logoSize = 40;\n                    const logoX = x + (width - logoSize) / 2;\n                    const logoY = y + (width - logoSize) / 2;\n\n                    // Dessiner un fond blanc pour le logo\n                    ctx.fillStyle = 'white';\n                    ctx.fillRect(logoX - 2, logoY - 2, logoSize + 4, logoSize + 4);\n\n                    // Dessiner le logo\n                    ctx.drawImage(logo, logoX, logoY, logoSize, logoSize);\n                };\n                logo.src = 'src/logoqr.png';\n            } catch (error) {\n                console.warn('Logo non disponible:', error);\n            }\n        }\n\n        /**\n         * Afficher l'image de fallback\n         */\n        displayFallbackImage() {\n            console.log('‚ö†Ô∏è Affichage de l\\'image de fallback');\n            const qrContainer = document.getElementById('sunuid-qr-container');\n            if (qrContainer) {\n                qrContainer.innerHTML = `\n                    <div style=\"text-align: center; padding: 20px; color: #666;\">\n                        <p>‚ö†Ô∏è G√©n√©ration QR personnalis√© non disponible</p>\n                        <p>Utilisation de l'image par d√©faut</p>\n                        <p><strong>Debug:</strong> QRCode disponible: ${typeof QRCode !== 'undefined'}</p>\n                        <p><strong>Debug:</strong> Container trouv√©: ${qrContainer !== null}</p>\n                    </div>\n                `;\n            }\n        }\n\n        /**\n         * Afficher \"Service non disponible\"\n         */\n        displayServiceUnavailable(containerId, type) {\n            console.log(`displayServiceUnavailable appel√©e pour ${containerId}, type: ${type}`);\n            const container = document.getElementById(containerId);\n            if (!container) {\n                console.error(`Container ${containerId} non trouv√©`);\n                return;\n            }\n\n            container.innerHTML = `\n                <div class=\"sunuid-service-unavailable\" style=\"\n                    text-align: center;\n                    padding: 40px 20px;\n                    background: #f8f9fa;\n                    border: 2px dashed #dee2e6;\n                    border-radius: 10px;\n                    color: #6c757d;\n                    font-family: Arial, sans-serif;\n                \">\n                    <div style=\"font-size: 48px; margin-bottom: 20px;\">‚ö†Ô∏è</div>\n                    <h3 style=\"margin: 0 0 10px 0; color: #495057;\">Service Non Disponible</h3>\n                    <p style=\"margin: 0; font-size: 14px;\">\n                        Le service d'authentification est temporairement indisponible.<br>\n                        Veuillez r√©essayer plus tard.\n                    </p>\n                    <div style=\"margin-top: 20px; font-size: 12px; color: #adb5bd;\">\n                        Type: ${String(type).toUpperCase()}\n                    </div>\n                </div>\n            `;\n        }\n\n        /**\n         * Rafra√Æchir un QR code\n         */\n        async refreshQR(containerId, options = {}) {\n            try {\n                // V√©rifier si on a d√©j√† un QR code g√©n√©r√©\n                if (this.currentQRUrl) {\n                    console.log('üîÑ V√©rification du statut du QR code existant...');\n                    \n                    // Option 1: V√©rifier le statut du QR code via l'API\n                    // (√† impl√©menter si l'API le supporte)\n                    \n                    // Option 2: R√©g√©n√©rer le QR code seulement si n√©cessaire\n                    // Pour l'instant, on r√©g√©n√®re pour s'assurer qu'il est √† jour\n                    const result = await this.generateQR(containerId, options);\n                    return result;\n                } else {\n                    console.log('üîÑ Pas de QR code existant, g√©n√©ration d\\'un nouveau...');\n                    const result = await this.generateQR(containerId, options);\n                    return result;\n                }\n            } catch (error) {\n                console.error('Erreur lors du rafra√Æchissement:', error.message);\n                this.displayServiceUnavailable(containerId, this.config.type);\n                throw error;\n            }\n        }\n\n        /**\n         * D√©marrer le rafra√Æchissement automatique\n         */\n        startAutoRefresh(containerId, type, options) {\n            if (!this.config.autoRefresh) return;\n\n            // Arr√™ter le timer existant s'il y en a un\n            if (this.refreshTimer) {\n                clearInterval(this.refreshTimer);\n                console.log('üîÑ Timer de rafra√Æchissement pr√©c√©dent arr√™t√©');\n            }\n\n            this.refreshTimer = setInterval(async () => {\n                try {\n                    console.log('üîÑ Rafra√Æchissement automatique du QR code...');\n                    await this.refreshQR(containerId, type, options);\n                } catch (error) {\n                    console.warn('Erreur lors du rafra√Æchissement automatique:', error);\n                }\n            }, this.config.refreshInterval);\n            \n            console.log(`üîÑ Timer de rafra√Æchissement d√©marr√© (${this.config.refreshInterval}ms)`);\n        }\n\n        /**\n         * D√©marrer le timer de compte √† rebours\n         */\n\n\n        /**\n         * Effectuer une requ√™te API s√©curis√©e\n         */\n        async makeRequest(endpoint, data) {\n            // Validation de s√©curit√©\n            if (!this.isInitialized) {\n                this.logSecurityEvent('REQUEST_BEFORE_INIT', { endpoint });\n                throw new Error('SDK non initialis√©');\n            }\n\n            // V√©rifier les limites de requ√™tes pour l'initialisation s√©curis√©e\n            if (this.config.secureInit) {\n                this.config.requestCount++;\n                if (this.config.requestCount > this.config.maxRequests) {\n                    this.logSecurityEvent('API_REQUEST_LIMIT_EXCEEDED', { \n                        requestCount: this.config.requestCount,\n                        maxRequests: this.config.maxRequests \n                    });\n                    throw new Error('Limite de requ√™tes d√©pass√©e');\n                }\n            }\n\n            // Sanitisation des donn√©es\n            const sanitizedData = this.sanitizeRequestData(data);\n            \n            // Debug: Afficher les donn√©es envoy√©es\n            console.log('üîç Debug makeRequest - endpoint:', endpoint);\n            console.log('üîç Debug makeRequest - apiUrl:', this.config.apiUrl);\n            console.log('üîç Debug makeRequest - url:', `${this.config.apiUrl}${endpoint}`);\n            console.log('üîç Debug makeRequest - data:', JSON.stringify(sanitizedData, null, 2));\n            console.log('üîç Debug makeRequest - secureInit:', this.config.secureInit);\n            console.log('üîç Debug makeRequest - isInitialized:', this.isInitialized);\n            \n            // Utiliser l'endpoint depuis la configuration si disponible\n            const endpointPath = window.SunuIDConfig?.endpoints?.[endpoint.replace('/', '')] || endpoint;\n            const url = `${this.config.apiUrl}${endpointPath}`;\n            \n            // Debug: Afficher l'URL finale\n            console.log('üîç URL finale construite:', url);\n            console.log('üîç EndpointPath:', endpointPath);\n            console.log('üîç SunuIDConfig endpoints:', JSON.stringify(window.SunuIDConfig?.endpoints));\n            \n            // Log de s√©curit√© pour la requ√™te\n            this.logSecurityEvent('API_REQUEST_START', {\n                endpoint: endpointPath,\n                url: url,\n                dataKeys: Object.keys(sanitizedData),\n                secureInit: this.config.secureInit\n            });\n            \n            let retryCount = 0;\n            const maxRetries = this.config.maxRetries;\n            \n            while (retryCount <= maxRetries) {\n                try {\n                    const controller = new AbortController();\n                    const timeoutId = setTimeout(() => controller.abort(), this.config.requestTimeout);\n                    \n                    // Headers minimaux (API SunuID n'accepte que les headers essentiels)\n                    const headers = {\n                        'Content-Type': 'application/json'\n                    };\n\n                    // Note: En mode s√©curis√©, les credentials sont dans le body\n                    // Pas besoin d'ajouter de header sp√©cial pour √©viter les probl√®mes CORS\n                    // if (this.config.secureInit && this.config.token) {\n                    //     headers['X-Secure-Token'] = this.config.token;\n                    // }\n                    \n                    const response = await fetch(url, {\n                        method: 'POST',\n                        headers: headers,\n                        body: JSON.stringify(sanitizedData),\n                        signal: controller.signal\n                    });\n\n                    clearTimeout(timeoutId);\n\n                    if (!response.ok) {\n                        const errorText = await response.text();\n                        let errorData;\n                        try {\n                            errorData = JSON.parse(errorText);\n                        } catch (e) {\n                            errorData = { message: errorText };\n                        }\n                        \n                        this.logSecurityEvent('API_REQUEST_ERROR', {\n                            status: response.status,\n                            statusText: response.statusText,\n                            error: errorData.message\n                        });\n                        \n                        throw new Error(errorData.message || `Erreur HTTP: ${response.status}`);\n                    }\n\n                    const result = await response.json();\n                    \n                    this.logSecurityEvent('API_REQUEST_SUCCESS', {\n                        endpoint: endpointPath,\n                        responseKeys: Object.keys(result)\n                    });\n                    \n                    return result;\n                    \n                } catch (error) {\n                    retryCount++;\n                    \n                    if (error.name === 'AbortError') {\n                        this.logSecurityEvent('API_REQUEST_TIMEOUT', { retryCount });\n                        if (retryCount > maxRetries) {\n                            throw new Error('Timeout de la requ√™te API');\n                        }\n                        continue;\n                    }\n                    \n                    if (retryCount > maxRetries) {\n                        this.logSecurityEvent('API_REQUEST_MAX_RETRIES', { \n                            retryCount, \n                            error: error.message \n                        });\n                        throw error;\n                    }\n                    \n                    // Attendre avant de r√©essayer\n                    await new Promise(resolve => setTimeout(resolve, 1000 * retryCount));\n                }\n            }\n        }\n\n        /**\n         * Sanitisation des donn√©es de requ√™te\n         */\n        sanitizeRequestData(data) {\n            const sanitized = {};\n            \n            // D'abord, copier tous les champs de data\n            for (const [key, value] of Object.entries(data)) {\n                if (typeof value === 'string') {\n                    sanitized[key] = this.sanitizeInput(value);\n                } else if (typeof value === 'object' && value !== null) {\n                    sanitized[key] = this.sanitizeRequestData(value);\n                } else {\n                    sanitized[key] = value;\n                }\n            }\n            \n            // Ensuite, ajouter/√©craser les credentials (API SunuID les attend ici)\n            // Utiliser les vraies valeurs (originales) si disponibles, sinon les valeurs directes\n            sanitized.client_id = this.config.originalClientId || this.config.clientId;\n            sanitized.secret_id = this.config.originalSecretId || this.config.secretId;\n            \n            // Debug: V√©rifier les credentials et les donn√©es\n            console.log('üîç Credentials dans sanitizeRequestData - clientId:', this.config.clientId);\n            console.log('üîç Credentials dans sanitizeRequestData - secretId:', this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null');\n            console.log('üîç Credentials dans sanitizeRequestData - sanitizedClientId:', sanitized.client_id);\n            console.log('üîç Credentials dans sanitizeRequestData - sanitizedSecretId:', sanitized.secret_id ? '***' + sanitized.secret_id.slice(-4) : 'null');\n            console.log('üîç Credentials dans sanitizeRequestData - data complet:', JSON.stringify(sanitized, null, 2));\n            \n            return sanitized;\n        }\n\n        /**\n         * G√©n√©rer un ID de requ√™te unique\n         */\n        generateRequestId() {\n            return 'req_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n        }\n\n        /**\n         * G√©n√©rer un code de session unique\n         */\n        generateSessionCode() {\n            const timestamp = Date.now();\n            const random = Math.random().toString(36).substr(2, 9);\n            const code = `${timestamp}_${random}`;\n            return btoa(code); // Encoder en base64\n        }\n\n        /**\n         * R√©cup√©rer les informations du partenaire depuis l'API\n         */\n        async fetchPartnerInfo() {\n            try {\n                const response = await this.makeRequest('/debug', {\n                    type: this.config.type,\n                    client_id: this.config.clientId,\n                    secret_id: this.config.secretId\n                });\n\n                console.log('üìã R√©ponse debug API:', response);\n\n                // V√©rifier la structure de la r√©ponse\n                if (response.success && response.data) {\n                    const data = response.data;\n                    \n                    // Essayer de r√©cup√©rer le partner_id depuis diff√©rentes structures possibles\n                    let partnerId = null;\n                    \n                    if (data.partner_id) {\n                        partnerId = data.partner_id;\n                    } else if (data.authentication && data.authentication.auth_test && data.authentication.auth_test.partner_id) {\n                        partnerId = data.authentication.auth_test.partner_id;\n                    } else if (data.auth_test && data.auth_test.partner_id) {\n                        partnerId = data.auth_test.partner_id;\n                    }\n                    \n                    if (partnerId) {\n                        this.config.partnerId = partnerId;\n                        \n                        // R√©cup√©rer le service_id depuis la r√©ponse\n                        if (data.service_id) {\n                            this.config.serviceId = data.service_id;\n                        } else {\n                            // Fallback: utiliser le partner_id comme service_id\n                            this.config.serviceId = partnerId;\n                        }\n                        \n                        // Utiliser le partner_id pour d√©terminer le nom du partenaire\n                        if (partnerId === 21) {\n                            this.config.partnerName = 'Fayma';\n                        } else {\n                            this.config.partnerName = `Partner_${partnerId}`;\n                        }\n                        \n                        console.log('‚úÖ Informations partenaire r√©cup√©r√©es:', {\n                            partnerName: this.config.partnerName,\n                            partnerId: this.config.partnerId,\n                            serviceId: this.config.serviceId\n                        });\n                    } else {\n                        console.warn('‚ö†Ô∏è Partner ID non trouv√© dans la r√©ponse, utilisation du partner_id par d√©faut');\n                        this.config.partnerName = `Partner_${this.config.partnerId || 'unknown'}`;\n                    }\n                } else {\n                    console.warn('‚ö†Ô∏è Structure de r√©ponse invalide, utilisation du partner_id par d√©faut');\n                    this.config.partnerName = `Partner_${this.config.partnerId || 'unknown'}`;\n                }\n            } catch (error) {\n                console.warn('‚ö†Ô∏è Erreur lors de la r√©cup√©ration des informations du partenaire:', error.message);\n                this.config.partnerName = 'Partner_unknown';\n            }\n        }\n\n        /**\n         * Appliquer le th√®me\n         */\n        applyTheme(theme) {\n            const container = document.querySelector('.sunuid-qr-code');\n            if (container) {\n                container.className = `sunuid-qr-code sunuid-theme-${theme}`;\n            }\n        }\n\n        /**\n         * G√©rer les erreurs\n         */\n        handleError(error) {\n            console.error('SunuID SDK Error:', error);\n            \n            if (this.config.onError) {\n                this.config.onError(error);\n            }\n        }\n\n        /**\n         * V√©rifier le statut des connexions\n         */\n        async checkConnections() {\n            const status = {\n                api: false,\n                websocket: false,\n                ready: false\n            };\n            \n            // V√©rifier l'API en utilisant l'endpoint debug avec les credentials\n            try {\n                const testResponse = await fetch(this.config.apiUrl + '/debug', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        type: this.config.type,\n                        client_id: this.config.clientId,\n                        secret_id: this.config.secretId\n                    })\n                });\n                \n                if (testResponse.ok) {\n                    const debugData = await testResponse.json();\n                    // L'API est accessible si on re√ßoit une r√©ponse avec success: true\n                    status.api = debugData.success === true;\n                    console.log('üîç API Status:', status.api ? 'accessible' : 'inaccessible');\n                } else {\n                    status.api = false;\n                    console.log('üîç API Status: HTTP', testResponse.status);\n                }\n            } catch (error) {\n                console.log('üîç Test API √©chou√©:', error.message);\n                status.api = false;\n            }\n            \n            // V√©rifier le WebSocket\n            status.websocket = this.socket && this.socket.connected;\n            \n            // Connexions pr√™tes si API est accessible\n            status.ready = status.api;\n            \n            return status;\n        }\n        \n        /**\n         * Attendre que les connexions soient pr√™tes\n         */\n        async waitForConnections(timeout = 5000) {\n            const startTime = Date.now();\n            \n            while (Date.now() - startTime < timeout) {\n                const status = await this.checkConnections();\n                \n                if (status.ready) {\n                    console.log('‚úÖ Connexions pr√™tes');\n                    return status;\n                }\n                \n                console.log('‚è≥ Attente connexions...', status);\n                await new Promise(resolve => setTimeout(resolve, 1000)); // V√©rification toutes les secondes\n            }\n            \n            throw new Error('Timeout connexions - Impossible de g√©n√©rer le QR code');\n        }\n        \n        /**\n         * Obtenir l'URL du QR code g√©n√©r√©\n         */\n        getQRCode() {\n            // Retourner l'URL du QR code si disponible\n            if (this.currentQRUrl) {\n                return this.currentQRUrl;\n            }\n            \n            // Sinon, retourner une URL par d√©faut ou null\n            return null;\n        }\n\n        /**\n         * Nettoyer les ressources\n         */\n        destroy() {\n            this.stopAutoRefresh();\n            \n            // Fermer la connexion WebSocket\n            if (this.socket) {\n                this.socket.disconnect();\n                this.socket = null;\n                console.log('üåê WebSocket d√©connect√©');\n            }\n            \n            this.isInitialized = false;\n            this.logSecurityEvent('SDK_DESTROY');\n            console.log('SunuID SDK d√©truit');\n        }\n\n        /**\n         * Arr√™ter le rafra√Æchissement automatique\n         */\n        stopAutoRefresh() {\n            if (this.refreshTimer) {\n                clearInterval(this.refreshTimer);\n                this.refreshTimer = null;\n                console.log('üîÑ Timer de rafra√Æchissement arr√™t√©');\n            }\n        }\n\n        /**\n         * Obtenir les logs de s√©curit√©\n         */\n        getSecurityLogs() {\n            return window.SunuIDSecurityLogs || [];\n        }\n\n        /**\n         * Nettoyer les logs de s√©curit√©\n         */\n        clearSecurityLogs() {\n            window.SunuIDSecurityLogs = [];\n            this.logSecurityEvent('SECURITY_LOGS_CLEARED');\n        }\n\n        /**\n         * Afficher un loader pendant le scan du QR code\n         */\n        showQRLoader() {\n            console.log('üîÑ Affichage du loader - Scan QR initi√©');\n            \n            // Chercher le conteneur QR dans diff√©rents IDs possibles\n            const containerIds = ['qr-area', 'qr-container', 'sunuid-qr-container'];\n            let container = null;\n            \n            for (const id of containerIds) {\n                container = document.getElementById(id);\n                if (container) break;\n            }\n            \n            if (!container) {\n                console.warn('‚ö†Ô∏è Conteneur QR non trouv√© pour afficher le loader');\n                return;\n            }\n            \n            // Remplacer le contenu par un loader anim√©\n            container.innerHTML = `\n                <div style=\"\n                    text-align: center;\n                    padding: 40px 20px;\n                    background: #f8f9fa;\n                    border: 2px solid #007bff;\n                    border-radius: 10px;\n                    color: #007bff;\n                    font-family: Arial, sans-serif;\n                \">\n                    <div style=\"\n                        width: 60px;\n                        height: 60px;\n                        border: 4px solid #e3f2fd;\n                        border-top: 4px solid #007bff;\n                        border-radius: 50%;\n                        animation: spin 1s linear infinite;\n                        margin: 0 auto 20px auto;\n                    \"></div>\n                    <h3 style=\"margin: 0 0 10px 0; color: #007bff;\">üîç Scan en cours...</h3>\n                    <p style=\"margin: 0; font-size: 14px;\">\n                        Veuillez patienter pendant la v√©rification de votre identit√©.\n                    </p>\n                    <div style=\"margin-top: 15px; font-size: 12px; color: #6c757d;\">\n                        ‚è±Ô∏è Traitement en cours...\n                    </div>\n                </div>\n                <style>\n                    @keyframes spin {\n                        0% { transform: rotate(0deg); }\n                        100% { transform: rotate(360deg); }\n                    }\n                </style>\n            `;\n            \n            console.log('‚úÖ Loader affich√© avec succ√®s');\n        }\n\n        /**\n         * G√©rer le callback SunuID\n         */\n        handleCallback() {\n            const urlParams = new URLSearchParams(window.location.search);\n            \n            // V√©rifier si c'est un callback SunuID\n            if (urlParams.has('token') && urlParams.has('session_id')) {\n                console.log('üîó Callback SunuID d√©tect√©');\n                \n                // R√©cup√©rer les param√®tres\n                const callbackData = {\n                    token: urlParams.get('token'),\n                    state: urlParams.get('state'),\n                    session_id: urlParams.get('session_id'),\n                    user_id: urlParams.get('user_id'),\n                    partner_id: urlParams.get('partner_id'),\n                    type: urlParams.get('type'),\n                    timestamp: urlParams.get('timestamp'),\n                    signature: urlParams.get('signature')\n                };\n                \n                console.log('üìã Donn√©es callback:', callbackData);\n                \n                // Valider le callback\n                this.validateCallback(callbackData);\n                \n                // Traiter l'authentification\n                this.processAuthentication(callbackData);\n                \n                return true;\n            }\n            \n            return false;\n        }\n\n        /**\n         * Valider le callback\n         */\n        validateCallback(data) {\n            console.log('üîí Validation du callback...');\n            \n            // V√©rifier l'√©tat de s√©curit√©\n            if (data.state && data.state !== this.config.state) {\n                console.error('‚ùå √âtat de s√©curit√© invalide');\n                throw new Error('√âtat de s√©curit√© invalide');\n            }\n            \n            // V√©rifier la signature (si configur√©e)\n            if (data.signature && this.config.verifySignature) {\n                if (!this.verifySignature(data)) {\n                    console.error('‚ùå Signature invalide');\n                    throw new Error('Signature invalide');\n                }\n            }\n            \n            // V√©rifier l'expiration\n            if (data.timestamp && this.isExpired(data.timestamp)) {\n                console.error('‚ùå Token expir√©');\n                throw new Error('Token expir√©');\n            }\n            \n            console.log('‚úÖ Callback valid√© avec succ√®s');\n        }\n\n        /**\n         * Traiter l'authentification\n         */\n        processAuthentication(data) {\n            console.log('üîê Traitement de l\\'authentification...');\n            \n            try {\n                // D√©coder le JWT token\n                const decodedToken = this.decodeJWT(data.token);\n                \n                // V√©rifier les donn√©es utilisateur\n                const userData = {\n                    user_id: decodedToken.user_id || data.user_id,\n                    session_id: decodedToken.session_id || data.session_id,\n                    partner_id: decodedToken.partner_id || data.partner_id,\n                    type: decodedToken.type || data.type,\n                    iat: decodedToken.iat,\n                    exp: decodedToken.exp\n                };\n                \n                console.log('üë§ Donn√©es utilisateur:', userData);\n                \n                // √âmettre l'√©v√©nement de succ√®s\n                this.emitWebSocketEvent('authentication_success', {\n                    userData: userData,\n                    callbackData: data,\n                    timestamp: Date.now()\n                });\n                \n                // Appeler le callback de succ√®s\n                if (this.config.onAuthenticationSuccess) {\n                    this.config.onAuthenticationSuccess(userData, data);\n                }\n                \n                // Rediriger si configur√©\n                if (this.config.redirectAfterSuccess) {\n                    this.redirectAfterSuccess(userData);\n                }\n                \n                console.log('‚úÖ Authentification trait√©e avec succ√®s');\n                \n            } catch (error) {\n                console.error('‚ùå Erreur lors du traitement:', error);\n                \n                // Appeler le callback d'erreur\n                if (this.config.onAuthenticationError) {\n                    this.config.onAuthenticationError(error, data);\n                }\n                \n                throw error;\n            }\n        }\n\n        /**\n         * D√©coder un JWT token\n         */\n        decodeJWT(token) {\n            try {\n                // D√©codage simple du JWT (sans v√©rification de signature)\n                const parts = token.split('.');\n                if (parts.length !== 3) {\n                    throw new Error('Format JWT invalide');\n                }\n                \n                const payload = parts[1];\n                const decoded = JSON.parse(atob(payload));\n                \n                return decoded;\n            } catch (error) {\n                console.error('‚ùå Erreur d√©codage JWT:', error);\n                throw new Error('Token JWT invalide');\n            }\n        }\n\n        /**\n         * V√©rifier la signature\n         */\n        verifySignature(data) {\n            // Impl√©mentation basique - √† adapter selon vos besoins\n            const expectedSignature = this.generateSignature(data);\n            return data.signature === expectedSignature;\n        }\n\n        /**\n         * G√©n√©rer une signature\n         */\n        generateSignature(data) {\n            // Impl√©mentation basique - √† adapter selon vos besoins\n            const payload = `${data.token}.${data.state}.${data.session_id}.${data.timestamp}`;\n            return btoa(payload).slice(0, 12); // Signature simplifi√©e\n        }\n\n        /**\n         * V√©rifier l'expiration\n         */\n        isExpired(timestamp) {\n            const currentTime = Math.floor(Date.now() / 1000);\n            const tokenTime = parseInt(timestamp);\n            const maxAge = this.config.tokenMaxAge || 300; // 5 minutes par d√©faut\n            \n            return (currentTime - tokenTime) > maxAge;\n        }\n\n        /**\n         * Rediriger apr√®s succ√®s\n         */\n        redirectAfterSuccess(userData) {\n            let redirectUrl = this.config.redirectAfterSuccess;\n            \n            // Remplacer les variables dans l'URL\n            redirectUrl = redirectUrl\n                .replace('{user_id}', userData.user_id)\n                .replace('{session_id}', userData.session_id)\n                .replace('{partner_id}', userData.partner_id)\n                .replace('{type}', userData.type);\n            \n            console.log('üîÑ Redirection vers:', redirectUrl);\n            \n            // Redirection avec d√©lai pour permettre les callbacks\n            setTimeout(() => {\n                window.location.href = redirectUrl;\n            }, 100);\n        }\n\n        /**\n         * G√©n√©rer un √©tat de s√©curit√©\n         */\n        generateState() {\n            const state = 'sunuid_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n            this.config.state = state;\n            return state;\n        }\n    }\n\n    // Exposer la classe globalement\n    window.SunuID = SunuID;\n    window.sunuidInstance = null;\n\n    // Fonction d'initialisation globale\n    window.initSunuID = function(config) {\n        try {\n            window.sunuidInstance = new SunuID(config);\n            return window.sunuidInstance;\n        } catch (error) {\n            console.error('Erreur lors de l\\'initialisation de SunuID:', error);\n            throw error;\n        }\n    };\n\n})(window); "],"names":["window","_window$SunuIDConfig","_window$SunuIDConfig2","_window$SunuIDConfig3","DEFAULT_CONFIG","apiUrl","SunuIDConfig","clientId","secretId","type","partnerName","theme","language","autoRefresh","refreshInterval","autoInit","onSuccess","onError","onStatusUpdate","onExpired","enableSecurityLogs","validateInputs","maxRetries","requestTimeout","secureInit","secureInitUrl","includes","replace","token","forceRemoteServer","useLocalFallback","redirectAfterSuccess","verifySignature","tokenMaxAge","onAuthenticationSuccess","onAuthenticationError","state","SunuID","config","arguments","length","undefined","_classCallCheck","this","_objectSpread","qrCode","refreshTimer","isInitialized","socket","initPromise","init","key","value","_init","_asyncToGenerator","_regenerator","m","_callee","_t","w","_context","p","n","handleCallback","console","log","a","validateSecurityParams","logSecurityEvent","fetchPartnerInfo","obfuscateCredentials","slice","initWebSocket","v","error","message","apply","_secureInit","_callee2","initData","response","result","decodedToken","_t2","_context2","fetch","method","headers","Accept","body","JSON","stringify","ok","Error","concat","status","json","success","data","api_url","decodeSecureToken","client_id","secret_id","expiresIn","expires_in","maxRequests","max_requests","requestCount","parts","split","_parts","_slicedToArray","payload","decodedPayload","atob","tokenData","parse","exp","Date","now","_this","io","warn","setTimeout","ip","getClientIP","query","userId","username","transports","on","id","connected","reason","handleQRStatusUpdate","handleQRScanSuccess","handleQRExpired","showQRLoader","onAny","eventName","callback","_len","args","Array","_key","errors","push","isValidUrl","join","string","url","URL","protocol","_","event","securityLog","timestamp","toISOString","userAgent","navigator","location","href","SunuIDSecurityLogs","originalClientId","originalSecretId","clientIdDisplay","secretIdDisplay","input","trim","emit","_generateQR","_callee3","containerId","options","connectionStatus","socketId","qrContent","qrImageUrl","isLocal","_t3","_t4","_args3","_context3","waitForConnections","makeRequest","label","getTypeName","qrCodeUrl","startsWith","qr_url","qrUrl","image_url","imageUrl","currentQRUrl","sessionId","displayQRCode","startAutoRefresh","emitWebSocketEvent","stack","hostname","displayServiceUnavailable","_generateCustomQR","_callee4","_t5","_args4","_context4","qrcode","code","service_id","_x","_x2","_generateAuthQR","_callee5","_args5","_context5","generateQR","_x3","_generateKYCQR","_callee6","originalType","_args6","_context6","f","_x4","_generateSignatureQR","_callee7","_args7","_context7","_x5","_checkQRStatus","_callee8","_t6","_context8","serviceId","handleError","_x6","_generateQRWithContent","_callee9","content","localQRUrl","_t7","_args9","_context9","generateQRLocal","generateQRRemote","displayQRContent","_x7","_x8","_x9","_generateQRLocal","_callee0","_t8","_args0","_context0","encodeURIComponent","_x0","_x1","_x10","_generateQRRemote","_callee1","_t9","_args1","_context1","text","size","_x11","_x12","_x13","container","document","getElementById","typeName","innerHTML","qrElement","createElement","className","appendChild","applyTheme","_generateCustomQRCode","_callee10","qrContainer","_t0","_context10","generateQRPHP","displayDefaultQR","_x14","_x15","_generateQRClientSide","_callee11","canvas","ctx","_this2","_context11","ensureQRCodeLibrary","QRCode","width","height","getContext","fillStyle","fillRect","Promise","resolve","reject","toCanvas","margin","color","dark","light","font","textAlign","fillText","dataUrl","toDataURL","showQRInstructions","_x16","_x17","_x18","_generateQRPHP","_callee12","qrGeneratorUrl","requestBody","contentType","responseData","_context12","URLSearchParams","foreground_color","background_color","data_uri","_x19","_x20","_x21","_ensureQRCodeLibrary","_callee13","_context13","script","src","onload","onerror","head","instructionsElement","parentElement","querySelector","statusElement","style","display","classList","add","x","y","logo","Image","logoSize","logoX","logoY","drawImage","String","toUpperCase","_refreshQR","_callee14","_result","_t1","_args14","_context14","_x22","_this3","clearInterval","setInterval","_callee15","_t10","_context15","refreshQR","_makeRequest","_callee16","endpoint","_window$SunuIDConfig4","_window$SunuIDConfig5","sanitizedData","endpointPath","retryCount","_loop","_ret","_this4","_context17","sanitizeRequestData","endpoints","dataKeys","Object","keys","controller","timeoutId","errorText","errorData","_t11","_context16","AbortController","abort","signal","clearTimeout","e","statusText","responseKeys","name","d","_regeneratorValues","_x23","_x24","sanitized","_i","_Object$entries","entries","_Object$entries$_i","sanitizeInput","_typeof","Math","random","toString","substr","btoa","_fetchPartnerInfo","_callee17","partnerId","_t12","_context18","partner_id","authentication","auth_test","_checkConnections","_callee18","testResponse","debugData","_t13","_context19","api","websocket","ready","_waitForConnections","_callee19","timeout","startTime","_args20","_context20","checkConnections","stopAutoRefresh","disconnect","_i2","_containerIds","urlParams","search","has","callbackData","get","session_id","user_id","signature","validateCallback","processAuthentication","isExpired","decodeJWT","userData","iat","expectedSignature","generateSignature","floor","parseInt","redirectUrl","sunuidInstance","initSunuID"],"mappings":"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"}