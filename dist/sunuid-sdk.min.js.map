{"version":3,"file":"sunuid-sdk.min.js","sources":["../src/sunuid-sdk.js"],"sourcesContent":["/**\n * SunuID SDK - Package d'int√©gration pour partenaires\n * \n * @version 1.0.0\n * @author SunuID Team\n * @license MIT\n */\n\n(function(window) {\n    'use strict';\n\n    // Configuration par d√©faut\n    const DEFAULT_CONFIG = {\n        apiUrl: window.SunuIDConfig?.apiUrl || 'https://api.sunuid.fayma.sn',\n        clientId: null,\n        secretId: null,\n        type: 2, // Type par d√©faut (2 = authentification)\n        partnerName: null, // Nom du partenaire r√©cup√©r√© depuis l'API\n        theme: 'light',\n        language: 'fr',\n        autoRefresh: false, // D√©sactiv√© par d√©faut pour √©viter les appels r√©p√©titifs\n        refreshInterval: 30000, // 30 secondes\n        autoInit: false, // D√©sactiv√© par d√©faut pour √©viter les boucles\n        onSuccess: null,\n        onError: null,\n        onStatusUpdate: null,\n        onExpired: null,\n        // Nouvelles options de s√©curit√©\n        enableSecurityLogs: true,\n        validateInputs: true,\n        maxRetries: 3,\n        requestTimeout: 10000, // 10 secondes\n        // Options d'initialisation s√©curis√©e\n        secureInit: false,\n        secureInitUrl: (() => {\n            if (window.SunuIDConfig?.apiUrl?.includes('api.sunuid.fayma.sn')) {\n                return 'https://api.sunuid.fayma.sn/secure-init.php';\n            }\n            return window.SunuIDConfig?.apiUrl?.replace('/api', '') + '/secure-init.php' || 'https://api.sunuid.fayma.sn/secure-init.php';\n        })(),\n        token: null,\n        // Configuration pour forcer l'utilisation du serveur distant\n        forceRemoteServer: true,\n        useLocalFallback: false,\n        // Nouvelles options pour les callbacks\n        redirectAfterSuccess: null,\n        verifySignature: false,\n        tokenMaxAge: 300, // 5 minutes par d√©faut\n        onAuthenticationSuccess: null,\n        onAuthenticationError: null,\n        state: null\n    };\n\n    /**\n     * Classe principale SunuID\n     */\n    class SunuID {\n        constructor(config = {}) {\n            this.config = { ...DEFAULT_CONFIG, ...config };\n            this.qrCode = null;\n            this.refreshTimer = null;\n            this.isInitialized = false;\n            this.socket = null;\n            this.initPromise = null;\n            \n            // Initialisation asynchrone seulement si autoInit est explicitement activ√©\n            if (this.config.autoInit === true) {\n                // D√©lai pour √©viter les conflits avec d'autres scripts\n                setTimeout(() => {\n                    this.init();\n                }, 100);\n            }\n        }\n\n        /**\n         * Initialisation du SDK\n         */\n        async init() {\n            // Protection contre les initialisations multiples\n            if (this.isInitialized) {\n                console.log('‚ö†Ô∏è SDK d√©j√† initialis√©, ignor√©');\n                return;\n            }\n            \n            // Protection contre les initialisations simultan√©es\n            if (this.initPromise) {\n                console.log('‚ö†Ô∏è Initialisation d√©j√† en cours, attente...');\n                return this.initPromise;\n            }\n            \n            this.initPromise = this._doInit();\n            return this.initPromise;\n        }\n\n        /**\n         * Initialisation interne du SDK\n         */\n        async _doInit() {\n            try {\n                // V√©rifier s'il y a un callback √† traiter en premier\n                if (this.handleCallback()) {\n                    console.log('‚úÖ Callback trait√©, initialisation termin√©e');\n                    return;\n                }\n\n                // Initialisation s√©curis√©e si activ√©e\n                if (this.config.secureInit) {\n                    await this.secureInit();\n                } else {\n                    // Validation s√©curis√©e des param√®tres\n                    if (this.config.validateInputs) {\n                        this.validateSecurityParams();\n                    }\n                }\n\n                // Log de s√©curit√© pour l'initialisation\n                this.logSecurityEvent('SDK_INIT_START', {\n                    apiUrl: this.config.apiUrl,\n                    type: this.config.type,\n                    secureInit: this.config.secureInit\n                });\n\n                // R√©cup√©rer les informations du partenaire depuis l'API\n                await this.fetchPartnerInfo();\n\n                // Obscurcir les credentials dans les logs\n                this.obfuscateCredentials();\n\n                this.isInitialized = true;\n                console.log('SunuID SDK initialis√© avec succ√®s');\n                console.log('üìã Configuration SDK:', {\n                    apiUrl: this.config.apiUrl,\n                    type: this.config.type,\n                    partnerName: this.config.partnerName,\n                    clientId: this.config.clientId ? '***' + this.config.clientId.slice(-4) : 'null',\n                    secretId: this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null',\n                    secureInit: this.config.secureInit,\n                    theme: this.config.theme\n                });\n                \n                this.logSecurityEvent('SDK_INIT_SUCCESS');\n                \n                // Initialiser la connexion WebSocket\n                this.initWebSocket();\n                \n            } catch (error) {\n                this.logSecurityEvent('SDK_INIT_ERROR', { error: error.message });\n                throw error;\n            }\n        }\n\n        /**\n         * Initialisation s√©curis√©e via PHP\n         */\n        async secureInit() {\n            try {\n                this.logSecurityEvent('SECURE_INIT_START');\n                \n                const initData = {\n                    type: this.config.type,\n                    partnerName: this.config.partnerName,\n                    theme: this.config.theme\n                };\n\n                const response = await fetch(this.config.secureInitUrl, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json'\n                    },\n                    body: JSON.stringify(initData)\n                });\n\n                if (!response.ok) {\n                    throw new Error(`Erreur HTTP: ${response.status}`);\n                }\n\n                const result = await response.json();\n                \n                console.log('üìã R√©ponse initialisation s√©curis√©e:', result);\n                \n                if (!result.success) {\n                    throw new Error(result.error || 'Erreur lors de l\\'initialisation s√©curis√©e');\n                }\n\n                // Stocker le token et les donn√©es s√©curis√©es\n                this.config.token = result.data.token;\n                this.config.apiUrl = result.data.api_url;\n                \n                // D√©coder le token pour r√©cup√©rer les credentials\n                const decodedToken = this.decodeSecureToken(result.data.token);\n                if (decodedToken) {\n                    this.config.clientId = decodedToken.client_id;\n                    this.config.secretId = decodedToken.secret_id;\n                } else {\n                    throw new Error('Impossible de d√©coder le token s√©curis√©');\n                }\n                \n                this.config.expiresIn = result.data.expires_in;\n                this.config.maxRequests = result.data.max_requests;\n                this.config.requestCount = 0;\n\n                this.logSecurityEvent('SECURE_INIT_SUCCESS', {\n                    expiresIn: result.data.expires_in,\n                    maxRequests: result.data.max_requests\n                });\n\n                console.log('‚úÖ Initialisation s√©curis√©e r√©ussie');\n                \n            } catch (error) {\n                this.logSecurityEvent('SECURE_INIT_ERROR', { error: error.message });\n                throw new Error(`√âchec de l'initialisation s√©curis√©e: ${error.message}`);\n            }\n        }\n\n        /**\n         * D√©coder le token s√©curis√©\n         */\n        decodeSecureToken(token) {\n            try {\n                const parts = token.split('.');\n                if (parts.length !== 2) {\n                    console.error('‚ùå Format de token invalide');\n                    return null;\n                }\n                \n                const [payload, signature] = parts;\n                \n                // D√©coder le payload (base64)\n                const decodedPayload = atob(payload);\n                const tokenData = JSON.parse(decodedPayload);\n                \n                // V√©rifier l'expiration\n                if (tokenData.exp && tokenData.exp < Date.now() / 1000) {\n                    console.error('‚ùå Token expir√©');\n                    return null;\n                }\n                \n                console.log('‚úÖ Token d√©cod√© avec succ√®s');\n                return tokenData;\n                \n            } catch (error) {\n                console.error('‚ùå Erreur d√©codage token:', error);\n                return null;\n            }\n        }\n\n        /**\n         * Initialiser la connexion WebSocket\n         */\n        initWebSocket() {\n            try {\n                // V√©rifier si Socket.IO est disponible\n                if (typeof io === 'undefined') {\n                    console.warn('‚ö†Ô∏è Socket.IO non disponible, WebSocket sera initialis√© plus tard');\n                    // R√©essayer apr√®s un d√©lai\n                    setTimeout(() => this.initWebSocket(), 1000);\n                    return;\n                }\n                \n                // Obtenir l'IP du client (simulation)\n                const ip = this.getClientIP();\n                \n                // Initialiser la connexion WebSocket si elle n'existe pas\n                if (!this.socket) {\n                    console.log('üåê Initialisation Socket.IO...');\n                    \n                    this.socket = io('wss://samasocket.fayma.sn:9443', {\n                        query: {\n                            token: this.config.clientId,\n                            type: 'web',\n                            userId: this.config.clientId,\n                            username: ip\n                        },\n                        transports: ['websocket', 'polling']\n                    });\n\n                    // Gestion des √©v√©nements WebSocket\n                    this.socket.on('connect', () => {\n                        console.log('üåê WebSocket connect√© avec succ√®s');\n                        console.log('üìä Socket ID:', this.socket.id);\n                        this.socket.connected = true;\n                    });\n\n                    this.socket.on('disconnect', (reason) => {\n                        console.log('‚ùå WebSocket d√©connect√©:', reason);\n                        this.socket.connected = false;\n                    });\n\n                    this.socket.on('connect_error', (error) => {\n                        console.error('‚ùå Erreur connexion WebSocket:', error);\n                        this.socket.connected = false;\n                    });\n\n                    // √âcouter les √©v√©nements sp√©cifiques\n                    this.socket.on('qr_status_update', (data) => {\n                        console.log('üì± Mise √† jour statut QR re√ßue:', data);\n                        this.handleQRStatusUpdate(data);\n                    });\n\n                    this.socket.on('qr_scan_success', (data) => {\n                        console.log('‚úÖ Scan QR r√©ussi re√ßu:', data);\n                        this.handleQRScanSuccess(data);\n                    });\n\n                    this.socket.on('qr_expired', (data) => {\n                        console.log('‚è∞ QR expir√© re√ßu:', data);\n                        this.handleQRExpired(data);\n                    });\n\n                    // √âcouter l'√©v√©nement qr_scan_initiated sp√©cifiquement\n                    this.socket.on('qr_scan_initiated', (data) => {\n                        console.log('üîç QR Scan Initiated re√ßu:', data);\n                        this.showQRLoader();\n                    });\n\n                    // √âcouter l'√©v√©nement message g√©n√©rique (fallback)\n                    this.socket.on('message', (data) => {\n                        console.log('üì® Message socket re√ßu:', data);\n                        if (data && data.type === 'qr_scan_initiated') {\n                            console.log('üîç QR Scan Initiated d√©tect√© dans message:', data);\n                            this.showQRLoader();\n                        }\n                    });\n\n                    // √âcouter tous les √©v√©nements socket pour le debugging\n                    this.socket.onAny = this.socket.onAny || function(eventName, callback) {\n                        // Fallback pour les versions de Socket.IO qui n'ont pas onAny\n                        console.log(`üåê Socket Event [${eventName}]:`, callback);\n                    };\n                    \n                    // Logger tous les √©v√©nements re√ßus\n                    this.socket.onAny((eventName, ...args) => {\n                        console.log(`üåê Socket Event [${eventName}]:`, args);\n                    });\n                } else {\n                    console.log('üåê WebSocket d√©j√† connect√©');\n                }\n            } catch (error) {\n                console.error('‚ùå Erreur initialisation WebSocket:', error);\n            }\n        }\n\n        /**\n         * Obtenir l'IP du client (simulation)\n         */\n        getClientIP() {\n            // Simulation - en production, vous pourriez utiliser un service d'IP\n            return '127.0.0.1';\n        }\n\n        /**\n         * Obtenir le nom du type √† partir du num√©ro\n         */\n        getTypeName(type) {\n            switch(type) {\n                case 1: return 'KYC';\n                case 2: return 'AUTH';\n                case 3: return 'SIGNATURE';\n                default: return `TYPE-${type}`;\n            }\n        }\n\n        /**\n         * Validation s√©curis√©e des param√®tres\n         */\n        validateSecurityParams() {\n            const errors = [];\n            \n            // Validation du clientId\n            if (!this.config.clientId || typeof this.config.clientId !== 'string') {\n                errors.push('clientId invalide ou manquant');\n            } else if (this.config.clientId.length < 10) {\n                errors.push('clientId trop court');\n            }\n            \n            // Validation du secretId\n            if (!this.config.secretId || typeof this.config.secretId !== 'string') {\n                errors.push('secretId invalide ou manquant');\n            } else if (this.config.secretId.length < 32) {\n                errors.push('secretId trop court (minimum 32 caract√®res)');\n            }\n            \n            // Validation de l'URL API\n            if (!this.config.apiUrl || !this.isValidUrl(this.config.apiUrl)) {\n                errors.push('apiUrl invalide');\n            }\n            \n            // Validation du type\n            if (![1, 2, 3].includes(this.config.type)) {\n                errors.push('type invalide (doit √™tre 1, 2 ou 3)');\n            }\n            \n            if (errors.length > 0) {\n                this.logSecurityEvent('VALIDATION_ERROR', { errors });\n                throw new Error(`Param√®tres de s√©curit√© invalides: ${errors.join(', ')}`);\n            }\n            \n            this.logSecurityEvent('VALIDATION_SUCCESS');\n        }\n\n        /**\n         * Validation d'URL s√©curis√©e\n         */\n        isValidUrl(string) {\n            try {\n                const url = new URL(string);\n                return url.protocol === 'https:' || url.protocol === 'http:';\n            } catch (_) {\n                return false;\n            }\n        }\n\n        /**\n         * Logs de s√©curit√©\n         */\n        logSecurityEvent(event, data = {}) {\n            if (!this.config.enableSecurityLogs) return;\n            \n            const securityLog = {\n                timestamp: new Date().toISOString(),\n                event: event,\n                data: data,\n                userAgent: navigator.userAgent,\n                url: window.location.href\n            };\n            \n            console.warn('üîí [SECURITY]', securityLog);\n            \n            // Stocker les logs de s√©curit√© (optionnel)\n            if (!window.SunuIDSecurityLogs) {\n                window.SunuIDSecurityLogs = [];\n            }\n            window.SunuIDSecurityLogs.push(securityLog);\n        }\n\n        /**\n         * Chiffrement simple des credentials (pour √©viter l'exposition en clair)\n         */\n        obfuscateCredentials() {\n            // Stocker les vraies valeurs pour les logs de s√©curit√©\n            this.config.originalClientId = this.config.clientId;\n            this.config.originalSecretId = this.config.secretId;\n            \n            // Cr√©er des versions obfusqu√©es pour l'affichage uniquement\n            if (this.config.clientId) {\n                this.config.clientIdDisplay = this.config.clientId.replace(/(.{3}).*(.{3})/, '$1***$2');\n            }\n            if (this.config.secretId) {\n                this.config.secretIdDisplay = this.config.secretId.replace(/(.{4}).*(.{4})/, '$1***$2');\n            }\n        }\n\n        /**\n         * Validation des entr√©es utilisateur\n         */\n        sanitizeInput(input) {\n            if (typeof input !== 'string') return input;\n            \n            // Protection contre les injections XSS basiques\n            return input\n                .replace(/[<>]/g, '') // Supprimer les balises HTML\n                .replace(/javascript:/gi, '') // Supprimer les protocoles dangereux\n                .trim();\n        }\n\n        /**\n         * G√©rer la mise √† jour du statut QR\n         */\n        handleQRStatusUpdate(data) {\n            console.log('üì± QR Status Update:', data);\n            if (this.config.onStatusUpdate) {\n                this.config.onStatusUpdate(data);\n            }\n        }\n\n        /**\n         * G√©rer le succ√®s du scan QR\n         */\n        handleQRScanSuccess(data) {\n            console.log('‚úÖ QR Scan Success:', data);\n            if (this.config.onSuccess) {\n                this.config.onSuccess(data);\n            }\n        }\n\n        /**\n         * G√©rer l'expiration du QR\n         */\n        handleQRExpired(data) {\n            console.log('‚è∞ QR Expired:', data);\n            if (this.config.onExpired) {\n                this.config.onExpired(data);\n            }\n        }\n\n        /**\n         * √âmettre un √©v√©nement WebSocket\n         */\n        emitWebSocketEvent(event, data) {\n            if (this.socket && this.socket.connected) {\n                this.socket.emit(event, data);\n                console.log(`üì§ √âv√©nement WebSocket √©mis: ${event}`, data);\n            } else {\n                console.warn('‚ö†Ô∏è WebSocket non connect√©, impossible d\\'√©mettre l\\'√©v√©nement:', event);\n            }\n        }\n\n        /**\n         * Obtenir le statut de la connexion WebSocket\n         */\n        getWebSocketStatus() {\n            if (!this.socket) {\n                return 'not_initialized';\n            }\n            return this.socket.connected ? 'connected' : 'disconnected';\n        }\n\n        /**\n         * Forcer l'initialisation WebSocket (si Socket.IO devient disponible plus tard)\n         */\n        forceWebSocketInit() {\n            if (typeof io !== 'undefined' && !this.socket) {\n                console.log('üîÑ For√ßage de l\\'initialisation WebSocket...');\n                this.initWebSocket();\n            }\n        }\n\n        /**\n         * G√©n√©rer un QR code avec le type configur√©\n         */\n        async generateQR(containerId = 'sunuid-qr-container', options = {}) {\n            // Attendre l'initialisation si n√©cessaire\n            if (this.initPromise) {\n                await this.initPromise;\n                this.initPromise = null;\n            }\n            \n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n            \n            console.log('üéØ generateQR appel√© avec containerId:', containerId);\n            \n            // Attendre que les connexions soient pr√™tes\n            console.log('üîç Attente connexions API et WebSocket...');\n            try {\n                const connectionStatus = await this.waitForConnections(5000); // 5 secondes max\n                console.log('‚úÖ Connexions pr√™tes:', connectionStatus);\n            } catch (connectionError) {\n                console.error('‚ùå Erreur connexions:', connectionError.message);\n                throw new Error('Connexions non disponibles - Impossible de g√©n√©rer le QR code');\n            }\n\n            try {\n                // Utiliser uniquement le socketID comme contenu du QR\n                const socketId = this.socket ? this.socket.id : 'timeout-socket-id';\n                const qrContent = socketId;\n                \n                console.log('üìÑ Contenu QR pr√©par√©:', qrContent);\n                console.log('üîå Socket ID:', socketId);\n                \n                                    // G√©n√©rer le QR avec le contenu complet\n                    const partnerName = this.config.partnerName || 'Partner_unknown';\n                    const response = await this.makeRequest('/qr-generate', {\n                        type: this.config.type,\n                        data: qrContent, // Essayer data au lieu de content\n                        label: `${this.getTypeName(this.config.type)} ${partnerName}`, // Label du QR avec nom du partenaire\n                        ...options\n                    });\n\n                if (response.success) {\n                    // Debug: Afficher la structure compl√®te de la r√©ponse\n                    console.log('üìã R√©ponse QR API compl√®te:', response);\n                    console.log('üìã Structure response.data:', response.data);\n                    \n                    // Construire l'URL compl√®te du QR code\n                    let qrImageUrl = response.data.qrCodeUrl;\n                    \n                    // Si l'URL est relative, la rendre absolue\n                    if (qrImageUrl && qrImageUrl.startsWith('/')) {\n                        qrImageUrl = `${this.config.apiUrl}${qrImageUrl}`;\n                    }\n                    \n                    // V√©rifier si l'URL du QR code existe\n                    if (!qrImageUrl) {\n                        console.warn('‚ö†Ô∏è qrCodeUrl non trouv√© dans la r√©ponse, recherche d\\'alternatives...');\n                        \n                        // Essayer d'autres champs possibles\n                        qrImageUrl = response.data.qr_url || \n                                    response.data.qrUrl || \n                                    response.data.url || \n                                    response.data.image_url ||\n                                    response.data.imageUrl;\n                        \n                        if (qrImageUrl) {\n                            console.log('‚úÖ URL QR trouv√©e dans un champ alternatif:', qrImageUrl);\n                        } else {\n                            console.error('‚ùå Aucune URL QR trouv√©e dans la r√©ponse');\n                            throw new Error('URL du QR code non trouv√©e dans la r√©ponse API');\n                        }\n                    }\n                    \n                    this.currentQRUrl = qrImageUrl;\n                    \n                    console.log('‚úÖ QR code g√©n√©r√© par API principale:', qrImageUrl);\n                    console.log('üìÑ Contenu QR final:', qrContent);\n                    console.log('üè∑Ô∏è Label QR:', response.data.label || 'N/A');\n                    console.log('üÜî Session ID:', response.data.sessionId || 'N/A');\n                    \n                    // Afficher le QR code\n                    this.displayQRCode(containerId, qrImageUrl, this.config.type, options);\n                    \n                    this.startAutoRefresh(containerId, this.config.type, options);\n                    \n                    // √âmettre un √©v√©nement WebSocket pour la g√©n√©ration du QR\n                    this.emitWebSocketEvent('qr_generated', {\n                        type: this.config.type,\n                        qrCodeUrl: qrImageUrl,\n                        socketId: socketId,\n                        qrContent: qrContent,\n                        label: response.data.label,\n                        sessionId: response.data.sessionId,\n                        timestamp: Date.now()\n                    });\n                    \n                    return {\n                        ...response.data,\n                        qrCodeUrl: qrImageUrl,\n                        qrContent: qrContent,\n                        label: response.data.label,\n                        sessionId: response.data.sessionId\n                    };\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la g√©n√©ration du QR code');\n                }\n            } catch (error) {\n                console.error('Erreur API d√©tect√©e:', error.message);\n                console.error('Stack trace complet:', error.stack);\n                console.error('Configuration SDK:', {\n                    apiUrl: this.config.apiUrl,\n                    type: this.config.type,\n                    secureInit: this.config.secureInit,\n                    clientId: this.config.clientId ? '***' + this.config.clientId.slice(-4) : 'null',\n                    secretId: this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null'\n                });\n                \n                // Fallback vers le service local seulement si activ√©\n                if (this.config.useLocalFallback) {\n                    console.log('üîç V√©rification fallback local...');\n                    console.log('üîç Hostname:', window.location.hostname);\n                    console.log('üîç Protocol:', window.location.protocol);\n                    console.log('üîç URL compl√®te:', window.location.href);\n                    \n                    const isLocal = window.location.hostname === 'localhost' || \n                                   window.location.hostname === '127.0.0.1' || \n                                   window.location.protocol === 'file:';\n                    \n                    console.log('üîç Est local:', isLocal);\n                    \n                    if (isLocal) {\n                        console.log('üîÑ Tentative fallback vers service QR local...');\n                        console.log('‚ùå Fallback local non impl√©ment√© - utilisation serveur distant uniquement');\n                    } else {\n                        console.log('‚ùå Pas en local, pas de fallback');\n                    }\n                } else {\n                    console.log('üîí Fallback local d√©sactiv√©, utilisation serveur distant uniquement');\n                }\n                \n                console.log('Affichage du message \"Service non disponible\" pour type ' + this.config.type);\n                this.displayServiceUnavailable(containerId, this.config.type);\n                throw new Error('Service non disponible');\n            }\n        }\n\n\n\n        /**\n         * G√©n√©rer un QR code avec un type personnalis√©\n         */\n        async generateCustomQR(containerId, type, options = {}) {\n            // Attendre l'initialisation si n√©cessaire\n            if (this.initPromise) {\n                await this.initPromise;\n                this.initPromise = null;\n            }\n            \n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-generate', {\n                    type: type, // Type personnalis√© (1, 2, 3, etc.)\n                    ...options\n                });\n\n                if (response.success) {\n                    // Construire l'URL compl√®te de l'image QR avec la base URL pour les images\n                    const imageBaseUrl = 'https://sunuid.fayma.sn';\n                    const qrImageUrl = `${imageBaseUrl}${response.data.qrcode}`;\n                    this.displayQRCode(containerId, qrImageUrl, type, options);\n                    \n                    // Le QR code est d√©j√† g√©n√©r√© par l'API principale\n                    console.log('‚úÖ QR code personnalis√© g√©n√©r√© par API principale:', qrImageUrl);\n                    console.log('üìÑ Code de session:', response.data.code);\n                    console.log('üÜî Service ID:', response.data.service_id);\n                    \n                    this.startAutoRefresh(containerId, type, options);\n                    return {\n                        ...response.data,\n                        qrCodeUrl: qrImageUrl,\n                        sessionId: response.data.service_id\n                    };\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la g√©n√©ration du QR code');\n                }\n            } catch (error) {\n                console.error('Erreur API d√©tect√©e:', error.message);\n                console.error('Stack trace complet:', error.stack);\n                console.error('Configuration SDK (Custom):', {\n                    apiUrl: this.config.apiUrl,\n                    type: type,\n                    secureInit: this.config.secureInit,\n                    clientId: this.config.clientId ? '***' + this.config.clientId.slice(-4) : 'null',\n                    secretId: this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null'\n                });\n                console.log('Affichage du message \"Service non disponible\" pour type ' + type);\n                this.displayServiceUnavailable(containerId, type);\n                throw new Error('Service non disponible');\n            }\n        }\n\n        // Alias pour maintenir la compatibilit√©\n        async generateAuthQR(containerId, options = {}) {\n            return this.generateQR(containerId, options);\n        }\n\n        async generateKYCQR(containerId, options = {}) {\n            // Sauvegarder le type actuel\n            const originalType = this.config.type;\n            // Changer temporairement le type pour KYC\n            this.config.type = 1;\n            try {\n                return await this.generateQR(containerId, options);\n            } finally {\n                // Restaurer le type original\n                this.config.type = originalType;\n            }\n        }\n\n        async generateSignatureQR(containerId, options = {}) {\n            // Sauvegarder le type actuel\n            const originalType = this.config.type;\n            // Changer temporairement le type pour Signature\n            this.config.type = 3;\n            try {\n                return await this.generateQR(containerId, options);\n            } finally {\n                // Restaurer le type original\n                this.config.type = originalType;\n            }\n        }\n\n        /**\n         * V√©rifier le statut d'un QR code\n         */\n        async checkQRStatus(sessionId) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-status', {\n                    serviceId: sessionId\n                });\n\n                if (response.success) {\n                    return response.data;\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la v√©rification du statut');\n                }\n            } catch (error) {\n                this.handleError(error);\n                throw error;\n            }\n        }\n\n        /**\n         * G√©n√©rer un QR code avec un contenu sp√©cifique\n         */\n        async generateQRWithContent(content, containerId, type, options = {}) {\n            console.log('üé® G√©n√©ration QR avec contenu:', content);\n            \n            try {\n                // Essayer d'abord le service QR local\n                if (window.location.hostname === 'localhost' || \n                    window.location.hostname === '127.0.0.1' || \n                    window.location.protocol === 'file:') {\n                    \n                    console.log('üè† Utilisation service QR local...');\n                    const localQRUrl = await this.generateQRLocal(content, containerId, type, options);\n                    if (localQRUrl) {\n                        return localQRUrl;\n                    }\n                }\n                \n                // Fallback vers le service QR distant\n                console.log('üåê Utilisation service QR distant...');\n                return await this.generateQRRemote(content, containerId, type, options);\n                \n            } catch (error) {\n                console.error('‚ùå Erreur g√©n√©ration QR:', error);\n                // Fallback vers affichage simple du contenu\n                this.displayQRContent(containerId, content, type, options);\n                return null;\n            }\n        }\n        \n        /**\n         * G√©n√©rer QR code avec service local\n         */\n        async generateQRLocal(content, containerId, type, options = {}) {\n            try {\n                const response = await fetch('http://localhost:8000/api/generate/text', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/x-www-form-urlencoded'\n                    },\n                    body: `text=${encodeURIComponent(content)}&size=300`\n                });\n                \n                if (response.ok) {\n                    const data = await response.json();\n                    const qrUrl = `data:image/png;base64,${data.qrcode}`;\n                    this.displayQRCode(containerId, qrUrl, type, options);\n                    return qrUrl;\n                }\n            } catch (error) {\n                console.log('‚ùå Service QR local non disponible:', error.message);\n            }\n            return null;\n        }\n        \n        /**\n         * G√©n√©rer QR code avec service distant\n         */\n        async generateQRRemote(content, containerId, type, options = {}) {\n            try {\n                const response = await fetch('https://api.sunuid.fayma.sn/qr-generate', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        text: content,\n                        size: 300,\n                        type: type\n                    })\n                });\n                \n                if (response.ok) {\n                    const data = await response.json();\n                    const qrUrl = `data:image/png;base64,${data.qrcode}`;\n                    this.displayQRCode(containerId, qrUrl, type, options);\n                    return qrUrl;\n                }\n            } catch (error) {\n                console.error('‚ùå Erreur service QR distant:', error);\n            }\n            \n            // Fallback vers affichage du contenu\n            this.displayQRContent(containerId, content, type, options);\n            return null;\n        }\n        \n        /**\n         * Afficher le contenu QR en texte (fallback)\n         */\n        displayQRContent(containerId, content, type, options = {}) {\n            const container = document.getElementById(containerId);\n            if (!container) {\n                throw new Error(`Conteneur avec l'ID \"${containerId}\" non trouv√©`);\n            }\n\n            const typeName = this.getTypeName(type);\n            container.innerHTML = `\n                <div class=\"sunuid-qr-code\">\n                    <div class=\"sunuid-qr-header\">\n                        <h3>${typeName}</h3>\n                    </div>\n                    <div class=\"sunuid-qr-content\" style=\"text-align: center; padding: 20px; background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 5px; margin: 10px 0;\">\n                        <p><strong>Contenu QR Code:</strong></p>\n                        <p style=\"font-family: monospace; font-size: 14px; word-break: break-all;\">${content}</p>\n                    </div>\n                    <div class=\"sunuid-qr-instructions\">\n                        <p>Contenu QR g√©n√©r√© avec le format: {type}-{code}-{socketid}</p>\n                    </div>\n                </div>\n            `;\n            \n            console.log('‚úÖ Contenu QR affich√©:', content);\n        }\n        \n        /**\n         * Afficher un QR code dans un conteneur\n         */\n        displayQRCode(containerId, qrUrl, type, options = {}) {\n            const container = document.getElementById(containerId);\n            if (!container) {\n                throw new Error(`Conteneur avec l'ID \"${containerId}\" non trouv√©`);\n            }\n\n            // Nettoyer le conteneur\n            container.innerHTML = '';\n\n            // Cr√©er l'√©l√©ment QR code\n            const qrElement = document.createElement('div');\n            qrElement.className = 'sunuid-qr-code';\n            \n            // Afficher l'image QR avec les informations\n            const typeName = this.getTypeName(type);\n            qrElement.innerHTML = `\n                <div class=\"sunuid-qr-header\">\n                    <h3>${type === 1 ? 'V√©rification KYC' : type === 2 ? 'Authentification' : type === 3 ? 'Signature' : 'Service Type ' + type}</h3>\n                </div>\n                <div class=\"sunuid-qr-image\">\n                    <img src=\"${qrUrl}\" alt=\"QR Code ${typeName}\" style=\"max-width: 300px; border: 1px solid #ddd; border-radius: 5px;\" />\n                </div>\n               \n            `;\n\n            container.appendChild(qrElement);\n\n            // Appliquer le th√®me\n            this.applyTheme(options.theme || this.config.theme);\n            \n            console.log('‚úÖ QR code affich√©:', qrUrl);\n        }\n\n        /**\n         * G√©n√©rer un QR code personnalis√© avec PHP Endroid\n         */\n        async generateCustomQRCode(content, label, options = {}) {\n            console.log('üé® D√©but g√©n√©ration QR personnalis√©...');\n            console.log('üìÑ Contenu:', content);\n            console.log('üè∑Ô∏è Label:', label);\n            \n            // Chercher le conteneur QR\n            let qrContainer = document.getElementById('sunuid-qr-container');\n            if (!qrContainer) {\n                qrContainer = document.getElementById('qr-container');\n            }\n            if (!qrContainer) {\n                console.error('‚ùå QR container not found');\n                return;\n            }\n            \n            console.log('‚úÖ QR container trouv√©');\n\n            // Nettoyer le conteneur\n            qrContainer.innerHTML = '<div style=\"text-align: center; padding: 20px;\"><p>G√©n√©ration QR code...</p></div>';\n\n                         try {\n                 // Utiliser directement l'API principale (plus fiable)\n                 console.log('üé® Tentative g√©n√©ration via API principale...');\n                 await this.generateQRPHP(content, label, qrContainer);\n                 console.log('‚úÖ QR code g√©n√©r√© avec succ√®s');\n                 \n             } catch (error) {\n                 console.error('‚ùå Erreur g√©n√©ration API:', error);\n                 \n                 // Fallback final : image par d√©faut\n                 console.log('‚ö†Ô∏è Affichage image par d√©faut');\n                 this.displayDefaultQR(qrContainer, content, label);\n             }\n        }\n\n        /**\n         * G√©n√©rer un QR code c√¥t√© client (m√©thode principale)\n         */\n        async generateQRClientSide(content, label, qrContainer) {\n            // Charger QRCode si n√©cessaire\n            await this.ensureQRCodeLibrary();\n            \n            if (typeof QRCode === 'undefined') {\n                throw new Error('QRCode library non disponible');\n            }\n            \n            // Cr√©er un canvas\n            const canvas = document.createElement('canvas');\n            canvas.width = 300;\n            canvas.height = 320;\n            const ctx = canvas.getContext('2d');\n            \n            // Fond blanc\n            ctx.fillStyle = '#FFFFFF';\n            ctx.fillRect(0, 0, 300, 320);\n            \n            // G√©n√©rer le QR code\n            return new Promise((resolve, reject) => {\n                QRCode.toCanvas(canvas, content, {\n                    width: 280,\n                    margin: 10,\n                    color: {\n                        dark: '#000000',\n                        light: '#FFFFFF'\n                    }\n                }, (error) => {\n                    if (error) {\n                        reject(error);\n                        return;\n                    }\n                    \n                    // Ajouter le label\n                    ctx.fillStyle = '#333333';\n                    ctx.font = 'bold 14px Arial';\n                    ctx.textAlign = 'center';\n                    ctx.fillText(label, 150, 305);\n                    \n                    // Convertir en data URL\n                    const dataUrl = canvas.toDataURL('image/png');\n                    \n                    // Stocker l'URL\n                    this.currentQRUrl = dataUrl;\n                    \n                    // Afficher le QR code\n                    qrContainer.innerHTML = `\n                        <div style=\"text-align: center; padding: 20px;\">\n                            <img src=\"${dataUrl}\" alt=\"QR Code\" style=\"max-width: 300px; border: 2px solid #ddd; border-radius: 10px;\">\n                        </div>\n                    `;\n                    \n                    // Afficher les instructions\n                    this.showQRInstructions(qrContainer);\n                    \n                    resolve();\n                });\n            });\n        }\n\n        /**\n         * G√©n√©rer un QR code via endpoint PHP (fallback)\n         */\n        async generateQRPHP(content, label, qrContainer) {\n                         // Construire l'URL - Utiliser l'API principale qui fonctionne\n             let qrGeneratorUrl;\n             if (this.config.forceRemoteServer) {\n                 qrGeneratorUrl = 'https://api.sunuid.fayma.sn/qr-generate';\n             } else if (this.config.apiUrl.includes('api.sunuid.fayma.sn')) {\n                 qrGeneratorUrl = 'https://api.sunuid.fayma.sn/qr-generate';\n             } else if (this.config.apiUrl.includes('localhost') || this.config.apiUrl.includes('127.0.0.1')) {\n                 qrGeneratorUrl = 'http://localhost:8000/api/generate/text';\n             } else {\n                 qrGeneratorUrl = this.config.apiUrl + '/qr-generate';\n             }\n            \n            console.log('üîó URL QR Generator:', qrGeneratorUrl);\n            \n                         // Adapter le format selon l'URL\n             let requestBody;\n             let contentType;\n             \n             if (qrGeneratorUrl.includes('localhost:8000')) {\n                 // Service local - format form-data\n                 contentType = 'application/x-www-form-urlencoded';\n                 requestBody = new URLSearchParams({\n                     text: content,\n                     size: 300,\n                     margin: 10,\n                     foreground_color: '000000',\n                     background_color: 'FFFFFF'\n                 });\n             } else {\n                 // Service distant - format JSON avec les param√®tres de l'API principale\n                 contentType = 'application/json';\n                 requestBody = JSON.stringify({\n                     type: this.config.type,\n                     client_id: this.config.clientId,\n                     secret_id: this.config.secretId,\n                     content: content,\n                     label: label\n                 });\n             }\n             \n             const response = await fetch(qrGeneratorUrl, {\n                 method: 'POST',\n                 headers: {\n                     'Content-Type': contentType,\n                     'Accept': 'application/json'\n                 },\n                 body: requestBody\n             });\n            \n            if (!response.ok) {\n                throw new Error(`Erreur HTTP: ${response.status}`);\n            }\n            \n            const responseData = await response.json();\n            \n                         if (!responseData.success) {\n                 throw new Error(`Erreur QR: ${responseData.error}`);\n             }\n             \n             // Adapter selon le format de r√©ponse\n             let qrImageUrl;\n             if (qrGeneratorUrl.includes('localhost:8000')) {\n                 // Service local\n                 qrImageUrl = responseData.data_uri;\n             } else {\n                 // Service distant - utiliser le format de l'API principale\n                 const imageBaseUrl = 'https://sunuid.fayma.sn';\n                 qrImageUrl = `${imageBaseUrl}${responseData.data.qrcode}`;\n             }\n             \n             // Stocker l'URL\n             this.currentQRUrl = qrImageUrl;\n             \n             // Afficher le QR code\n             qrContainer.innerHTML = `\n                 <div style=\"text-align: center; padding: 20px;\">\n                     <img src=\"${qrImageUrl}\" alt=\"QR Code\" style=\"max-width: 300px; border: 2px solid #ddd; border-radius: 10px;\">\n                 </div>\n             `;\n            \n            // Afficher les instructions\n            this.showQRInstructions(qrContainer);\n        }\n\n        /**\n         * Afficher une image QR par d√©faut (fallback final)\n         */\n        displayDefaultQR(qrContainer, content, label) {\n            qrContainer.innerHTML = `\n                <div style=\"text-align: center; padding: 20px; color: #666;\">\n                    <div style=\"width: 300px; height: 300px; background: #f0f0f0; border: 2px solid #ddd; border-radius: 10px; display: flex; align-items: center; justify-content: center; margin: 0 auto;\">\n                        <div>\n                            <p style=\"font-size: 24px; margin: 0;\">üì±</p>\n                            <p style=\"font-size: 14px; margin: 10px 0 0 0;\">QR Code</p>\n                        </div>\n                    </div>\n                    <p style=\"margin-top: 10px; font-size: 12px;\">${label}</p>\n                    <p style=\"font-size: 10px; color: #999; margin-top: 5px;\">Contenu: ${content}</p>\n                </div>\n            `;\n        }\n\n        /**\n         * S'assurer que la biblioth√®que QRCode est disponible\n         */\n        async ensureQRCodeLibrary() {\n            if (typeof QRCode !== 'undefined') {\n                console.log('‚úÖ QRCode library d√©j√† disponible');\n                return true;\n            }\n            \n            console.log('üì¶ Chargement QRCode library...');\n            \n            return new Promise((resolve, reject) => {\n                const script = document.createElement('script');\n                script.src = 'https://cdn.jsdelivr.net/npm/qrcode@1.5.3/lib/browser.min.js';\n                script.onload = () => {\n                    setTimeout(() => {\n                        if (typeof QRCode !== 'undefined') {\n                            console.log('‚úÖ QRCode library charg√©e');\n                            resolve(true);\n                        } else {\n                            console.error('‚ùå QRCode non disponible apr√®s chargement');\n                            reject(new Error('QRCode library non disponible apr√®s chargement'));\n                        }\n                    }, 200);\n                };\n                script.onerror = () => {\n                    console.error('‚ùå Erreur chargement QRCode library');\n                    reject(new Error('Erreur chargement QRCode library'));\n                };\n                document.head.appendChild(script);\n            });\n        }\n\n        /**\n         * Afficher les instructions pour le QR code\n         */\n        showQRInstructions(qrContainer) {\n            const instructionsElement = qrContainer.parentElement.querySelector('.sunuid-qr-instructions');\n            const statusElement = qrContainer.parentElement.querySelector('.sunuid-qr-status');\n            \n            if (instructionsElement) {\n                instructionsElement.style.display = 'block';\n                instructionsElement.classList.add('sunuid-qr-ready');\n            }\n            if (statusElement) {\n                statusElement.style.display = 'block';\n                statusElement.classList.add('sunuid-qr-ready');\n            }\n        }\n\n        /**\n         * Ajouter le logo au centre du QR code\n         */\n        addLogoToCenter(ctx, x, y, width, height) {\n            try {\n                // Cr√©er une image pour le logo\n                const logo = new Image();\n                logo.onload = () => {\n                    const logoSize = 40;\n                    const logoX = x + (width - logoSize) / 2;\n                    const logoY = y + (width - logoSize) / 2;\n\n                    // Dessiner un fond blanc pour le logo\n                    ctx.fillStyle = 'white';\n                    ctx.fillRect(logoX - 2, logoY - 2, logoSize + 4, logoSize + 4);\n\n                    // Dessiner le logo\n                    ctx.drawImage(logo, logoX, logoY, logoSize, logoSize);\n                };\n                logo.src = 'src/logoqr.png';\n            } catch (error) {\n                console.warn('Logo non disponible:', error);\n            }\n        }\n\n        /**\n         * Afficher l'image de fallback\n         */\n        displayFallbackImage() {\n            console.log('‚ö†Ô∏è Affichage de l\\'image de fallback');\n            const qrContainer = document.getElementById('sunuid-qr-container');\n            if (qrContainer) {\n                qrContainer.innerHTML = `\n                    <div style=\"text-align: center; padding: 20px; color: #666;\">\n                        <p>‚ö†Ô∏è G√©n√©ration QR personnalis√© non disponible</p>\n                        <p>Utilisation de l'image par d√©faut</p>\n                        <p><strong>Debug:</strong> QRCode disponible: ${typeof QRCode !== 'undefined'}</p>\n                        <p><strong>Debug:</strong> Container trouv√©: ${qrContainer !== null}</p>\n                    </div>\n                `;\n            }\n        }\n\n        /**\n         * Afficher \"Service non disponible\"\n         */\n        displayServiceUnavailable(containerId, type) {\n            console.log(`displayServiceUnavailable appel√©e pour ${containerId}, type: ${type}`);\n            const container = document.getElementById(containerId);\n            if (!container) {\n                console.error(`Container ${containerId} non trouv√©`);\n                return;\n            }\n\n            container.innerHTML = `\n                <div class=\"sunuid-service-unavailable\" style=\"\n                    text-align: center;\n                    padding: 40px 20px;\n                    background: #f8f9fa;\n                    border: 2px dashed #dee2e6;\n                    border-radius: 10px;\n                    color: #6c757d;\n                    font-family: Arial, sans-serif;\n                \">\n                    <div style=\"font-size: 48px; margin-bottom: 20px;\">‚ö†Ô∏è</div>\n                    <h3 style=\"margin: 0 0 10px 0; color: #495057;\">Service Non Disponible</h3>\n                    <p style=\"margin: 0; font-size: 14px;\">\n                        Le service d'authentification est temporairement indisponible.<br>\n                        Veuillez r√©essayer plus tard.\n                    </p>\n                    <div style=\"margin-top: 20px; font-size: 12px; color: #adb5bd;\">\n                        Type: ${String(type).toUpperCase()}\n                    </div>\n                </div>\n            `;\n        }\n\n        /**\n         * Rafra√Æchir un QR code\n         */\n        async refreshQR(containerId, options = {}) {\n            try {\n                // V√©rifier si on a d√©j√† un QR code g√©n√©r√©\n                if (this.currentQRUrl) {\n                    console.log('üîÑ V√©rification du statut du QR code existant...');\n                    \n                    // Option 1: V√©rifier le statut du QR code via l'API\n                    // (√† impl√©menter si l'API le supporte)\n                    \n                    // Option 2: R√©g√©n√©rer le QR code seulement si n√©cessaire\n                    // Pour l'instant, on r√©g√©n√®re pour s'assurer qu'il est √† jour\n                    const result = await this.generateQR(containerId, options);\n                    return result;\n                } else {\n                    console.log('üîÑ Pas de QR code existant, g√©n√©ration d\\'un nouveau...');\n                    const result = await this.generateQR(containerId, options);\n                    return result;\n                }\n            } catch (error) {\n                console.error('Erreur lors du rafra√Æchissement:', error.message);\n                this.displayServiceUnavailable(containerId, this.config.type);\n                throw error;\n            }\n        }\n\n        /**\n         * D√©marrer le rafra√Æchissement automatique\n         */\n        startAutoRefresh(containerId, type, options) {\n            if (!this.config.autoRefresh) return;\n\n            // Arr√™ter le timer existant s'il y en a un\n            if (this.refreshTimer) {\n                clearInterval(this.refreshTimer);\n                console.log('üîÑ Timer de rafra√Æchissement pr√©c√©dent arr√™t√©');\n            }\n\n            this.refreshTimer = setInterval(async () => {\n                try {\n                    console.log('üîÑ Rafra√Æchissement automatique du QR code...');\n                    await this.refreshQR(containerId, type, options);\n                } catch (error) {\n                    console.warn('Erreur lors du rafra√Æchissement automatique:', error);\n                }\n            }, this.config.refreshInterval);\n            \n            console.log(`üîÑ Timer de rafra√Æchissement d√©marr√© (${this.config.refreshInterval}ms)`);\n        }\n\n        /**\n         * D√©marrer le timer de compte √† rebours\n         */\n\n\n        /**\n         * Effectuer une requ√™te API s√©curis√©e\n         */\n        async makeRequest(endpoint, data) {\n            // Validation de s√©curit√©\n            if (!this.isInitialized) {\n                this.logSecurityEvent('REQUEST_BEFORE_INIT', { endpoint });\n                throw new Error('SDK non initialis√©');\n            }\n\n            // V√©rifier les limites de requ√™tes pour l'initialisation s√©curis√©e\n            if (this.config.secureInit) {\n                this.config.requestCount++;\n                if (this.config.requestCount > this.config.maxRequests) {\n                    this.logSecurityEvent('API_REQUEST_LIMIT_EXCEEDED', { \n                        requestCount: this.config.requestCount,\n                        maxRequests: this.config.maxRequests \n                    });\n                    throw new Error('Limite de requ√™tes d√©pass√©e');\n                }\n            }\n\n            // Sanitisation des donn√©es\n            const sanitizedData = this.sanitizeRequestData(data);\n            \n            // Debug: Afficher les donn√©es envoy√©es\n            console.log('üîç Debug makeRequest - endpoint:', endpoint);\n            console.log('üîç Debug makeRequest - apiUrl:', this.config.apiUrl);\n            console.log('üîç Debug makeRequest - url:', `${this.config.apiUrl}${endpoint}`);\n            console.log('üîç Debug makeRequest - data:', JSON.stringify(sanitizedData, null, 2));\n            console.log('üîç Debug makeRequest - secureInit:', this.config.secureInit);\n            console.log('üîç Debug makeRequest - isInitialized:', this.isInitialized);\n            \n            // Utiliser l'endpoint depuis la configuration si disponible\n            const endpointPath = window.SunuIDConfig?.endpoints?.[endpoint.replace('/', '')] || endpoint;\n            const url = `${this.config.apiUrl}${endpointPath}`;\n            \n            // Debug: Afficher l'URL finale\n            console.log('üîç URL finale construite:', url);\n            console.log('üîç EndpointPath:', endpointPath);\n            console.log('üîç SunuIDConfig endpoints:', JSON.stringify(window.SunuIDConfig?.endpoints));\n            \n            // Log de s√©curit√© pour la requ√™te\n            this.logSecurityEvent('API_REQUEST_START', {\n                endpoint: endpointPath,\n                url: url,\n                dataKeys: Object.keys(sanitizedData),\n                secureInit: this.config.secureInit\n            });\n            \n            let retryCount = 0;\n            const maxRetries = this.config.maxRetries;\n            \n            while (retryCount <= maxRetries) {\n                try {\n                    const controller = new AbortController();\n                    const timeoutId = setTimeout(() => controller.abort(), this.config.requestTimeout);\n                    \n                    // Headers minimaux (API SunuID n'accepte que les headers essentiels)\n                    const headers = {\n                        'Content-Type': 'application/json'\n                    };\n\n                    // Note: En mode s√©curis√©, les credentials sont dans le body\n                    // Pas besoin d'ajouter de header sp√©cial pour √©viter les probl√®mes CORS\n                    // if (this.config.secureInit && this.config.token) {\n                    //     headers['X-Secure-Token'] = this.config.token;\n                    // }\n                    \n                    const response = await fetch(url, {\n                        method: 'POST',\n                        headers: headers,\n                        body: JSON.stringify(sanitizedData),\n                        signal: controller.signal\n                    });\n\n                    clearTimeout(timeoutId);\n\n                    if (!response.ok) {\n                        const errorText = await response.text();\n                        let errorData;\n                        try {\n                            errorData = JSON.parse(errorText);\n                        } catch (e) {\n                            errorData = { message: errorText };\n                        }\n                        \n                        this.logSecurityEvent('API_REQUEST_ERROR', {\n                            status: response.status,\n                            statusText: response.statusText,\n                            error: errorData.message\n                        });\n                        \n                        throw new Error(errorData.message || `Erreur HTTP: ${response.status}`);\n                    }\n\n                    const result = await response.json();\n                    \n                    this.logSecurityEvent('API_REQUEST_SUCCESS', {\n                        endpoint: endpointPath,\n                        responseKeys: Object.keys(result)\n                    });\n                    \n                    return result;\n                    \n                } catch (error) {\n                    retryCount++;\n                    \n                    if (error.name === 'AbortError') {\n                        this.logSecurityEvent('API_REQUEST_TIMEOUT', { retryCount });\n                        if (retryCount > maxRetries) {\n                            throw new Error('Timeout de la requ√™te API');\n                        }\n                        continue;\n                    }\n                    \n                    if (retryCount > maxRetries) {\n                        this.logSecurityEvent('API_REQUEST_MAX_RETRIES', { \n                            retryCount, \n                            error: error.message \n                        });\n                        throw error;\n                    }\n                    \n                    // Attendre avant de r√©essayer\n                    await new Promise(resolve => setTimeout(resolve, 1000 * retryCount));\n                }\n            }\n        }\n\n        /**\n         * Sanitisation des donn√©es de requ√™te\n         */\n        sanitizeRequestData(data) {\n            const sanitized = {};\n            \n            // D'abord, copier tous les champs de data\n            for (const [key, value] of Object.entries(data)) {\n                if (typeof value === 'string') {\n                    sanitized[key] = this.sanitizeInput(value);\n                } else if (typeof value === 'object' && value !== null) {\n                    sanitized[key] = this.sanitizeRequestData(value);\n                } else {\n                    sanitized[key] = value;\n                }\n            }\n            \n            // Ensuite, ajouter/√©craser les credentials (API SunuID les attend ici)\n            // Utiliser les vraies valeurs (originales) si disponibles, sinon les valeurs directes\n            sanitized.client_id = this.config.originalClientId || this.config.clientId;\n            sanitized.secret_id = this.config.originalSecretId || this.config.secretId;\n            \n            // Debug: V√©rifier les credentials et les donn√©es\n            console.log('üîç Credentials dans sanitizeRequestData - clientId:', this.config.clientId);\n            console.log('üîç Credentials dans sanitizeRequestData - secretId:', this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null');\n            console.log('üîç Credentials dans sanitizeRequestData - sanitizedClientId:', sanitized.client_id);\n            console.log('üîç Credentials dans sanitizeRequestData - sanitizedSecretId:', sanitized.secret_id ? '***' + sanitized.secret_id.slice(-4) : 'null');\n            console.log('üîç Credentials dans sanitizeRequestData - data complet:', JSON.stringify(sanitized, null, 2));\n            \n            return sanitized;\n        }\n\n        /**\n         * G√©n√©rer un ID de requ√™te unique\n         */\n        generateRequestId() {\n            return 'req_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n        }\n\n        /**\n         * G√©n√©rer un code de session unique\n         */\n        generateSessionCode() {\n            const timestamp = Date.now();\n            const random = Math.random().toString(36).substr(2, 9);\n            const code = `${timestamp}_${random}`;\n            return btoa(code); // Encoder en base64\n        }\n\n        /**\n         * R√©cup√©rer les informations du partenaire depuis l'API\n         */\n        async fetchPartnerInfo() {\n            try {\n                const response = await this.makeRequest('/debug', {\n                    type: this.config.type,\n                    client_id: this.config.clientId,\n                    secret_id: this.config.secretId\n                });\n\n                console.log('üìã R√©ponse debug API:', response);\n\n                // V√©rifier la structure de la r√©ponse\n                if (response.success && response.data) {\n                    const data = response.data;\n                    \n                    // Essayer de r√©cup√©rer le partner_id depuis diff√©rentes structures possibles\n                    let partnerId = null;\n                    \n                    if (data.partner_id) {\n                        partnerId = data.partner_id;\n                    } else if (data.authentication && data.authentication.auth_test && data.authentication.auth_test.partner_id) {\n                        partnerId = data.authentication.auth_test.partner_id;\n                    } else if (data.auth_test && data.auth_test.partner_id) {\n                        partnerId = data.auth_test.partner_id;\n                    }\n                    \n                    if (partnerId) {\n                        this.config.partnerId = partnerId;\n                        \n                        // R√©cup√©rer le service_id depuis la r√©ponse\n                        if (data.service_id) {\n                            this.config.serviceId = data.service_id;\n                        } else {\n                            // Fallback: utiliser le partner_id comme service_id\n                            this.config.serviceId = partnerId;\n                        }\n                        \n                        // Utiliser le partner_id pour d√©terminer le nom du partenaire\n                        if (partnerId === 21) {\n                            this.config.partnerName = 'Fayma';\n                        } else {\n                            this.config.partnerName = `Partner_${partnerId}`;\n                        }\n                        \n                        console.log('‚úÖ Informations partenaire r√©cup√©r√©es:', {\n                            partnerName: this.config.partnerName,\n                            partnerId: this.config.partnerId,\n                            serviceId: this.config.serviceId\n                        });\n                    } else {\n                        console.warn('‚ö†Ô∏è Partner ID non trouv√© dans la r√©ponse, utilisation du partner_id par d√©faut');\n                        this.config.partnerName = `Partner_${this.config.partnerId || 'unknown'}`;\n                    }\n                } else {\n                    console.warn('‚ö†Ô∏è Structure de r√©ponse invalide, utilisation du partner_id par d√©faut');\n                    this.config.partnerName = `Partner_${this.config.partnerId || 'unknown'}`;\n                }\n            } catch (error) {\n                console.warn('‚ö†Ô∏è Erreur lors de la r√©cup√©ration des informations du partenaire:', error.message);\n                this.config.partnerName = 'Partner_unknown';\n            }\n        }\n\n        /**\n         * Appliquer le th√®me\n         */\n        applyTheme(theme) {\n            const container = document.querySelector('.sunuid-qr-code');\n            if (container) {\n                container.className = `sunuid-qr-code sunuid-theme-${theme}`;\n            }\n        }\n\n        /**\n         * G√©rer les erreurs\n         */\n        handleError(error) {\n            console.error('SunuID SDK Error:', error);\n            \n            if (this.config.onError) {\n                this.config.onError(error);\n            }\n        }\n\n        /**\n         * V√©rifier le statut des connexions\n         */\n        async checkConnections() {\n            const status = {\n                api: false,\n                websocket: false,\n                ready: false\n            };\n            \n            // V√©rifier l'API en utilisant l'endpoint debug avec les credentials\n            try {\n                const testResponse = await fetch(this.config.apiUrl + '/debug', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        type: this.config.type,\n                        client_id: this.config.clientId,\n                        secret_id: this.config.secretId\n                    })\n                });\n                \n                if (testResponse.ok) {\n                    const debugData = await testResponse.json();\n                    // L'API est accessible si on re√ßoit une r√©ponse avec success: true\n                    status.api = debugData.success === true;\n                    console.log('üîç API Status:', status.api ? 'accessible' : 'inaccessible');\n                } else {\n                    status.api = false;\n                    console.log('üîç API Status: HTTP', testResponse.status);\n                }\n            } catch (error) {\n                console.log('üîç Test API √©chou√©:', error.message);\n                status.api = false;\n            }\n            \n            // V√©rifier le WebSocket\n            status.websocket = this.socket && this.socket.connected;\n            \n            // Connexions pr√™tes si API est accessible\n            status.ready = status.api;\n            \n            return status;\n        }\n        \n        /**\n         * Attendre que les connexions soient pr√™tes\n         */\n        async waitForConnections(timeout = 5000) {\n            const startTime = Date.now();\n            \n            while (Date.now() - startTime < timeout) {\n                const status = await this.checkConnections();\n                \n                if (status.ready) {\n                    console.log('‚úÖ Connexions pr√™tes');\n                    return status;\n                }\n                \n                console.log('‚è≥ Attente connexions...', status);\n                await new Promise(resolve => setTimeout(resolve, 1000)); // V√©rification toutes les secondes\n            }\n            \n            throw new Error('Timeout connexions - Impossible de g√©n√©rer le QR code');\n        }\n        \n        /**\n         * Obtenir l'URL du QR code g√©n√©r√©\n         */\n        getQRCode() {\n            // Retourner l'URL du QR code si disponible\n            if (this.currentQRUrl) {\n                return this.currentQRUrl;\n            }\n            \n            // Sinon, retourner une URL par d√©faut ou null\n            return null;\n        }\n\n        /**\n         * Nettoyer les ressources\n         */\n        destroy() {\n            this.stopAutoRefresh();\n            \n            // Fermer la connexion WebSocket\n            if (this.socket) {\n                this.socket.disconnect();\n                this.socket = null;\n                console.log('üåê WebSocket d√©connect√©');\n            }\n            \n            this.isInitialized = false;\n            this.logSecurityEvent('SDK_DESTROY');\n            console.log('SunuID SDK d√©truit');\n        }\n\n        /**\n         * Arr√™ter le rafra√Æchissement automatique\n         */\n        stopAutoRefresh() {\n            if (this.refreshTimer) {\n                clearInterval(this.refreshTimer);\n                this.refreshTimer = null;\n                console.log('üîÑ Timer de rafra√Æchissement arr√™t√©');\n            }\n        }\n\n        /**\n         * Obtenir les logs de s√©curit√©\n         */\n        getSecurityLogs() {\n            return window.SunuIDSecurityLogs || [];\n        }\n\n        /**\n         * Nettoyer les logs de s√©curit√©\n         */\n        clearSecurityLogs() {\n            window.SunuIDSecurityLogs = [];\n            this.logSecurityEvent('SECURITY_LOGS_CLEARED');\n        }\n\n        /**\n         * Afficher un loader pendant le scan du QR code\n         */\n        showQRLoader() {\n            console.log('üîÑ Affichage du loader - Scan QR initi√©');\n            \n            // Chercher le conteneur QR dans diff√©rents IDs possibles\n            const containerIds = ['qr-area', 'qr-container', 'sunuid-qr-container'];\n            let container = null;\n            \n            for (const id of containerIds) {\n                container = document.getElementById(id);\n                if (container) break;\n            }\n            \n            if (!container) {\n                console.warn('‚ö†Ô∏è Conteneur QR non trouv√© pour afficher le loader');\n                return;\n            }\n            \n            // Remplacer le contenu par un loader anim√©\n            container.innerHTML = `\n                <div style=\"\n                    text-align: center;\n                    padding: 40px 20px;\n                    background: #f8f9fa;\n                    border: 2px solid #007bff;\n                    border-radius: 10px;\n                    color: #007bff;\n                    font-family: Arial, sans-serif;\n                \">\n                    <div style=\"\n                        width: 60px;\n                        height: 60px;\n                        border: 4px solid #e3f2fd;\n                        border-top: 4px solid #007bff;\n                        border-radius: 50%;\n                        animation: spin 1s linear infinite;\n                        margin: 0 auto 20px auto;\n                    \"></div>\n                    <h3 style=\"margin: 0 0 10px 0; color: #007bff;\">üîç Scan en cours...</h3>\n                    <p style=\"margin: 0; font-size: 14px;\">\n                        Veuillez patienter pendant la v√©rification de votre identit√©.\n                    </p>\n                    <div style=\"margin-top: 15px; font-size: 12px; color: #6c757d;\">\n                        ‚è±Ô∏è Traitement en cours...\n                    </div>\n                </div>\n                <style>\n                    @keyframes spin {\n                        0% { transform: rotate(0deg); }\n                        100% { transform: rotate(360deg); }\n                    }\n                </style>\n            `;\n            \n            console.log('‚úÖ Loader affich√© avec succ√®s');\n        }\n\n        /**\n         * G√©rer le callback SunuID\n         */\n        handleCallback() {\n            const urlParams = new URLSearchParams(window.location.search);\n            \n            // V√©rifier si c'est un callback SunuID\n            if (urlParams.has('token') && urlParams.has('session_id')) {\n                console.log('üîó Callback SunuID d√©tect√©');\n                \n                // R√©cup√©rer les param√®tres\n                const callbackData = {\n                    token: urlParams.get('token'),\n                    state: urlParams.get('state'),\n                    session_id: urlParams.get('session_id'),\n                    user_id: urlParams.get('user_id'),\n                    partner_id: urlParams.get('partner_id'),\n                    type: urlParams.get('type'),\n                    timestamp: urlParams.get('timestamp'),\n                    signature: urlParams.get('signature')\n                };\n                \n                console.log('üìã Donn√©es callback:', callbackData);\n                \n                // Valider le callback\n                this.validateCallback(callbackData);\n                \n                // Traiter l'authentification\n                this.processAuthentication(callbackData);\n                \n                return true;\n            }\n            \n            return false;\n        }\n\n        /**\n         * Valider le callback\n         */\n        validateCallback(data) {\n            console.log('üîí Validation du callback...');\n            \n            // V√©rifier l'√©tat de s√©curit√©\n            if (data.state && data.state !== this.config.state) {\n                console.error('‚ùå √âtat de s√©curit√© invalide');\n                throw new Error('√âtat de s√©curit√© invalide');\n            }\n            \n            // V√©rifier la signature (si configur√©e)\n            if (data.signature && this.config.verifySignature) {\n                if (!this.verifySignature(data)) {\n                    console.error('‚ùå Signature invalide');\n                    throw new Error('Signature invalide');\n                }\n            }\n            \n            // V√©rifier l'expiration\n            if (data.timestamp && this.isExpired(data.timestamp)) {\n                console.error('‚ùå Token expir√©');\n                throw new Error('Token expir√©');\n            }\n            \n            console.log('‚úÖ Callback valid√© avec succ√®s');\n        }\n\n        /**\n         * Traiter l'authentification\n         */\n        processAuthentication(data) {\n            console.log('üîê Traitement de l\\'authentification...');\n            \n            try {\n                // D√©coder le JWT token\n                const decodedToken = this.decodeJWT(data.token);\n                \n                // V√©rifier les donn√©es utilisateur\n                const userData = {\n                    user_id: decodedToken.user_id || data.user_id,\n                    session_id: decodedToken.session_id || data.session_id,\n                    partner_id: decodedToken.partner_id || data.partner_id,\n                    type: decodedToken.type || data.type,\n                    iat: decodedToken.iat,\n                    exp: decodedToken.exp\n                };\n                \n                console.log('üë§ Donn√©es utilisateur:', userData);\n                \n                // √âmettre l'√©v√©nement de succ√®s\n                this.emitWebSocketEvent('authentication_success', {\n                    userData: userData,\n                    callbackData: data,\n                    timestamp: Date.now()\n                });\n                \n                // Appeler le callback de succ√®s\n                if (this.config.onAuthenticationSuccess) {\n                    this.config.onAuthenticationSuccess(userData, data);\n                }\n                \n                // Rediriger si configur√©\n                if (this.config.redirectAfterSuccess) {\n                    this.redirectAfterSuccess(userData);\n                }\n                \n                console.log('‚úÖ Authentification trait√©e avec succ√®s');\n                \n            } catch (error) {\n                console.error('‚ùå Erreur lors du traitement:', error);\n                \n                // Appeler le callback d'erreur\n                if (this.config.onAuthenticationError) {\n                    this.config.onAuthenticationError(error, data);\n                }\n                \n                throw error;\n            }\n        }\n\n        /**\n         * D√©coder un JWT token\n         */\n        decodeJWT(token) {\n            try {\n                // D√©codage simple du JWT (sans v√©rification de signature)\n                const parts = token.split('.');\n                if (parts.length !== 3) {\n                    throw new Error('Format JWT invalide');\n                }\n                \n                const payload = parts[1];\n                const decoded = JSON.parse(atob(payload));\n                \n                return decoded;\n            } catch (error) {\n                console.error('‚ùå Erreur d√©codage JWT:', error);\n                throw new Error('Token JWT invalide');\n            }\n        }\n\n        /**\n         * V√©rifier la signature\n         */\n        verifySignature(data) {\n            // Impl√©mentation basique - √† adapter selon vos besoins\n            const expectedSignature = this.generateSignature(data);\n            return data.signature === expectedSignature;\n        }\n\n        /**\n         * G√©n√©rer une signature\n         */\n        generateSignature(data) {\n            // Impl√©mentation basique - √† adapter selon vos besoins\n            const payload = `${data.token}.${data.state}.${data.session_id}.${data.timestamp}`;\n            return btoa(payload).slice(0, 12); // Signature simplifi√©e\n        }\n\n        /**\n         * V√©rifier l'expiration\n         */\n        isExpired(timestamp) {\n            const currentTime = Math.floor(Date.now() / 1000);\n            const tokenTime = parseInt(timestamp);\n            const maxAge = this.config.tokenMaxAge || 300; // 5 minutes par d√©faut\n            \n            return (currentTime - tokenTime) > maxAge;\n        }\n\n        /**\n         * Rediriger apr√®s succ√®s\n         */\n        redirectAfterSuccess(userData) {\n            let redirectUrl = this.config.redirectAfterSuccess;\n            \n            // Remplacer les variables dans l'URL\n            redirectUrl = redirectUrl\n                .replace('{user_id}', userData.user_id)\n                .replace('{session_id}', userData.session_id)\n                .replace('{partner_id}', userData.partner_id)\n                .replace('{type}', userData.type);\n            \n            console.log('üîÑ Redirection vers:', redirectUrl);\n            \n            // Redirection avec d√©lai pour permettre les callbacks\n            setTimeout(() => {\n                window.location.href = redirectUrl;\n            }, 100);\n        }\n\n        /**\n         * G√©n√©rer un √©tat de s√©curit√©\n         */\n        generateState() {\n            const state = 'sunuid_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n            this.config.state = state;\n            return state;\n        }\n    }\n\n    // Exposer la classe globalement\n    window.SunuID = SunuID;\n    window.sunuidInstance = null;\n\n    // Fonction d'initialisation globale\n    window.initSunuID = function(config) {\n        try {\n            window.sunuidInstance = new SunuID(config);\n            return window.sunuidInstance;\n        } catch (error) {\n            console.error('Erreur lors de l\\'initialisation de SunuID:', error);\n            throw error;\n        }\n    };\n\n})(window); "],"names":["window","_window$SunuIDConfig","_window$SunuIDConfig2","_window$SunuIDConfig3","DEFAULT_CONFIG","apiUrl","SunuIDConfig","clientId","secretId","type","partnerName","theme","language","autoRefresh","refreshInterval","autoInit","onSuccess","onError","onStatusUpdate","onExpired","enableSecurityLogs","validateInputs","maxRetries","requestTimeout","secureInit","secureInitUrl","includes","replace","token","forceRemoteServer","useLocalFallback","redirectAfterSuccess","verifySignature","tokenMaxAge","onAuthenticationSuccess","onAuthenticationError","state","SunuID","_this","this","config","arguments","length","undefined","_classCallCheck","_objectSpread","qrCode","refreshTimer","isInitialized","socket","initPromise","setTimeout","init","key","value","_init","_asyncToGenerator","_regenerator","m","_callee","w","_context","n","console","log","a","_doInit","apply","_doInit2","_callee2","_t","_context2","p","handleCallback","validateSecurityParams","logSecurityEvent","fetchPartnerInfo","obfuscateCredentials","slice","initWebSocket","v","error","message","_secureInit","_callee3","initData","response","result","decodedToken","_t2","_context3","fetch","method","headers","Accept","body","JSON","stringify","ok","Error","concat","status","json","success","data","api_url","decodeSecureToken","client_id","secret_id","expiresIn","expires_in","maxRequests","max_requests","requestCount","parts","split","_parts","_slicedToArray","payload","decodedPayload","atob","tokenData","parse","exp","Date","now","_this2","io","warn","ip","getClientIP","query","userId","username","transports","on","id","connected","reason","handleQRStatusUpdate","handleQRScanSuccess","handleQRExpired","showQRLoader","onAny","eventName","callback","_len","args","Array","_key","errors","push","isValidUrl","join","string","url","URL","protocol","_","event","securityLog","timestamp","toISOString","userAgent","navigator","location","href","SunuIDSecurityLogs","originalClientId","originalSecretId","clientIdDisplay","secretIdDisplay","input","trim","emit","_generateQR","_callee4","containerId","options","connectionStatus","socketId","qrContent","qrImageUrl","isLocal","_t3","_t4","_args4","_context4","waitForConnections","makeRequest","label","getTypeName","qrCodeUrl","startsWith","qr_url","qrUrl","image_url","imageUrl","currentQRUrl","sessionId","displayQRCode","startAutoRefresh","emitWebSocketEvent","stack","hostname","displayServiceUnavailable","_generateCustomQR","_callee5","_t5","_args5","_context5","qrcode","code","service_id","_x","_x2","_generateAuthQR","_callee6","_args6","_context6","generateQR","_x3","_generateKYCQR","_callee7","originalType","_args7","_context7","f","_x4","_generateSignatureQR","_callee8","_args8","_context8","_x5","_checkQRStatus","_callee9","_t6","_context9","serviceId","handleError","_x6","_generateQRWithContent","_callee0","content","localQRUrl","_t7","_args0","_context0","generateQRLocal","generateQRRemote","displayQRContent","_x7","_x8","_x9","_generateQRLocal","_callee1","_t8","_args1","_context1","encodeURIComponent","_x0","_x1","_x10","_generateQRRemote","_callee10","_t9","_args10","_context10","text","size","_x11","_x12","_x13","container","document","getElementById","typeName","innerHTML","qrElement","createElement","className","appendChild","applyTheme","_generateCustomQRCode","_callee11","qrContainer","_t0","_context11","generateQRPHP","displayDefaultQR","_x14","_x15","_generateQRClientSide","_callee12","canvas","ctx","_this3","_context12","ensureQRCodeLibrary","QRCode","width","height","getContext","fillStyle","fillRect","Promise","resolve","reject","toCanvas","margin","color","dark","light","font","textAlign","fillText","dataUrl","toDataURL","showQRInstructions","_x16","_x17","_x18","_generateQRPHP","_callee13","qrGeneratorUrl","requestBody","contentType","responseData","_context13","URLSearchParams","foreground_color","background_color","data_uri","_x19","_x20","_x21","_ensureQRCodeLibrary","_callee14","_context14","script","src","onload","onerror","head","instructionsElement","parentElement","querySelector","statusElement","style","display","classList","add","x","y","logo","Image","logoSize","logoX","logoY","drawImage","String","toUpperCase","_refreshQR","_callee15","_result","_t1","_args15","_context15","_x22","_this4","clearInterval","setInterval","_callee16","_t10","_context16","refreshQR","_makeRequest","_callee17","endpoint","_window$SunuIDConfig4","_window$SunuIDConfig5","sanitizedData","endpointPath","retryCount","_loop","_ret","_this5","_context18","sanitizeRequestData","endpoints","dataKeys","Object","keys","controller","timeoutId","errorText","errorData","_t11","_context17","AbortController","abort","signal","clearTimeout","e","statusText","responseKeys","name","d","_regeneratorValues","_x23","_x24","sanitized","_i","_Object$entries","entries","_Object$entries$_i","sanitizeInput","_typeof","Math","random","toString","substr","btoa","_fetchPartnerInfo","_callee18","partnerId","_t12","_context19","partner_id","authentication","auth_test","_checkConnections","_callee19","testResponse","debugData","_t13","_context20","api","websocket","ready","_waitForConnections","_callee20","timeout","startTime","_args21","_context21","checkConnections","stopAutoRefresh","disconnect","_i2","_containerIds","urlParams","search","has","callbackData","get","session_id","user_id","signature","validateCallback","processAuthentication","isExpired","decodeJWT","userData","iat","expectedSignature","generateSignature","floor","parseInt","redirectUrl","sunuidInstance","initSunuID"],"mappings":"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"}