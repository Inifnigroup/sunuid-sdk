{"version":3,"file":"sunuid-sdk.min.js","sources":["../src/sunuid-sdk.js"],"sourcesContent":["/**\n * SunuID SDK - Package d'int√©gration pour partenaires\n * \n * @version 1.0.0\n * @author SunuID Team\n * @license MIT\n */\n\n(function(window) {\n    'use strict';\n\n    // Configuration par d√©faut\n    const DEFAULT_CONFIG = {\n        apiUrl: window.SunuIDConfig?.apiUrl || 'https://api.sunuid.fayma.sn',\n        clientId: null,\n        secretId: null,\n        type: 2, // Type par d√©faut (2 = authentification)\n        partnerName: null, // Nom du partenaire r√©cup√©r√© depuis l'API\n        theme: 'light',\n        language: 'fr',\n        autoRefresh: false, // D√©sactiv√© par d√©faut pour √©viter les appels r√©p√©titifs\n        refreshInterval: 30000, // 30 secondes\n        autoInit: true, // Initialisation automatique par d√©faut\n        onSuccess: null,\n        onError: null,\n        onStatusUpdate: null,\n        onExpired: null,\n        // Nouvelles options de s√©curit√©\n        enableSecurityLogs: true,\n        validateInputs: true,\n        maxRetries: 3,\n        requestTimeout: 10000, // 10 secondes\n        // Options d'initialisation s√©curis√©e\n        secureInit: false,\n        secureInitUrl: (() => {\n            if (window.SunuIDConfig?.apiUrl?.includes('api.sunuid.fayma.sn')) {\n                return 'https://api.sunuid.fayma.sn/secure-init.php';\n            }\n            return window.SunuIDConfig?.apiUrl?.replace('/api', '') + '/secure-init.php' || 'https://api.sunuid.fayma.sn/secure-init.php';\n        })(),\n        token: null,\n        // Configuration pour forcer l'utilisation du serveur distant\n        forceRemoteServer: true,\n        useLocalFallback: false\n    };\n\n    /**\n     * Classe principale SunuID\n     */\n    class SunuID {\n        constructor(config = {}) {\n            this.config = { ...DEFAULT_CONFIG, ...config };\n            this.qrCode = null;\n            this.refreshTimer = null;\n            this.isInitialized = false;\n            this.socket = null;\n            \n            // Initialisation asynchrone seulement si autoInit est activ√©\n            if (this.config.autoInit !== false) {\n                this.initPromise = this.init();\n            }\n        }\n\n        /**\n         * Initialisation du SDK\n         */\n        async init() {\n            try {\n                // Initialisation s√©curis√©e si activ√©e\n                if (this.config.secureInit) {\n                    await this.secureInit();\n                } else {\n                    // Validation s√©curis√©e des param√®tres\n                    if (this.config.validateInputs) {\n                        this.validateSecurityParams();\n                    }\n                }\n\n                // Log de s√©curit√© pour l'initialisation\n                this.logSecurityEvent('SDK_INIT_START', {\n                    apiUrl: this.config.apiUrl,\n                    type: this.config.type,\n                    secureInit: this.config.secureInit\n                });\n\n                // R√©cup√©rer les informations du partenaire depuis l'API\n                await this.fetchPartnerInfo();\n\n                // Obscurcir les credentials dans les logs\n                this.obfuscateCredentials();\n\n                this.isInitialized = true;\n                console.log('SunuID SDK initialis√© avec succ√®s');\n                console.log('üìã Configuration SDK:', {\n                    apiUrl: this.config.apiUrl,\n                    type: this.config.type,\n                    partnerName: this.config.partnerName,\n                    clientId: this.config.clientId ? '***' + this.config.clientId.slice(-4) : 'null',\n                    secretId: this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null',\n                    secureInit: this.config.secureInit,\n                    theme: this.config.theme\n                });\n                \n                this.logSecurityEvent('SDK_INIT_SUCCESS');\n                \n                // Initialiser la connexion WebSocket\n                this.initWebSocket();\n                \n            } catch (error) {\n                this.logSecurityEvent('SDK_INIT_ERROR', { error: error.message });\n                throw error;\n            }\n        }\n\n        /**\n         * Initialisation s√©curis√©e via PHP\n         */\n        async secureInit() {\n            try {\n                this.logSecurityEvent('SECURE_INIT_START');\n                \n                const initData = {\n                    type: this.config.type,\n                    partnerName: this.config.partnerName,\n                    theme: this.config.theme\n                };\n\n                const response = await fetch(this.config.secureInitUrl, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json'\n                    },\n                    body: JSON.stringify(initData)\n                });\n\n                if (!response.ok) {\n                    throw new Error(`Erreur HTTP: ${response.status}`);\n                }\n\n                const result = await response.json();\n                \n                console.log('üìã R√©ponse initialisation s√©curis√©e:', result);\n                \n                if (!result.success) {\n                    throw new Error(result.error || 'Erreur lors de l\\'initialisation s√©curis√©e');\n                }\n\n                // Stocker le token et les donn√©es s√©curis√©es\n                this.config.token = result.data.token;\n                this.config.apiUrl = result.data.api_url;\n                \n                // D√©coder le token pour r√©cup√©rer les credentials\n                const decodedToken = this.decodeSecureToken(result.data.token);\n                if (decodedToken) {\n                    this.config.clientId = decodedToken.client_id;\n                    this.config.secretId = decodedToken.secret_id;\n                } else {\n                    throw new Error('Impossible de d√©coder le token s√©curis√©');\n                }\n                \n                this.config.expiresIn = result.data.expires_in;\n                this.config.maxRequests = result.data.max_requests;\n                this.config.requestCount = 0;\n\n                this.logSecurityEvent('SECURE_INIT_SUCCESS', {\n                    expiresIn: result.data.expires_in,\n                    maxRequests: result.data.max_requests\n                });\n\n                console.log('‚úÖ Initialisation s√©curis√©e r√©ussie');\n                \n            } catch (error) {\n                this.logSecurityEvent('SECURE_INIT_ERROR', { error: error.message });\n                throw new Error(`√âchec de l'initialisation s√©curis√©e: ${error.message}`);\n            }\n        }\n\n        /**\n         * D√©coder le token s√©curis√©\n         */\n        decodeSecureToken(token) {\n            try {\n                const parts = token.split('.');\n                if (parts.length !== 2) {\n                    console.error('‚ùå Format de token invalide');\n                    return null;\n                }\n                \n                const [payload, signature] = parts;\n                \n                // D√©coder le payload (base64)\n                const decodedPayload = atob(payload);\n                const tokenData = JSON.parse(decodedPayload);\n                \n                // V√©rifier l'expiration\n                if (tokenData.exp && tokenData.exp < Date.now() / 1000) {\n                    console.error('‚ùå Token expir√©');\n                    return null;\n                }\n                \n                console.log('‚úÖ Token d√©cod√© avec succ√®s');\n                return tokenData;\n                \n            } catch (error) {\n                console.error('‚ùå Erreur d√©codage token:', error);\n                return null;\n            }\n        }\n\n        /**\n         * Initialiser la connexion WebSocket\n         */\n        initWebSocket() {\n            try {\n                // V√©rifier si Socket.IO est disponible\n                if (typeof io === 'undefined') {\n                    console.warn('‚ö†Ô∏è Socket.IO non disponible, WebSocket sera initialis√© plus tard');\n                    // R√©essayer apr√®s un d√©lai\n                    setTimeout(() => this.initWebSocket(), 1000);\n                    return;\n                }\n                \n                // Obtenir l'IP du client (simulation)\n                const ip = this.getClientIP();\n                \n                // Initialiser la connexion WebSocket si elle n'existe pas\n                if (!this.socket) {\n                    console.log('üåê Initialisation Socket.IO...');\n                    \n                    this.socket = io('wss://samasocket.fayma.sn:9443', {\n                        query: {\n                            token: this.config.clientId,\n                            type: 'web',\n                            userId: this.config.clientId,\n                            username: ip\n                        },\n                        transports: ['websocket', 'polling']\n                    });\n\n                    // Gestion des √©v√©nements WebSocket\n                    this.socket.on('connect', () => {\n                        console.log('üåê WebSocket connect√© avec succ√®s');\n                        console.log('üìä Socket ID:', this.socket.id);\n                        this.socket.connected = true;\n                    });\n\n                    this.socket.on('disconnect', (reason) => {\n                        console.log('‚ùå WebSocket d√©connect√©:', reason);\n                        this.socket.connected = false;\n                    });\n\n                    this.socket.on('connect_error', (error) => {\n                        console.error('‚ùå Erreur connexion WebSocket:', error);\n                        this.socket.connected = false;\n                    });\n\n                    // √âcouter les √©v√©nements sp√©cifiques\n                    this.socket.on('qr_status_update', (data) => {\n                        console.log('üì± Mise √† jour statut QR re√ßue:', data);\n                        this.handleQRStatusUpdate(data);\n                    });\n\n                    this.socket.on('qr_scan_success', (data) => {\n                        console.log('‚úÖ Scan QR r√©ussi re√ßu:', data);\n                        this.handleQRScanSuccess(data);\n                    });\n\n                    this.socket.on('qr_expired', (data) => {\n                        console.log('‚è∞ QR expir√© re√ßu:', data);\n                        this.handleQRExpired(data);\n                    });\n\n                    // √âcouter l'√©v√©nement qr_scan_initiated sp√©cifiquement\n                    this.socket.on('qr_scan_initiated', (data) => {\n                        console.log('üîç QR Scan Initiated re√ßu:', data);\n                        this.showQRLoader();\n                    });\n\n                    // √âcouter l'√©v√©nement message g√©n√©rique (fallback)\n                    this.socket.on('message', (data) => {\n                        console.log('üì® Message socket re√ßu:', data);\n                        if (data && data.type === 'qr_scan_initiated') {\n                            console.log('üîç QR Scan Initiated d√©tect√© dans message:', data);\n                            this.showQRLoader();\n                        }\n                    });\n\n                    // √âcouter tous les √©v√©nements socket pour le debugging\n                    this.socket.onAny = this.socket.onAny || function(eventName, callback) {\n                        // Fallback pour les versions de Socket.IO qui n'ont pas onAny\n                        console.log(`üåê Socket Event [${eventName}]:`, callback);\n                    };\n                    \n                    // Logger tous les √©v√©nements re√ßus\n                    this.socket.onAny((eventName, ...args) => {\n                        console.log(`üåê Socket Event [${eventName}]:`, args);\n                    });\n                } else {\n                    console.log('üåê WebSocket d√©j√† connect√©');\n                }\n            } catch (error) {\n                console.error('‚ùå Erreur initialisation WebSocket:', error);\n            }\n        }\n\n        /**\n         * Obtenir l'IP du client (simulation)\n         */\n        getClientIP() {\n            // Simulation - en production, vous pourriez utiliser un service d'IP\n            return '127.0.0.1';\n        }\n\n        /**\n         * Obtenir le nom du type √† partir du num√©ro\n         */\n        getTypeName(type) {\n            switch(type) {\n                case 1: return 'KYC';\n                case 2: return 'AUTH';\n                case 3: return 'SIGNATURE';\n                default: return `TYPE-${type}`;\n            }\n        }\n\n        /**\n         * Validation s√©curis√©e des param√®tres\n         */\n        validateSecurityParams() {\n            const errors = [];\n            \n            // Validation du clientId\n            if (!this.config.clientId || typeof this.config.clientId !== 'string') {\n                errors.push('clientId invalide ou manquant');\n            } else if (this.config.clientId.length < 10) {\n                errors.push('clientId trop court');\n            }\n            \n            // Validation du secretId\n            if (!this.config.secretId || typeof this.config.secretId !== 'string') {\n                errors.push('secretId invalide ou manquant');\n            } else if (this.config.secretId.length < 32) {\n                errors.push('secretId trop court (minimum 32 caract√®res)');\n            }\n            \n            // Validation de l'URL API\n            if (!this.config.apiUrl || !this.isValidUrl(this.config.apiUrl)) {\n                errors.push('apiUrl invalide');\n            }\n            \n            // Validation du type\n            if (![1, 2, 3].includes(this.config.type)) {\n                errors.push('type invalide (doit √™tre 1, 2 ou 3)');\n            }\n            \n            if (errors.length > 0) {\n                this.logSecurityEvent('VALIDATION_ERROR', { errors });\n                throw new Error(`Param√®tres de s√©curit√© invalides: ${errors.join(', ')}`);\n            }\n            \n            this.logSecurityEvent('VALIDATION_SUCCESS');\n        }\n\n        /**\n         * Validation d'URL s√©curis√©e\n         */\n        isValidUrl(string) {\n            try {\n                const url = new URL(string);\n                return url.protocol === 'https:' || url.protocol === 'http:';\n            } catch (_) {\n                return false;\n            }\n        }\n\n        /**\n         * Logs de s√©curit√©\n         */\n        logSecurityEvent(event, data = {}) {\n            if (!this.config.enableSecurityLogs) return;\n            \n            const securityLog = {\n                timestamp: new Date().toISOString(),\n                event: event,\n                data: data,\n                userAgent: navigator.userAgent,\n                url: window.location.href\n            };\n            \n            console.warn('üîí [SECURITY]', securityLog);\n            \n            // Stocker les logs de s√©curit√© (optionnel)\n            if (!window.SunuIDSecurityLogs) {\n                window.SunuIDSecurityLogs = [];\n            }\n            window.SunuIDSecurityLogs.push(securityLog);\n        }\n\n        /**\n         * Chiffrement simple des credentials (pour √©viter l'exposition en clair)\n         */\n        obfuscateCredentials() {\n            // Stocker les vraies valeurs pour les logs de s√©curit√©\n            this.config.originalClientId = this.config.clientId;\n            this.config.originalSecretId = this.config.secretId;\n            \n            // Cr√©er des versions obfusqu√©es pour l'affichage uniquement\n            if (this.config.clientId) {\n                this.config.clientIdDisplay = this.config.clientId.replace(/(.{3}).*(.{3})/, '$1***$2');\n            }\n            if (this.config.secretId) {\n                this.config.secretIdDisplay = this.config.secretId.replace(/(.{4}).*(.{4})/, '$1***$2');\n            }\n        }\n\n        /**\n         * Validation des entr√©es utilisateur\n         */\n        sanitizeInput(input) {\n            if (typeof input !== 'string') return input;\n            \n            // Protection contre les injections XSS basiques\n            return input\n                .replace(/[<>]/g, '') // Supprimer les balises HTML\n                .replace(/javascript:/gi, '') // Supprimer les protocoles dangereux\n                .trim();\n        }\n\n        /**\n         * G√©rer la mise √† jour du statut QR\n         */\n        handleQRStatusUpdate(data) {\n            console.log('üì± QR Status Update:', data);\n            if (this.config.onStatusUpdate) {\n                this.config.onStatusUpdate(data);\n            }\n        }\n\n        /**\n         * G√©rer le succ√®s du scan QR\n         */\n        handleQRScanSuccess(data) {\n            console.log('‚úÖ QR Scan Success:', data);\n            if (this.config.onSuccess) {\n                this.config.onSuccess(data);\n            }\n        }\n\n        /**\n         * G√©rer l'expiration du QR\n         */\n        handleQRExpired(data) {\n            console.log('‚è∞ QR Expired:', data);\n            if (this.config.onExpired) {\n                this.config.onExpired(data);\n            }\n        }\n\n        /**\n         * √âmettre un √©v√©nement WebSocket\n         */\n        emitWebSocketEvent(event, data) {\n            if (this.socket && this.socket.connected) {\n                this.socket.emit(event, data);\n                console.log(`üì§ √âv√©nement WebSocket √©mis: ${event}`, data);\n            } else {\n                console.warn('‚ö†Ô∏è WebSocket non connect√©, impossible d\\'√©mettre l\\'√©v√©nement:', event);\n            }\n        }\n\n        /**\n         * Obtenir le statut de la connexion WebSocket\n         */\n        getWebSocketStatus() {\n            if (!this.socket) {\n                return 'not_initialized';\n            }\n            return this.socket.connected ? 'connected' : 'disconnected';\n        }\n\n        /**\n         * Forcer l'initialisation WebSocket (si Socket.IO devient disponible plus tard)\n         */\n        forceWebSocketInit() {\n            if (typeof io !== 'undefined' && !this.socket) {\n                console.log('üîÑ For√ßage de l\\'initialisation WebSocket...');\n                this.initWebSocket();\n            }\n        }\n\n        /**\n         * G√©n√©rer un QR code avec le type configur√©\n         */\n        async generateQR(containerId = 'sunuid-qr-container', options = {}) {\n            // Attendre l'initialisation si n√©cessaire\n            if (this.initPromise) {\n                await this.initPromise;\n                this.initPromise = null;\n            }\n            \n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n            \n            console.log('üéØ generateQR appel√© avec containerId:', containerId);\n            \n            // Attendre que les connexions soient pr√™tes\n            console.log('üîç Attente connexions API et WebSocket...');\n            try {\n                const connectionStatus = await this.waitForConnections(5000); // 5 secondes max\n                console.log('‚úÖ Connexions pr√™tes:', connectionStatus);\n            } catch (connectionError) {\n                console.error('‚ùå Erreur connexions:', connectionError.message);\n                throw new Error('Connexions non disponibles - Impossible de g√©n√©rer le QR code');\n            }\n\n            try {\n                // Utiliser uniquement le socketID comme contenu du QR\n                const socketId = this.socket ? this.socket.id : 'timeout-socket-id';\n                const qrContent = socketId;\n                \n                console.log('üìÑ Contenu QR pr√©par√©:', qrContent);\n                console.log('üîå Socket ID:', socketId);\n                \n                                    // G√©n√©rer le QR avec le contenu complet\n                    const partnerName = this.config.partnerName || 'Partner_unknown';\n                    const response = await this.makeRequest('/qr-generate', {\n                        type: this.config.type,\n                        content: qrContent, // Contenu personnalis√© pour le QR\n                        label: `${this.getTypeName(this.config.type)} ${partnerName}`, // Label du QR avec nom du partenaire\n                        ...options\n                    });\n\n                if (response.success) {\n                    // Construire l'URL compl√®te du QR code\n                    let qrImageUrl = response.data.qrCodeUrl;\n                    \n                    // Si l'URL est relative, la rendre absolue\n                    if (qrImageUrl.startsWith('/')) {\n                        qrImageUrl = `${this.config.apiUrl}${qrImageUrl}`;\n                    }\n                    \n                    this.currentQRUrl = qrImageUrl;\n                    \n                    console.log('‚úÖ QR code g√©n√©r√© par API principale:', qrImageUrl);\n                    console.log('üìÑ Contenu QR final:', qrContent);\n                    console.log('üè∑Ô∏è Label QR:', response.data.label);\n                    console.log('üÜî Session ID:', response.data.sessionId);\n                    \n                    // Afficher le QR code\n                    this.displayQRCode(containerId, qrImageUrl, this.config.type, options);\n                    \n                    this.startAutoRefresh(containerId, this.config.type, options);\n                    \n                    // √âmettre un √©v√©nement WebSocket pour la g√©n√©ration du QR\n                    this.emitWebSocketEvent('qr_generated', {\n                        type: this.config.type,\n                        qrCodeUrl: qrImageUrl,\n                        socketId: socketId,\n                        qrContent: qrContent,\n                        label: response.data.label,\n                        sessionId: response.data.sessionId,\n                        timestamp: Date.now()\n                    });\n                    \n                    return {\n                        ...response.data,\n                        qrCodeUrl: qrImageUrl,\n                        qrContent: qrContent,\n                        label: response.data.label,\n                        sessionId: response.data.sessionId\n                    };\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la g√©n√©ration du QR code');\n                }\n            } catch (error) {\n                console.error('Erreur API d√©tect√©e:', error.message);\n                console.error('Stack trace complet:', error.stack);\n                console.error('Configuration SDK:', {\n                    apiUrl: this.config.apiUrl,\n                    type: this.config.type,\n                    secureInit: this.config.secureInit,\n                    clientId: this.config.clientId ? '***' + this.config.clientId.slice(-4) : 'null',\n                    secretId: this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null'\n                });\n                \n                // Fallback vers le service local seulement si activ√©\n                if (this.config.useLocalFallback) {\n                    console.log('üîç V√©rification fallback local...');\n                    console.log('üîç Hostname:', window.location.hostname);\n                    console.log('üîç Protocol:', window.location.protocol);\n                    console.log('üîç URL compl√®te:', window.location.href);\n                    \n                    const isLocal = window.location.hostname === 'localhost' || \n                                   window.location.hostname === '127.0.0.1' || \n                                   window.location.protocol === 'file:';\n                    \n                    console.log('üîç Est local:', isLocal);\n                    \n                    if (isLocal) {\n                        console.log('üîÑ Tentative fallback vers service QR local...');\n                        console.log('‚ùå Fallback local non impl√©ment√© - utilisation serveur distant uniquement');\n                    } else {\n                        console.log('‚ùå Pas en local, pas de fallback');\n                    }\n                } else {\n                    console.log('üîí Fallback local d√©sactiv√©, utilisation serveur distant uniquement');\n                }\n                \n                console.log('Affichage du message \"Service non disponible\" pour type ' + this.config.type);\n                this.displayServiceUnavailable(containerId, this.config.type);\n                throw new Error('Service non disponible');\n            }\n        }\n\n\n\n        /**\n         * G√©n√©rer un QR code avec un type personnalis√©\n         */\n        async generateCustomQR(containerId, type, options = {}) {\n            // Attendre l'initialisation si n√©cessaire\n            if (this.initPromise) {\n                await this.initPromise;\n                this.initPromise = null;\n            }\n            \n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-generate', {\n                    type: type, // Type personnalis√© (1, 2, 3, etc.)\n                    ...options\n                });\n\n                if (response.success) {\n                    // Construire l'URL compl√®te de l'image QR avec la base URL pour les images\n                    const imageBaseUrl = 'https://sunuid.fayma.sn';\n                    const qrImageUrl = `${imageBaseUrl}${response.data.qrcode}`;\n                    this.displayQRCode(containerId, qrImageUrl, type, options);\n                    \n                    // Le QR code est d√©j√† g√©n√©r√© par l'API principale\n                    console.log('‚úÖ QR code personnalis√© g√©n√©r√© par API principale:', qrImageUrl);\n                    console.log('üìÑ Code de session:', response.data.code);\n                    console.log('üÜî Service ID:', response.data.service_id);\n                    \n                    this.startAutoRefresh(containerId, type, options);\n                    return {\n                        ...response.data,\n                        qrCodeUrl: qrImageUrl,\n                        sessionId: response.data.service_id\n                    };\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la g√©n√©ration du QR code');\n                }\n            } catch (error) {\n                console.error('Erreur API d√©tect√©e:', error.message);\n                console.error('Stack trace complet:', error.stack);\n                console.error('Configuration SDK (Custom):', {\n                    apiUrl: this.config.apiUrl,\n                    type: type,\n                    secureInit: this.config.secureInit,\n                    clientId: this.config.clientId ? '***' + this.config.clientId.slice(-4) : 'null',\n                    secretId: this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null'\n                });\n                console.log('Affichage du message \"Service non disponible\" pour type ' + type);\n                this.displayServiceUnavailable(containerId, type);\n                throw new Error('Service non disponible');\n            }\n        }\n\n        // Alias pour maintenir la compatibilit√©\n        async generateAuthQR(containerId, options = {}) {\n            return this.generateQR(containerId, options);\n        }\n\n        async generateKYCQR(containerId, options = {}) {\n            // Sauvegarder le type actuel\n            const originalType = this.config.type;\n            // Changer temporairement le type pour KYC\n            this.config.type = 1;\n            try {\n                return await this.generateQR(containerId, options);\n            } finally {\n                // Restaurer le type original\n                this.config.type = originalType;\n            }\n        }\n\n        async generateSignatureQR(containerId, options = {}) {\n            // Sauvegarder le type actuel\n            const originalType = this.config.type;\n            // Changer temporairement le type pour Signature\n            this.config.type = 3;\n            try {\n                return await this.generateQR(containerId, options);\n            } finally {\n                // Restaurer le type original\n                this.config.type = originalType;\n            }\n        }\n\n        /**\n         * V√©rifier le statut d'un QR code\n         */\n        async checkQRStatus(sessionId) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-status', {\n                    serviceId: sessionId\n                });\n\n                if (response.success) {\n                    return response.data;\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la v√©rification du statut');\n                }\n            } catch (error) {\n                this.handleError(error);\n                throw error;\n            }\n        }\n\n        /**\n         * G√©n√©rer un QR code avec un contenu sp√©cifique\n         */\n        async generateQRWithContent(content, containerId, type, options = {}) {\n            console.log('üé® G√©n√©ration QR avec contenu:', content);\n            \n            try {\n                // Essayer d'abord le service QR local\n                if (window.location.hostname === 'localhost' || \n                    window.location.hostname === '127.0.0.1' || \n                    window.location.protocol === 'file:') {\n                    \n                    console.log('üè† Utilisation service QR local...');\n                    const localQRUrl = await this.generateQRLocal(content, containerId, type, options);\n                    if (localQRUrl) {\n                        return localQRUrl;\n                    }\n                }\n                \n                // Fallback vers le service QR distant\n                console.log('üåê Utilisation service QR distant...');\n                return await this.generateQRRemote(content, containerId, type, options);\n                \n            } catch (error) {\n                console.error('‚ùå Erreur g√©n√©ration QR:', error);\n                // Fallback vers affichage simple du contenu\n                this.displayQRContent(containerId, content, type, options);\n                return null;\n            }\n        }\n        \n        /**\n         * G√©n√©rer QR code avec service local\n         */\n        async generateQRLocal(content, containerId, type, options = {}) {\n            try {\n                const response = await fetch('http://localhost:8000/api/generate/text', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/x-www-form-urlencoded'\n                    },\n                    body: `text=${encodeURIComponent(content)}&size=300`\n                });\n                \n                if (response.ok) {\n                    const data = await response.json();\n                    const qrUrl = `data:image/png;base64,${data.qrcode}`;\n                    this.displayQRCode(containerId, qrUrl, type, options);\n                    return qrUrl;\n                }\n            } catch (error) {\n                console.log('‚ùå Service QR local non disponible:', error.message);\n            }\n            return null;\n        }\n        \n        /**\n         * G√©n√©rer QR code avec service distant\n         */\n        async generateQRRemote(content, containerId, type, options = {}) {\n            try {\n                const response = await fetch('https://api.sunuid.fayma.sn/qr-generate', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        text: content,\n                        size: 300,\n                        type: type\n                    })\n                });\n                \n                if (response.ok) {\n                    const data = await response.json();\n                    const qrUrl = `data:image/png;base64,${data.qrcode}`;\n                    this.displayQRCode(containerId, qrUrl, type, options);\n                    return qrUrl;\n                }\n            } catch (error) {\n                console.error('‚ùå Erreur service QR distant:', error);\n            }\n            \n            // Fallback vers affichage du contenu\n            this.displayQRContent(containerId, content, type, options);\n            return null;\n        }\n        \n        /**\n         * Afficher le contenu QR en texte (fallback)\n         */\n        displayQRContent(containerId, content, type, options = {}) {\n            const container = document.getElementById(containerId);\n            if (!container) {\n                throw new Error(`Conteneur avec l'ID \"${containerId}\" non trouv√©`);\n            }\n\n            const typeName = this.getTypeName(type);\n            container.innerHTML = `\n                <div class=\"sunuid-qr-code\">\n                    <div class=\"sunuid-qr-header\">\n                        <h3>${typeName}</h3>\n                    </div>\n                    <div class=\"sunuid-qr-content\" style=\"text-align: center; padding: 20px; background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 5px; margin: 10px 0;\">\n                        <p><strong>Contenu QR Code:</strong></p>\n                        <p style=\"font-family: monospace; font-size: 14px; word-break: break-all;\">${content}</p>\n                    </div>\n                    <div class=\"sunuid-qr-instructions\">\n                        <p>Contenu QR g√©n√©r√© avec le format: {type}-{code}-{socketid}</p>\n                    </div>\n                </div>\n            `;\n            \n            console.log('‚úÖ Contenu QR affich√©:', content);\n        }\n        \n        /**\n         * Afficher un QR code dans un conteneur\n         */\n        displayQRCode(containerId, qrUrl, type, options = {}) {\n            const container = document.getElementById(containerId);\n            if (!container) {\n                throw new Error(`Conteneur avec l'ID \"${containerId}\" non trouv√©`);\n            }\n\n            // Nettoyer le conteneur\n            container.innerHTML = '';\n\n            // Cr√©er l'√©l√©ment QR code\n            const qrElement = document.createElement('div');\n            qrElement.className = 'sunuid-qr-code';\n            \n            // Afficher l'image QR avec les informations\n            const typeName = this.getTypeName(type);\n            qrElement.innerHTML = `\n                <div class=\"sunuid-qr-header\">\n                    <h3>${type === 1 ? 'V√©rification KYC' : type === 2 ? 'Authentification' : type === 3 ? 'Signature' : 'Service Type ' + type}</h3>\n                </div>\n                <div class=\"sunuid-qr-image\">\n                    <img src=\"${qrUrl}\" alt=\"QR Code ${typeName}\" style=\"max-width: 300px; border: 1px solid #ddd; border-radius: 5px;\" />\n                </div>\n               \n            `;\n\n            container.appendChild(qrElement);\n\n            // Appliquer le th√®me\n            this.applyTheme(options.theme || this.config.theme);\n            \n            console.log('‚úÖ QR code affich√©:', qrUrl);\n        }\n\n        /**\n         * G√©n√©rer un QR code personnalis√© avec PHP Endroid\n         */\n        async generateCustomQRCode(content, label, options = {}) {\n            console.log('üé® D√©but g√©n√©ration QR personnalis√©...');\n            console.log('üìÑ Contenu:', content);\n            console.log('üè∑Ô∏è Label:', label);\n            \n            // Chercher le conteneur QR\n            let qrContainer = document.getElementById('sunuid-qr-container');\n            if (!qrContainer) {\n                qrContainer = document.getElementById('qr-container');\n            }\n            if (!qrContainer) {\n                console.error('‚ùå QR container not found');\n                return;\n            }\n            \n            console.log('‚úÖ QR container trouv√©');\n\n            // Nettoyer le conteneur\n            qrContainer.innerHTML = '<div style=\"text-align: center; padding: 20px;\"><p>G√©n√©ration QR code...</p></div>';\n\n                         try {\n                 // Utiliser directement l'API principale (plus fiable)\n                 console.log('üé® Tentative g√©n√©ration via API principale...');\n                 await this.generateQRPHP(content, label, qrContainer);\n                 console.log('‚úÖ QR code g√©n√©r√© avec succ√®s');\n                 \n             } catch (error) {\n                 console.error('‚ùå Erreur g√©n√©ration API:', error);\n                 \n                 // Fallback final : image par d√©faut\n                 console.log('‚ö†Ô∏è Affichage image par d√©faut');\n                 this.displayDefaultQR(qrContainer, content, label);\n             }\n        }\n\n        /**\n         * G√©n√©rer un QR code c√¥t√© client (m√©thode principale)\n         */\n        async generateQRClientSide(content, label, qrContainer) {\n            // Charger QRCode si n√©cessaire\n            await this.ensureQRCodeLibrary();\n            \n            if (typeof QRCode === 'undefined') {\n                throw new Error('QRCode library non disponible');\n            }\n            \n            // Cr√©er un canvas\n            const canvas = document.createElement('canvas');\n            canvas.width = 300;\n            canvas.height = 320;\n            const ctx = canvas.getContext('2d');\n            \n            // Fond blanc\n            ctx.fillStyle = '#FFFFFF';\n            ctx.fillRect(0, 0, 300, 320);\n            \n            // G√©n√©rer le QR code\n            return new Promise((resolve, reject) => {\n                QRCode.toCanvas(canvas, content, {\n                    width: 280,\n                    margin: 10,\n                    color: {\n                        dark: '#000000',\n                        light: '#FFFFFF'\n                    }\n                }, (error) => {\n                    if (error) {\n                        reject(error);\n                        return;\n                    }\n                    \n                    // Ajouter le label\n                    ctx.fillStyle = '#333333';\n                    ctx.font = 'bold 14px Arial';\n                    ctx.textAlign = 'center';\n                    ctx.fillText(label, 150, 305);\n                    \n                    // Convertir en data URL\n                    const dataUrl = canvas.toDataURL('image/png');\n                    \n                    // Stocker l'URL\n                    this.currentQRUrl = dataUrl;\n                    \n                    // Afficher le QR code\n                    qrContainer.innerHTML = `\n                        <div style=\"text-align: center; padding: 20px;\">\n                            <img src=\"${dataUrl}\" alt=\"QR Code\" style=\"max-width: 300px; border: 2px solid #ddd; border-radius: 10px;\">\n                        </div>\n                    `;\n                    \n                    // Afficher les instructions\n                    this.showQRInstructions(qrContainer);\n                    \n                    resolve();\n                });\n            });\n        }\n\n        /**\n         * G√©n√©rer un QR code via endpoint PHP (fallback)\n         */\n        async generateQRPHP(content, label, qrContainer) {\n                         // Construire l'URL - Utiliser l'API principale qui fonctionne\n             let qrGeneratorUrl;\n             if (this.config.forceRemoteServer) {\n                 qrGeneratorUrl = 'https://api.sunuid.fayma.sn/qr-generate';\n             } else if (this.config.apiUrl.includes('api.sunuid.fayma.sn')) {\n                 qrGeneratorUrl = 'https://api.sunuid.fayma.sn/qr-generate';\n             } else if (this.config.apiUrl.includes('localhost') || this.config.apiUrl.includes('127.0.0.1')) {\n                 qrGeneratorUrl = 'http://localhost:8000/api/generate/text';\n             } else {\n                 qrGeneratorUrl = this.config.apiUrl + '/qr-generate';\n             }\n            \n            console.log('üîó URL QR Generator:', qrGeneratorUrl);\n            \n                         // Adapter le format selon l'URL\n             let requestBody;\n             let contentType;\n             \n             if (qrGeneratorUrl.includes('localhost:8000')) {\n                 // Service local - format form-data\n                 contentType = 'application/x-www-form-urlencoded';\n                 requestBody = new URLSearchParams({\n                     text: content,\n                     size: 300,\n                     margin: 10,\n                     foreground_color: '000000',\n                     background_color: 'FFFFFF'\n                 });\n             } else {\n                 // Service distant - format JSON avec les param√®tres de l'API principale\n                 contentType = 'application/json';\n                 requestBody = JSON.stringify({\n                     type: this.config.type,\n                     client_id: this.config.clientId,\n                     secret_id: this.config.secretId,\n                     content: content,\n                     label: label\n                 });\n             }\n             \n             const response = await fetch(qrGeneratorUrl, {\n                 method: 'POST',\n                 headers: {\n                     'Content-Type': contentType,\n                     'Accept': 'application/json'\n                 },\n                 body: requestBody\n             });\n            \n            if (!response.ok) {\n                throw new Error(`Erreur HTTP: ${response.status}`);\n            }\n            \n            const responseData = await response.json();\n            \n                         if (!responseData.success) {\n                 throw new Error(`Erreur QR: ${responseData.error}`);\n             }\n             \n             // Adapter selon le format de r√©ponse\n             let qrImageUrl;\n             if (qrGeneratorUrl.includes('localhost:8000')) {\n                 // Service local\n                 qrImageUrl = responseData.data_uri;\n             } else {\n                 // Service distant - utiliser le format de l'API principale\n                 const imageBaseUrl = 'https://sunuid.fayma.sn';\n                 qrImageUrl = `${imageBaseUrl}${responseData.data.qrcode}`;\n             }\n             \n             // Stocker l'URL\n             this.currentQRUrl = qrImageUrl;\n             \n             // Afficher le QR code\n             qrContainer.innerHTML = `\n                 <div style=\"text-align: center; padding: 20px;\">\n                     <img src=\"${qrImageUrl}\" alt=\"QR Code\" style=\"max-width: 300px; border: 2px solid #ddd; border-radius: 10px;\">\n                 </div>\n             `;\n            \n            // Afficher les instructions\n            this.showQRInstructions(qrContainer);\n        }\n\n        /**\n         * Afficher une image QR par d√©faut (fallback final)\n         */\n        displayDefaultQR(qrContainer, content, label) {\n            qrContainer.innerHTML = `\n                <div style=\"text-align: center; padding: 20px; color: #666;\">\n                    <div style=\"width: 300px; height: 300px; background: #f0f0f0; border: 2px solid #ddd; border-radius: 10px; display: flex; align-items: center; justify-content: center; margin: 0 auto;\">\n                        <div>\n                            <p style=\"font-size: 24px; margin: 0;\">üì±</p>\n                            <p style=\"font-size: 14px; margin: 10px 0 0 0;\">QR Code</p>\n                        </div>\n                    </div>\n                    <p style=\"margin-top: 10px; font-size: 12px;\">${label}</p>\n                    <p style=\"font-size: 10px; color: #999; margin-top: 5px;\">Contenu: ${content}</p>\n                </div>\n            `;\n        }\n\n        /**\n         * S'assurer que la biblioth√®que QRCode est disponible\n         */\n        async ensureQRCodeLibrary() {\n            if (typeof QRCode !== 'undefined') {\n                console.log('‚úÖ QRCode library d√©j√† disponible');\n                return true;\n            }\n            \n            console.log('üì¶ Chargement QRCode library...');\n            \n            return new Promise((resolve, reject) => {\n                const script = document.createElement('script');\n                script.src = 'https://cdn.jsdelivr.net/npm/qrcode@1.5.3/lib/browser.min.js';\n                script.onload = () => {\n                    setTimeout(() => {\n                        if (typeof QRCode !== 'undefined') {\n                            console.log('‚úÖ QRCode library charg√©e');\n                            resolve(true);\n                        } else {\n                            console.error('‚ùå QRCode non disponible apr√®s chargement');\n                            reject(new Error('QRCode library non disponible apr√®s chargement'));\n                        }\n                    }, 200);\n                };\n                script.onerror = () => {\n                    console.error('‚ùå Erreur chargement QRCode library');\n                    reject(new Error('Erreur chargement QRCode library'));\n                };\n                document.head.appendChild(script);\n            });\n        }\n\n        /**\n         * Afficher les instructions pour le QR code\n         */\n        showQRInstructions(qrContainer) {\n            const instructionsElement = qrContainer.parentElement.querySelector('.sunuid-qr-instructions');\n            const statusElement = qrContainer.parentElement.querySelector('.sunuid-qr-status');\n            \n            if (instructionsElement) {\n                instructionsElement.style.display = 'block';\n                instructionsElement.classList.add('sunuid-qr-ready');\n            }\n            if (statusElement) {\n                statusElement.style.display = 'block';\n                statusElement.classList.add('sunuid-qr-ready');\n            }\n        }\n\n        /**\n         * Ajouter le logo au centre du QR code\n         */\n        addLogoToCenter(ctx, x, y, width, height) {\n            try {\n                // Cr√©er une image pour le logo\n                const logo = new Image();\n                logo.onload = () => {\n                    const logoSize = 40;\n                    const logoX = x + (width - logoSize) / 2;\n                    const logoY = y + (width - logoSize) / 2;\n\n                    // Dessiner un fond blanc pour le logo\n                    ctx.fillStyle = 'white';\n                    ctx.fillRect(logoX - 2, logoY - 2, logoSize + 4, logoSize + 4);\n\n                    // Dessiner le logo\n                    ctx.drawImage(logo, logoX, logoY, logoSize, logoSize);\n                };\n                logo.src = 'src/logoqr.png';\n            } catch (error) {\n                console.warn('Logo non disponible:', error);\n            }\n        }\n\n        /**\n         * Afficher l'image de fallback\n         */\n        displayFallbackImage() {\n            console.log('‚ö†Ô∏è Affichage de l\\'image de fallback');\n            const qrContainer = document.getElementById('sunuid-qr-container');\n            if (qrContainer) {\n                qrContainer.innerHTML = `\n                    <div style=\"text-align: center; padding: 20px; color: #666;\">\n                        <p>‚ö†Ô∏è G√©n√©ration QR personnalis√© non disponible</p>\n                        <p>Utilisation de l'image par d√©faut</p>\n                        <p><strong>Debug:</strong> QRCode disponible: ${typeof QRCode !== 'undefined'}</p>\n                        <p><strong>Debug:</strong> Container trouv√©: ${qrContainer !== null}</p>\n                    </div>\n                `;\n            }\n        }\n\n        /**\n         * Afficher \"Service non disponible\"\n         */\n        displayServiceUnavailable(containerId, type) {\n            console.log(`displayServiceUnavailable appel√©e pour ${containerId}, type: ${type}`);\n            const container = document.getElementById(containerId);\n            if (!container) {\n                console.error(`Container ${containerId} non trouv√©`);\n                return;\n            }\n\n            container.innerHTML = `\n                <div class=\"sunuid-service-unavailable\" style=\"\n                    text-align: center;\n                    padding: 40px 20px;\n                    background: #f8f9fa;\n                    border: 2px dashed #dee2e6;\n                    border-radius: 10px;\n                    color: #6c757d;\n                    font-family: Arial, sans-serif;\n                \">\n                    <div style=\"font-size: 48px; margin-bottom: 20px;\">‚ö†Ô∏è</div>\n                    <h3 style=\"margin: 0 0 10px 0; color: #495057;\">Service Non Disponible</h3>\n                    <p style=\"margin: 0; font-size: 14px;\">\n                        Le service d'authentification est temporairement indisponible.<br>\n                        Veuillez r√©essayer plus tard.\n                    </p>\n                    <div style=\"margin-top: 20px; font-size: 12px; color: #adb5bd;\">\n                        Type: ${String(type).toUpperCase()}\n                    </div>\n                </div>\n            `;\n        }\n\n        /**\n         * Rafra√Æchir un QR code\n         */\n        async refreshQR(containerId, options = {}) {\n            try {\n                // V√©rifier si on a d√©j√† un QR code g√©n√©r√©\n                if (this.currentQRUrl) {\n                    console.log('üîÑ V√©rification du statut du QR code existant...');\n                    \n                    // Option 1: V√©rifier le statut du QR code via l'API\n                    // (√† impl√©menter si l'API le supporte)\n                    \n                    // Option 2: R√©g√©n√©rer le QR code seulement si n√©cessaire\n                    // Pour l'instant, on r√©g√©n√®re pour s'assurer qu'il est √† jour\n                    const result = await this.generateQR(containerId, options);\n                    return result;\n                } else {\n                    console.log('üîÑ Pas de QR code existant, g√©n√©ration d\\'un nouveau...');\n                    const result = await this.generateQR(containerId, options);\n                    return result;\n                }\n            } catch (error) {\n                console.error('Erreur lors du rafra√Æchissement:', error.message);\n                this.displayServiceUnavailable(containerId, this.config.type);\n                throw error;\n            }\n        }\n\n        /**\n         * D√©marrer le rafra√Æchissement automatique\n         */\n        startAutoRefresh(containerId, type, options) {\n            if (!this.config.autoRefresh) return;\n\n            // Arr√™ter le timer existant s'il y en a un\n            if (this.refreshTimer) {\n                clearInterval(this.refreshTimer);\n                console.log('üîÑ Timer de rafra√Æchissement pr√©c√©dent arr√™t√©');\n            }\n\n            this.refreshTimer = setInterval(async () => {\n                try {\n                    console.log('üîÑ Rafra√Æchissement automatique du QR code...');\n                    await this.refreshQR(containerId, type, options);\n                } catch (error) {\n                    console.warn('Erreur lors du rafra√Æchissement automatique:', error);\n                }\n            }, this.config.refreshInterval);\n            \n            console.log(`üîÑ Timer de rafra√Æchissement d√©marr√© (${this.config.refreshInterval}ms)`);\n        }\n\n        /**\n         * D√©marrer le timer de compte √† rebours\n         */\n\n\n        /**\n         * Effectuer une requ√™te API s√©curis√©e\n         */\n        async makeRequest(endpoint, data) {\n            // Validation de s√©curit√©\n            if (!this.isInitialized) {\n                this.logSecurityEvent('REQUEST_BEFORE_INIT', { endpoint });\n                throw new Error('SDK non initialis√©');\n            }\n\n            // V√©rifier les limites de requ√™tes pour l'initialisation s√©curis√©e\n            if (this.config.secureInit) {\n                this.config.requestCount++;\n                if (this.config.requestCount > this.config.maxRequests) {\n                    this.logSecurityEvent('API_REQUEST_LIMIT_EXCEEDED', { \n                        requestCount: this.config.requestCount,\n                        maxRequests: this.config.maxRequests \n                    });\n                    throw new Error('Limite de requ√™tes d√©pass√©e');\n                }\n            }\n\n            // Sanitisation des donn√©es\n            const sanitizedData = this.sanitizeRequestData(data);\n            \n            // Debug: Afficher les donn√©es envoy√©es\n            console.log('üîç Debug makeRequest - endpoint:', endpoint);\n            console.log('üîç Debug makeRequest - apiUrl:', this.config.apiUrl);\n            console.log('üîç Debug makeRequest - url:', `${this.config.apiUrl}${endpoint}`);\n            console.log('üîç Debug makeRequest - data:', JSON.stringify(sanitizedData, null, 2));\n            console.log('üîç Debug makeRequest - secureInit:', this.config.secureInit);\n            console.log('üîç Debug makeRequest - isInitialized:', this.isInitialized);\n            \n            // Utiliser l'endpoint depuis la configuration si disponible\n            const endpointPath = window.SunuIDConfig?.endpoints?.[endpoint.replace('/', '')] || endpoint;\n            const url = `${this.config.apiUrl}${endpointPath}`;\n            \n            // Debug: Afficher l'URL finale\n            console.log('üîç URL finale construite:', url);\n            console.log('üîç EndpointPath:', endpointPath);\n            console.log('üîç SunuIDConfig endpoints:', JSON.stringify(window.SunuIDConfig?.endpoints));\n            \n            // Log de s√©curit√© pour la requ√™te\n            this.logSecurityEvent('API_REQUEST_START', {\n                endpoint: endpointPath,\n                url: url,\n                dataKeys: Object.keys(sanitizedData),\n                secureInit: this.config.secureInit\n            });\n            \n            let retryCount = 0;\n            const maxRetries = this.config.maxRetries;\n            \n            while (retryCount <= maxRetries) {\n                try {\n                    const controller = new AbortController();\n                    const timeoutId = setTimeout(() => controller.abort(), this.config.requestTimeout);\n                    \n                    // Headers minimaux (API SunuID n'accepte que les headers essentiels)\n                    const headers = {\n                        'Content-Type': 'application/json'\n                    };\n\n                    // Note: En mode s√©curis√©, les credentials sont dans le body\n                    // Pas besoin d'ajouter de header sp√©cial pour √©viter les probl√®mes CORS\n                    // if (this.config.secureInit && this.config.token) {\n                    //     headers['X-Secure-Token'] = this.config.token;\n                    // }\n                    \n                    const response = await fetch(url, {\n                        method: 'POST',\n                        headers: headers,\n                        body: JSON.stringify(sanitizedData),\n                        signal: controller.signal\n                    });\n\n                    clearTimeout(timeoutId);\n\n                    if (!response.ok) {\n                        const errorText = await response.text();\n                        let errorData;\n                        try {\n                            errorData = JSON.parse(errorText);\n                        } catch (e) {\n                            errorData = { message: errorText };\n                        }\n                        \n                        this.logSecurityEvent('API_REQUEST_ERROR', {\n                            status: response.status,\n                            statusText: response.statusText,\n                            error: errorData.message\n                        });\n                        \n                        throw new Error(errorData.message || `Erreur HTTP: ${response.status}`);\n                    }\n\n                    const result = await response.json();\n                    \n                    this.logSecurityEvent('API_REQUEST_SUCCESS', {\n                        endpoint: endpointPath,\n                        responseKeys: Object.keys(result)\n                    });\n                    \n                    return result;\n                    \n                } catch (error) {\n                    retryCount++;\n                    \n                    if (error.name === 'AbortError') {\n                        this.logSecurityEvent('API_REQUEST_TIMEOUT', { retryCount });\n                        if (retryCount > maxRetries) {\n                            throw new Error('Timeout de la requ√™te API');\n                        }\n                        continue;\n                    }\n                    \n                    if (retryCount > maxRetries) {\n                        this.logSecurityEvent('API_REQUEST_MAX_RETRIES', { \n                            retryCount, \n                            error: error.message \n                        });\n                        throw error;\n                    }\n                    \n                    // Attendre avant de r√©essayer\n                    await new Promise(resolve => setTimeout(resolve, 1000 * retryCount));\n                }\n            }\n        }\n\n        /**\n         * Sanitisation des donn√©es de requ√™te\n         */\n        sanitizeRequestData(data) {\n            const sanitized = {};\n            \n            // D'abord, copier tous les champs de data\n            for (const [key, value] of Object.entries(data)) {\n                if (typeof value === 'string') {\n                    sanitized[key] = this.sanitizeInput(value);\n                } else if (typeof value === 'object' && value !== null) {\n                    sanitized[key] = this.sanitizeRequestData(value);\n                } else {\n                    sanitized[key] = value;\n                }\n            }\n            \n            // Ensuite, ajouter/√©craser les credentials (API SunuID les attend ici)\n            // Utiliser les vraies valeurs (originales) si disponibles, sinon les valeurs directes\n            sanitized.client_id = this.config.originalClientId || this.config.clientId;\n            sanitized.secret_id = this.config.originalSecretId || this.config.secretId;\n            \n            // Debug: V√©rifier les credentials et les donn√©es\n            console.log('üîç Credentials dans sanitizeRequestData - clientId:', this.config.clientId);\n            console.log('üîç Credentials dans sanitizeRequestData - secretId:', this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null');\n            console.log('üîç Credentials dans sanitizeRequestData - sanitizedClientId:', sanitized.client_id);\n            console.log('üîç Credentials dans sanitizeRequestData - sanitizedSecretId:', sanitized.secret_id ? '***' + sanitized.secret_id.slice(-4) : 'null');\n            console.log('üîç Credentials dans sanitizeRequestData - data complet:', JSON.stringify(sanitized, null, 2));\n            \n            return sanitized;\n        }\n\n        /**\n         * G√©n√©rer un ID de requ√™te unique\n         */\n        generateRequestId() {\n            return 'req_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n        }\n\n        /**\n         * G√©n√©rer un code de session unique\n         */\n        generateSessionCode() {\n            const timestamp = Date.now();\n            const random = Math.random().toString(36).substr(2, 9);\n            const code = `${timestamp}_${random}`;\n            return btoa(code); // Encoder en base64\n        }\n\n        /**\n         * R√©cup√©rer les informations du partenaire depuis l'API\n         */\n        async fetchPartnerInfo() {\n            try {\n                const response = await this.makeRequest('/debug', {\n                    type: this.config.type,\n                    client_id: this.config.clientId,\n                    secret_id: this.config.secretId\n                });\n\n                console.log('üìã R√©ponse debug API:', response);\n\n                // V√©rifier la structure de la r√©ponse\n                if (response.success && response.data) {\n                    const data = response.data;\n                    \n                    // Essayer de r√©cup√©rer le partner_id depuis diff√©rentes structures possibles\n                    let partnerId = null;\n                    \n                    if (data.partner_id) {\n                        partnerId = data.partner_id;\n                    } else if (data.authentication && data.authentication.auth_test && data.authentication.auth_test.partner_id) {\n                        partnerId = data.authentication.auth_test.partner_id;\n                    } else if (data.auth_test && data.auth_test.partner_id) {\n                        partnerId = data.auth_test.partner_id;\n                    }\n                    \n                    if (partnerId) {\n                        this.config.partnerId = partnerId;\n                        \n                        // R√©cup√©rer le service_id depuis la r√©ponse\n                        if (data.service_id) {\n                            this.config.serviceId = data.service_id;\n                        } else {\n                            // Fallback: utiliser le partner_id comme service_id\n                            this.config.serviceId = partnerId;\n                        }\n                        \n                        // Utiliser le partner_id pour d√©terminer le nom du partenaire\n                        if (partnerId === 21) {\n                            this.config.partnerName = 'Fayma';\n                        } else {\n                            this.config.partnerName = `Partner_${partnerId}`;\n                        }\n                        \n                        console.log('‚úÖ Informations partenaire r√©cup√©r√©es:', {\n                            partnerName: this.config.partnerName,\n                            partnerId: this.config.partnerId,\n                            serviceId: this.config.serviceId\n                        });\n                    } else {\n                        console.warn('‚ö†Ô∏è Partner ID non trouv√© dans la r√©ponse, utilisation du partner_id par d√©faut');\n                        this.config.partnerName = `Partner_${this.config.partnerId || 'unknown'}`;\n                    }\n                } else {\n                    console.warn('‚ö†Ô∏è Structure de r√©ponse invalide, utilisation du partner_id par d√©faut');\n                    this.config.partnerName = `Partner_${this.config.partnerId || 'unknown'}`;\n                }\n            } catch (error) {\n                console.warn('‚ö†Ô∏è Erreur lors de la r√©cup√©ration des informations du partenaire:', error.message);\n                this.config.partnerName = 'Partner_unknown';\n            }\n        }\n\n        /**\n         * Appliquer le th√®me\n         */\n        applyTheme(theme) {\n            const container = document.querySelector('.sunuid-qr-code');\n            if (container) {\n                container.className = `sunuid-qr-code sunuid-theme-${theme}`;\n            }\n        }\n\n        /**\n         * G√©rer les erreurs\n         */\n        handleError(error) {\n            console.error('SunuID SDK Error:', error);\n            \n            if (this.config.onError) {\n                this.config.onError(error);\n            }\n        }\n\n        /**\n         * V√©rifier le statut des connexions\n         */\n        async checkConnections() {\n            const status = {\n                api: false,\n                websocket: false,\n                ready: false\n            };\n            \n            // V√©rifier l'API en utilisant l'endpoint debug avec les credentials\n            try {\n                const testResponse = await fetch(this.config.apiUrl + '/debug', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        type: this.config.type,\n                        client_id: this.config.clientId,\n                        secret_id: this.config.secretId\n                    })\n                });\n                \n                if (testResponse.ok) {\n                    const debugData = await testResponse.json();\n                    // L'API est accessible si on re√ßoit une r√©ponse avec success: true\n                    status.api = debugData.success === true;\n                    console.log('üîç API Status:', status.api ? 'accessible' : 'inaccessible');\n                } else {\n                    status.api = false;\n                    console.log('üîç API Status: HTTP', testResponse.status);\n                }\n            } catch (error) {\n                console.log('üîç Test API √©chou√©:', error.message);\n                status.api = false;\n            }\n            \n            // V√©rifier le WebSocket\n            status.websocket = this.socket && this.socket.connected;\n            \n            // Connexions pr√™tes si API est accessible\n            status.ready = status.api;\n            \n            return status;\n        }\n        \n        /**\n         * Attendre que les connexions soient pr√™tes\n         */\n        async waitForConnections(timeout = 5000) {\n            const startTime = Date.now();\n            \n            while (Date.now() - startTime < timeout) {\n                const status = await this.checkConnections();\n                \n                if (status.ready) {\n                    console.log('‚úÖ Connexions pr√™tes');\n                    return status;\n                }\n                \n                console.log('‚è≥ Attente connexions...', status);\n                await new Promise(resolve => setTimeout(resolve, 1000)); // V√©rification toutes les secondes\n            }\n            \n            throw new Error('Timeout connexions - Impossible de g√©n√©rer le QR code');\n        }\n        \n        /**\n         * Obtenir l'URL du QR code g√©n√©r√©\n         */\n        getQRCode() {\n            // Retourner l'URL du QR code si disponible\n            if (this.currentQRUrl) {\n                return this.currentQRUrl;\n            }\n            \n            // Sinon, retourner une URL par d√©faut ou null\n            return null;\n        }\n\n        /**\n         * Nettoyer les ressources\n         */\n        destroy() {\n            this.stopAutoRefresh();\n            \n            // Fermer la connexion WebSocket\n            if (this.socket) {\n                this.socket.disconnect();\n                this.socket = null;\n                console.log('üåê WebSocket d√©connect√©');\n            }\n            \n            this.isInitialized = false;\n            this.logSecurityEvent('SDK_DESTROY');\n            console.log('SunuID SDK d√©truit');\n        }\n\n        /**\n         * Arr√™ter le rafra√Æchissement automatique\n         */\n        stopAutoRefresh() {\n            if (this.refreshTimer) {\n                clearInterval(this.refreshTimer);\n                this.refreshTimer = null;\n                console.log('üîÑ Timer de rafra√Æchissement arr√™t√©');\n            }\n        }\n\n        /**\n         * Obtenir les logs de s√©curit√©\n         */\n        getSecurityLogs() {\n            return window.SunuIDSecurityLogs || [];\n        }\n\n        /**\n         * Nettoyer les logs de s√©curit√©\n         */\n        clearSecurityLogs() {\n            window.SunuIDSecurityLogs = [];\n            this.logSecurityEvent('SECURITY_LOGS_CLEARED');\n        }\n\n        /**\n         * Afficher un loader pendant le scan du QR code\n         */\n        showQRLoader() {\n            console.log('üîÑ Affichage du loader - Scan QR initi√©');\n            \n            // Chercher le conteneur QR dans diff√©rents IDs possibles\n            const containerIds = ['qr-area', 'qr-container', 'sunuid-qr-container'];\n            let container = null;\n            \n            for (const id of containerIds) {\n                container = document.getElementById(id);\n                if (container) break;\n            }\n            \n            if (!container) {\n                console.warn('‚ö†Ô∏è Conteneur QR non trouv√© pour afficher le loader');\n                return;\n            }\n            \n            // Remplacer le contenu par un loader anim√©\n            container.innerHTML = `\n                <div style=\"\n                    text-align: center;\n                    padding: 40px 20px;\n                    background: #f8f9fa;\n                    border: 2px solid #007bff;\n                    border-radius: 10px;\n                    color: #007bff;\n                    font-family: Arial, sans-serif;\n                \">\n                    <div style=\"\n                        width: 60px;\n                        height: 60px;\n                        border: 4px solid #e3f2fd;\n                        border-top: 4px solid #007bff;\n                        border-radius: 50%;\n                        animation: spin 1s linear infinite;\n                        margin: 0 auto 20px auto;\n                    \"></div>\n                    <h3 style=\"margin: 0 0 10px 0; color: #007bff;\">üîç Scan en cours...</h3>\n                    <p style=\"margin: 0; font-size: 14px;\">\n                        Veuillez patienter pendant la v√©rification de votre identit√©.\n                    </p>\n                    <div style=\"margin-top: 15px; font-size: 12px; color: #6c757d;\">\n                        ‚è±Ô∏è Traitement en cours...\n                    </div>\n                </div>\n                <style>\n                    @keyframes spin {\n                        0% { transform: rotate(0deg); }\n                        100% { transform: rotate(360deg); }\n                    }\n                </style>\n            `;\n            \n            console.log('‚úÖ Loader affich√© avec succ√®s');\n        }\n    }\n\n    // Exposer la classe globalement\n    window.SunuID = SunuID;\n    window.sunuidInstance = null;\n\n    // Fonction d'initialisation globale\n    window.initSunuID = function(config) {\n        try {\n            window.sunuidInstance = new SunuID(config);\n            return window.sunuidInstance;\n        } catch (error) {\n            console.error('Erreur lors de l\\'initialisation de SunuID:', error);\n            throw error;\n        }\n    };\n\n})(window); "],"names":["window","_window$SunuIDConfig","_window$SunuIDConfig2","_window$SunuIDConfig3","DEFAULT_CONFIG","apiUrl","SunuIDConfig","clientId","secretId","type","partnerName","theme","language","autoRefresh","refreshInterval","autoInit","onSuccess","onError","onStatusUpdate","onExpired","enableSecurityLogs","validateInputs","maxRetries","requestTimeout","secureInit","secureInitUrl","includes","replace","token","forceRemoteServer","useLocalFallback","SunuID","config","arguments","length","undefined","_classCallCheck","this","_objectSpread","qrCode","refreshTimer","isInitialized","socket","initPromise","init","key","value","_init","_asyncToGenerator","_regenerator","m","_callee","_t","w","_context","p","n","validateSecurityParams","logSecurityEvent","fetchPartnerInfo","obfuscateCredentials","console","log","slice","initWebSocket","v","error","message","a","apply","_secureInit","_callee2","initData","response","result","decodedToken","_t2","_context2","fetch","method","headers","Accept","body","JSON","stringify","ok","Error","concat","status","json","success","data","api_url","decodeSecureToken","client_id","secret_id","expiresIn","expires_in","maxRequests","max_requests","requestCount","parts","split","_parts","_slicedToArray","payload","decodedPayload","atob","tokenData","parse","exp","Date","now","_this","io","warn","setTimeout","ip","getClientIP","query","userId","username","transports","on","id","connected","reason","handleQRStatusUpdate","handleQRScanSuccess","handleQRExpired","showQRLoader","onAny","eventName","callback","_len","args","Array","_key","errors","push","isValidUrl","join","string","url","URL","protocol","_","event","securityLog","timestamp","toISOString","userAgent","navigator","location","href","SunuIDSecurityLogs","originalClientId","originalSecretId","clientIdDisplay","secretIdDisplay","input","trim","emit","_generateQR","_callee3","containerId","options","connectionStatus","socketId","qrContent","qrImageUrl","isLocal","_t3","_t4","_args3","_context3","waitForConnections","makeRequest","content","label","getTypeName","qrCodeUrl","startsWith","currentQRUrl","sessionId","displayQRCode","startAutoRefresh","emitWebSocketEvent","stack","hostname","displayServiceUnavailable","_generateCustomQR","_callee4","_t5","_args4","_context4","qrcode","code","service_id","_x","_x2","_generateAuthQR","_callee5","_args5","_context5","generateQR","_x3","_generateKYCQR","_callee6","originalType","_args6","_context6","f","_x4","_generateSignatureQR","_callee7","_args7","_context7","_x5","_checkQRStatus","_callee8","_t6","_context8","serviceId","handleError","_x6","_generateQRWithContent","_callee9","localQRUrl","_t7","_args9","_context9","generateQRLocal","generateQRRemote","displayQRContent","_x7","_x8","_x9","_generateQRLocal","_callee0","qrUrl","_t8","_args0","_context0","encodeURIComponent","_x0","_x1","_x10","_generateQRRemote","_callee1","_t9","_args1","_context1","text","size","_x11","_x12","_x13","container","document","getElementById","typeName","innerHTML","qrElement","createElement","className","appendChild","applyTheme","_generateCustomQRCode","_callee10","qrContainer","_t0","_context10","generateQRPHP","displayDefaultQR","_x14","_x15","_generateQRClientSide","_callee11","canvas","ctx","_this2","_context11","ensureQRCodeLibrary","QRCode","width","height","getContext","fillStyle","fillRect","Promise","resolve","reject","toCanvas","margin","color","dark","light","font","textAlign","fillText","dataUrl","toDataURL","showQRInstructions","_x16","_x17","_x18","_generateQRPHP","_callee12","qrGeneratorUrl","requestBody","contentType","responseData","_context12","URLSearchParams","foreground_color","background_color","data_uri","_x19","_x20","_x21","_ensureQRCodeLibrary","_callee13","_context13","script","src","onload","onerror","head","instructionsElement","parentElement","querySelector","statusElement","style","display","classList","add","x","y","logo","Image","logoSize","logoX","logoY","drawImage","String","toUpperCase","_refreshQR","_callee14","_result","_t1","_args14","_context14","_x22","_this3","clearInterval","setInterval","_callee15","_t10","_context15","refreshQR","_makeRequest","_callee16","endpoint","_window$SunuIDConfig4","_window$SunuIDConfig5","sanitizedData","endpointPath","retryCount","_loop","_ret","_this4","_context17","sanitizeRequestData","endpoints","dataKeys","Object","keys","controller","timeoutId","errorText","errorData","_t11","_context16","AbortController","abort","signal","clearTimeout","e","statusText","responseKeys","name","d","_regeneratorValues","_x23","_x24","sanitized","_i","_Object$entries","entries","_Object$entries$_i","sanitizeInput","_typeof","Math","random","toString","substr","btoa","_fetchPartnerInfo","_callee17","partnerId","_t12","_context18","partner_id","authentication","auth_test","_checkConnections","_callee18","testResponse","debugData","_t13","_context19","api","websocket","ready","_waitForConnections","_callee19","timeout","startTime","_args20","_context20","checkConnections","stopAutoRefresh","disconnect","_i2","_containerIds","sunuidInstance","initSunuID"],"mappings":"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"}