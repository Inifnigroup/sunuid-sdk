{"version":3,"file":"sunuid-sdk.min.js","sources":["../src/sunuid-sdk.js"],"sourcesContent":["/**\n * SunuID SDK - Package d'intégration pour partenaires\n * \n * @version 1.0.0\n * @author SunuID Team\n * @license MIT\n */\n\n(function(window) {\n    'use strict';\n\n    // Configuration par défaut\n    const DEFAULT_CONFIG = {\n        apiUrl: window.SunuIDConfig?.apiUrl || 'https://api.sunuid.fayma.sn',\n        clientId: null,\n        secretId: null,\n        theme: 'light',\n        language: 'fr',\n        autoRefresh: true,\n        refreshInterval: 30000, // 30 secondes\n        onSuccess: null,\n        onError: null\n    };\n\n    /**\n     * Classe principale SunuID\n     */\n    class SunuID {\n        constructor(config = {}) {\n            this.config = { ...DEFAULT_CONFIG, ...config };\n            this.qrCode = null;\n            this.refreshTimer = null;\n            this.isInitialized = false;\n            \n            this.init();\n        }\n\n        /**\n         * Initialisation du SDK\n         */\n        init() {\n            if (!this.config.clientId || !this.config.secretId) {\n                throw new Error('SunuID: clientId et secretId sont requis');\n            }\n\n            this.isInitialized = true;\n            console.log('SunuID SDK initialisé avec succès');\n        }\n\n        /**\n         * Générer un QR code d'authentification\n         */\n        async generateAuthQR(containerId, options = {}) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialisé');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-generate', {\n                    type: 1, // Type 1 pour authentification\n                    ...options\n                });\n\n                if (response.success) {\n                    // Construire l'URL complète de l'image QR avec la base URL pour les images\n                    const imageBaseUrl = 'https://sunuid.fayma.sn';\n                    const qrImageUrl = `${imageBaseUrl}${response.data.qrcode}`;\n                    this.displayQRCode(containerId, qrImageUrl, 'auth', options);\n                    this.startAutoRefresh(containerId, 'auth', options);\n                    return {\n                        ...response.data,\n                        qrCodeUrl: qrImageUrl,\n                        sessionId: response.data.service_id\n                    };\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la génération du QR code');\n                }\n            } catch (error) {\n                console.error('Erreur API détectée:', error.message);\n                console.log('Affichage du message \"Service non disponible\" pour auth');\n                this.displayServiceUnavailable(containerId, 'auth');\n                throw new Error('Service non disponible');\n            }\n        }\n\n        /**\n         * Générer un QR code KYC\n         */\n        async generateKYCQR(containerId, options = {}) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialisé');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-generate', {\n                    type: 2, // Type 2 pour KYC\n                    ...options\n                });\n\n                if (response.success) {\n                    // Construire l'URL complète de l'image QR avec la base URL pour les images\n                    const imageBaseUrl = 'https://sunuid.fayma.sn';\n                    const qrImageUrl = `${imageBaseUrl}${response.data.qrcode}`;\n                    this.displayQRCode(containerId, qrImageUrl, 'kyc', options);\n                    this.startAutoRefresh(containerId, 'kyc', options);\n                    return {\n                        ...response.data,\n                        qrCodeUrl: qrImageUrl,\n                        sessionId: response.data.service_id\n                    };\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la génération du QR code KYC');\n                }\n            } catch (error) {\n                console.error('Erreur API détectée:', error.message);\n                console.log('Affichage du message \"Service non disponible\" pour kyc');\n                this.displayServiceUnavailable(containerId, 'kyc');\n                throw new Error('Service non disponible');\n            }\n        }\n\n        /**\n         * Générer un QR code avec un type personnalisé\n         */\n        async generateCustomQR(containerId, type, options = {}) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialisé');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-generate', {\n                    type: type, // Type personnalisé (1, 2, 3, etc.)\n                    ...options\n                });\n\n                if (response.success) {\n                    // Construire l'URL complète de l'image QR avec la base URL pour les images\n                    const imageBaseUrl = 'https://sunuid.fayma.sn';\n                    const qrImageUrl = `${imageBaseUrl}${response.data.qrcode}`;\n                    this.displayQRCode(containerId, qrImageUrl, type, options);\n                    this.startAutoRefresh(containerId, type, options);\n                    return {\n                        ...response.data,\n                        qrCodeUrl: qrImageUrl,\n                        sessionId: response.data.service_id\n                    };\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la génération du QR code');\n                }\n            } catch (error) {\n                console.error('Erreur API détectée:', error.message);\n                console.log('Affichage du message \"Service non disponible\" pour type ' + type);\n                this.displayServiceUnavailable(containerId, type);\n                throw new Error('Service non disponible');\n            }\n        }\n\n        /**\n         * Vérifier le statut d'un QR code\n         */\n        async checkQRStatus(sessionId) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialisé');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-status', {\n                    serviceId: sessionId\n                });\n\n                if (response.success) {\n                    return response.data;\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la vérification du statut');\n                }\n            } catch (error) {\n                this.handleError(error);\n                throw error;\n            }\n        }\n\n        /**\n         * Afficher un QR code dans un conteneur\n         */\n        displayQRCode(containerId, qrUrl, type, options = {}) {\n            const container = document.getElementById(containerId);\n            if (!container) {\n                throw new Error(`Conteneur avec l'ID \"${containerId}\" non trouvé`);\n            }\n\n            // Nettoyer le conteneur\n            container.innerHTML = '';\n\n            // Créer l'élément QR code\n            const qrElement = document.createElement('div');\n            qrElement.className = 'sunuid-qr-code';\n            qrElement.innerHTML = `\n                    <div class=\"sunuid-qr-header\">\n                    <h3>${type === 1 ? 'Authentification' : type === 2 ? 'Vérification KYC' : 'Service Type ' + type}</h3>\n                    </div>\n                <div class=\"sunuid-qr-image\">\n                    <img src=\"${qrUrl}\" alt=\"QR Code SunuID\" style=\"max-width: 300px; height: auto;\">\n                    </div>\n                <div class=\"sunuid-qr-instructions\">\n                    <p>Scannez ce QR code avec l'application SunuID pour vous connecter</p>\n                    </div>\n                <div class=\"sunuid-qr-status\" id=\"sunuid-status\">\n                    <p>En attente de scan...</p>\n                </div>\n            `;\n\n            container.appendChild(qrElement);\n\n            // Appliquer le thème\n            this.applyTheme(options.theme || this.config.theme);\n        }\n\n        /**\n         * Afficher \"Service non disponible\"\n         */\n        displayServiceUnavailable(containerId, type) {\n            console.log(`displayServiceUnavailable appelée pour ${containerId}, type: ${type}`);\n            const container = document.getElementById(containerId);\n            if (!container) {\n                console.error(`Container ${containerId} non trouvé`);\n                return;\n            }\n\n            container.innerHTML = `\n                <div class=\"sunuid-service-unavailable\" style=\"\n                    text-align: center;\n                    padding: 40px 20px;\n                    background: #f8f9fa;\n                    border: 2px dashed #dee2e6;\n                    border-radius: 10px;\n                    color: #6c757d;\n                    font-family: Arial, sans-serif;\n                \">\n                    <div style=\"font-size: 48px; margin-bottom: 20px;\">⚠️</div>\n                    <h3 style=\"margin: 0 0 10px 0; color: #495057;\">Service Non Disponible</h3>\n                    <p style=\"margin: 0; font-size: 14px;\">\n                        Le service d'authentification est temporairement indisponible.<br>\n                        Veuillez réessayer plus tard.\n                    </p>\n                    <div style=\"margin-top: 20px; font-size: 12px; color: #adb5bd;\">\n                        Type: ${type.toUpperCase()}\n                    </div>\n                </div>\n            `;\n        }\n\n        /**\n         * Rafraîchir un QR code\n         */\n        async refreshQR(containerId, type, options = {}) {\n            try {\n                const result = type === 1 \n                    ? await this.generateAuthQR(containerId, options)\n                    : type === 2 \n                    ? await this.generateKYCQR(containerId, options)\n                    : await this.generateCustomQR(containerId, type, options);\n                \n                return result;\n            } catch (error) {\n                console.error('Erreur lors du rafraîchissement:', error.message);\n                this.displayServiceUnavailable(containerId, type);\n                throw error;\n            }\n        }\n\n        /**\n         * Démarrer le rafraîchissement automatique\n         */\n        startAutoRefresh(containerId, type, options) {\n            if (!this.config.autoRefresh) return;\n\n            this.refreshTimer = setInterval(async () => {\n                try {\n                    await this.refreshQR(containerId, type, options);\n                } catch (error) {\n                    console.warn('Erreur lors du rafraîchissement automatique:', error);\n                }\n            }, this.config.refreshInterval);\n        }\n\n        /**\n         * Démarrer le timer de compte à rebours\n         */\n\n\n        /**\n         * Effectuer une requête API\n         */\n        async makeRequest(endpoint, data) {\n            // Utiliser l'endpoint depuis la configuration si disponible\n            const endpointPath = window.SunuIDConfig?.endpoints?.[endpoint.replace('/', '')] || endpoint;\n            const url = `${this.config.apiUrl}${endpointPath}`;\n            \n            try {\n                const response = await fetch(url, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': `Bearer ${this.config.clientId}:${this.config.secretId}`,\n                        'Accept': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        ...data,\n                        client_id: this.config.clientId,\n                        secret_id: this.config.secretId\n                    })\n                });\n\n                if (!response.ok) {\n                    const errorText = await response.text();\n                    let errorData;\n                    try {\n                        errorData = JSON.parse(errorText);\n                    } catch (e) {\n                        errorData = { message: errorText };\n                    }\n                    \n                    throw new Error(errorData.message || `Erreur HTTP: ${response.status}`);\n                }\n\n                const result = await response.json();\n                return result;\n            } catch (error) {\n                console.error('Erreur API SunuID:', error);\n                throw error;\n            }\n        }\n\n        /**\n         * Appliquer le thème\n         */\n        applyTheme(theme) {\n            const container = document.querySelector('.sunuid-qr-code');\n            if (container) {\n                container.className = `sunuid-qr-code sunuid-theme-${theme}`;\n            }\n        }\n\n        /**\n         * Gérer les erreurs\n         */\n        handleError(error) {\n            console.error('SunuID SDK Error:', error);\n            \n            if (this.config.onError) {\n                this.config.onError(error);\n            }\n        }\n\n        /**\n         * Nettoyer les ressources\n         */\n        destroy() {\n            if (this.refreshTimer) {\n                clearInterval(this.refreshTimer);\n            }\n            \n            this.isInitialized = false;\n            console.log('SunuID SDK détruit');\n        }\n    }\n\n    // Exposer la classe globalement\n    window.SunuID = SunuID;\n    window.sunuidInstance = null;\n\n    // Fonction d'initialisation globale\n    window.initSunuID = function(config) {\n        try {\n            window.sunuidInstance = new SunuID(config);\n            return window.sunuidInstance;\n        } catch (error) {\n            console.error('Erreur lors de l\\'initialisation de SunuID:', error);\n            throw error;\n        }\n    };\n\n})(window); "],"names":["window","_window$SunuIDConfig","DEFAULT_CONFIG","apiUrl","SunuIDConfig","clientId","secretId","theme","language","autoRefresh","refreshInterval","onSuccess","onError","SunuID","config","arguments","length","undefined","_classCallCheck","this","_objectSpread","qrCode","refreshTimer","isInitialized","init","key","value","Error","console","log","_generateAuthQR","_asyncToGenerator","_regenerator","m","_callee","containerId","options","response","qrImageUrl","_t","_args","w","_context","p","n","makeRequest","type","v","success","concat","data","qrcode","displayQRCode","startAutoRefresh","a","qrCodeUrl","sessionId","service_id","message","error","displayServiceUnavailable","_x","apply","_generateKYCQR","_callee2","_t2","_args2","_context2","_x2","_generateCustomQR","_callee3","_t3","_args3","_context3","_x3","_x4","_checkQRStatus","_callee4","_t4","_context4","serviceId","handleError","_x5","qrUrl","container","document","getElementById","innerHTML","qrElement","createElement","className","appendChild","applyTheme","toUpperCase","_refreshQR","_callee5","result","_t5","_t6","_t7","_args5","_context5","generateAuthQR","generateKYCQR","generateCustomQR","_x6","_x7","_this","setInterval","_callee6","_t8","_context6","refreshQR","warn","_makeRequest","_callee7","endpoint","_window$SunuIDConfig2","endpointPath","url","errorText","errorData","_t9","_context7","endpoints","replace","fetch","method","headers","Authorization","Accept","body","JSON","stringify","client_id","secret_id","ok","text","parse","e","status","json","_x8","_x9","querySelector","clearInterval","sunuidInstance","initSunuID"],"mappings":"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"}