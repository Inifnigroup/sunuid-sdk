{"version":3,"file":"sunuid-sdk.min.js","sources":["../src/sunuid-sdk.js"],"sourcesContent":["/**\n * SunuID SDK - Package d'int√©gration pour partenaires\n * \n * @version 1.0.0\n * @author SunuID Team\n * @license MIT\n */\n\n(function(window) {\n    'use strict';\n\n    // Configuration par d√©faut\n    const DEFAULT_CONFIG = {\n        apiUrl: 'https://sunuid.fayma.sn/api',\n        clientId: null,\n        secretId: null,\n        theme: 'light',\n        language: 'fr',\n        autoRefresh: true,\n        refreshInterval: 30000, // 30 secondes\n        onSuccess: null,\n        onError: null,\n        onExpired: null\n    };\n\n    /**\n     * Classe principale SunuID\n     */\n    class SunuID {\n        constructor(config = {}) {\n            this.config = { ...DEFAULT_CONFIG, ...config };\n            this.qrCode = null;\n            this.refreshTimer = null;\n            this.isInitialized = false;\n            \n            this.init();\n        }\n\n        /**\n         * Initialisation du SDK\n         */\n        init() {\n            if (!this.config.clientId || !this.config.secretId) {\n                throw new Error('SunuID: clientId et secretId sont requis');\n            }\n\n            this.isInitialized = true;\n            console.log('SunuID SDK initialis√© avec succ√®s');\n        }\n\n        /**\n         * G√©n√©rer un QR code d'authentification\n         */\n        async generateAuthQR(containerId, options = {}) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n\n            try {\n                // Essayer d'abord l'API r√©elle\n                const response = await this.makeRequest('/auth/qr-generate', {\n                    type: 'auth',\n                    ...options\n                });\n\n                if (response.success) {\n                    this.displayQRCode(containerId, response.data.qr_code_url, 'auth', options);\n                    this.startAutoRefresh(containerId, 'auth', options);\n                    return response.data;\n                } else {\n                    throw new Error(response.message);\n                }\n            } catch (error) {\n                console.warn('Erreur API d√©tect√©e, g√©n√©ration d\\'un QR code de test:', error.message);\n                console.log('Type d\\'erreur:', error.name, 'Message:', error.message);\n                \n                // En cas d'√©chec de l'API (CORS, 500, ou autre), g√©n√©rer un QR code de test\n                const testData = {\n                    type: 'auth',\n                    clientId: this.config.clientId,\n                    timestamp: Date.now(),\n                    sessionId: 'test_' + Math.random().toString(36).substr(2, 9),\n                    apiUrl: this.config.apiUrl,\n                    error: error.message,\n                    errorType: error.name,\n                    ...options\n                };\n                \n                const qrData = JSON.stringify(testData);\n                const qrUrl = `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(qrData)}`;\n                \n                this.displayQRCode(containerId, qrUrl, 'auth', options);\n                this.startAutoRefresh(containerId, 'auth', options);\n                \n                return {\n                    success: true,\n                    data: {\n                        qr_code_url: qrUrl,\n                        qr_id: testData.sessionId,\n                        expires_at: Date.now() + 30000\n                    }\n                };\n            }\n        }\n\n        /**\n         * G√©n√©rer un QR code KYC\n         */\n        async generateKYCQR(containerId, options = {}) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n\n            try {\n                // Essayer d'abord l'API r√©elle\n                const response = await this.makeRequest('/auth/qr-generate', {\n                    type: 'kyc',\n                    ...options\n                });\n\n                if (response.success) {\n                    this.displayQRCode(containerId, response.data.qr_code_url, 'kyc', options);\n                    this.startAutoRefresh(containerId, 'kyc', options);\n                    return response.data;\n                } else {\n                    throw new Error(response.message);\n                }\n            } catch (error) {\n                console.warn('Erreur API d√©tect√©e, g√©n√©ration d\\'un QR code de test:', error.message);\n                console.log('Type d\\'erreur:', error.name, 'Message:', error.message);\n                \n                // En cas d'√©chec de l'API (CORS, 500, ou autre), g√©n√©rer un QR code de test\n                const testData = {\n                    type: 'kyc',\n                    clientId: this.config.clientId,\n                    timestamp: Date.now(),\n                    sessionId: 'test_' + Math.random().toString(36).substr(2, 9),\n                    kycType: options.kycType || 'full',\n                    requiredFields: options.requiredFields || ['identity', 'address', 'phone'],\n                    apiUrl: this.config.apiUrl,\n                    error: error.message,\n                    errorType: error.name,\n                    ...options\n                };\n                \n                const qrData = JSON.stringify(testData);\n                const qrUrl = `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(qrData)}`;\n                \n                this.displayQRCode(containerId, qrUrl, 'kyc', options);\n                this.startAutoRefresh(containerId, 'kyc', options);\n                \n                return {\n                    success: true,\n                    data: {\n                        qr_code_url: qrUrl,\n                        qr_id: testData.sessionId,\n                        expires_at: Date.now() + 30000\n                    }\n                };\n            }\n        }\n\n        /**\n         * V√©rifier le statut d'un QR code\n         */\n        async checkQRStatus(qrId) {\n            try {\n                const response = await this.makeRequest('/auth/qr-status', {\n                    qr_id: qrId\n                });\n\n                return response.data;\n            } catch (error) {\n                this.handleError(error);\n                throw error;\n            }\n        }\n\n        /**\n         * Afficher le QR code dans le conteneur\n         */\n        displayQRCode(containerId, qrUrl, type, options = {}) {\n            const container = document.getElementById(containerId);\n            if (!container) {\n                throw new Error(`Conteneur avec l'ID \"${containerId}\" non trouv√©`);\n            }\n\n            const theme = options.theme || this.config.theme;\n            const language = options.language || this.config.language;\n\n            container.innerHTML = `\n                <div class=\"sunuid-qr-container sunuid-theme-${theme}\">\n                    <div class=\"sunuid-qr-header\">\n                        <h3 class=\"sunuid-qr-title\">\n                            ${type === 'auth' ? 'üîê Authentification' : 'üìã V√©rification KYC'}\n                        </h3>\n                        <p class=\"sunuid-qr-subtitle\">\n                            ${type === 'auth' ? \n                                'Scannez ce QR code avec l\\'application SunuID pour vous connecter' :\n                                'Scannez ce QR code avec l\\'application SunuID pour compl√©ter votre profil'\n                            }\n                        </p>\n                    </div>\n                    <div class=\"sunuid-qr-code\">\n                        <img src=\"${qrUrl}\" alt=\"QR Code SunuID\" class=\"sunuid-qr-image\">\n                        <div class=\"sunuid-qr-overlay\">\n                            <div class=\"sunuid-qr-spinner\"></div>\n                        </div>\n                    </div>\n                    <div class=\"sunuid-qr-footer\">\n                        <p class=\"sunuid-qr-timer\">\n                            <i class=\"fa-solid fa-clock\"></i>\n                            <span id=\"sunuid-timer\">30</span> secondes\n                        </p>\n                        <button class=\"sunuid-qr-refresh\" onclick=\"sunuidInstance.refreshQR('${containerId}', '${type}', ${JSON.stringify(options)})\">\n                            <i class=\"fa-solid fa-sync-alt\"></i>\n                            Actualiser\n                        </button>\n                    </div>\n                </div>\n            `;\n\n            this.qrCode = {\n                containerId,\n                type,\n                options,\n                qrUrl\n            };\n\n            this.startTimer();\n        }\n\n        /**\n         * Actualiser le QR code\n         */\n        async refreshQR(containerId, type, options = {}) {\n            try {\n                if (type === 'auth') {\n                    await this.generateAuthQR(containerId, options);\n                } else {\n                    await this.generateKYCQR(containerId, options);\n                }\n            } catch (error) {\n                this.handleError(error);\n            }\n        }\n\n        /**\n         * D√©marrer le timer de rafra√Æchissement automatique\n         */\n        startAutoRefresh(containerId, type, options) {\n            if (!this.config.autoRefresh) return;\n\n            this.refreshTimer = setInterval(async () => {\n                try {\n                    await this.refreshQR(containerId, type, options);\n                } catch (error) {\n                    console.warn('Erreur lors du rafra√Æchissement automatique:', error);\n                }\n            }, this.config.refreshInterval);\n        }\n\n        /**\n         * D√©marrer le timer de compte √† rebours\n         */\n        startTimer() {\n            let timeLeft = 30;\n            const timerElement = document.getElementById('sunuid-timer');\n            \n            const timer = setInterval(() => {\n                timeLeft--;\n                if (timerElement) {\n                    timerElement.textContent = timeLeft;\n                }\n                \n                if (timeLeft <= 0) {\n                    clearInterval(timer);\n                    if (this.config.onExpired) {\n                        this.config.onExpired();\n                    }\n                }\n            }, 1000);\n        }\n\n        /**\n         * Effectuer une requ√™te API\n         */\n        async makeRequest(endpoint, data) {\n            const url = `${this.config.apiUrl}${endpoint}`;\n            \n            // Pr√©parer les donn√©es avec les identifiants\n            const requestData = {\n                ...data,\n                client_id: this.config.clientId,\n                secret_id: this.config.secretId\n            };\n            \n            try {\n                const response = await fetch(url, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json'\n                    },\n                    body: JSON.stringify(requestData)\n                });\n\n                if (!response.ok) {\n                    console.warn(`Erreur HTTP ${response.status}: ${response.statusText}`);\n                    throw new Error(`Erreur HTTP: ${response.status} - ${response.statusText}`);\n                }\n\n                return await response.json();\n            } catch (error) {\n                // Si c'est une erreur CORS, on la g√®re sp√©cifiquement\n                if (error.name === 'TypeError' && error.message.includes('CORS')) {\n                    console.warn('Erreur CORS d√©tect√©e, utilisation de QR codes de test');\n                    throw new Error('CORS_ERROR');\n                }\n                // Pour toutes les autres erreurs (500, 404, etc.)\n                console.warn('Erreur API d√©tect√©e:', error.message);\n                throw error;\n            }\n        }\n\n        /**\n         * G√©rer les erreurs\n         */\n        handleError(error) {\n            console.error('SunuID SDK Error:', error);\n            \n            if (this.config.onError) {\n                this.config.onError(error);\n            }\n        }\n\n        /**\n         * Nettoyer les ressources\n         */\n        destroy() {\n            if (this.refreshTimer) {\n                clearInterval(this.refreshTimer);\n            }\n            \n            this.isInitialized = false;\n            console.log('SunuID SDK d√©truit');\n        }\n    }\n\n    // Exposer la classe globalement\n    window.SunuID = SunuID;\n    window.sunuidInstance = null;\n\n    // Fonction d'initialisation globale\n    window.initSunuID = function(config) {\n        try {\n            window.sunuidInstance = new SunuID(config);\n            return window.sunuidInstance;\n        } catch (error) {\n            console.error('Erreur lors de l\\'initialisation de SunuID:', error);\n            throw error;\n        }\n    };\n\n})(window); "],"names":["window","DEFAULT_CONFIG","apiUrl","clientId","secretId","theme","language","autoRefresh","refreshInterval","onSuccess","onError","onExpired","SunuID","config","arguments","length","undefined","_classCallCheck","this","_objectSpread","qrCode","refreshTimer","isInitialized","init","key","value","Error","console","log","_generateAuthQR","_asyncToGenerator","_regenerator","m","_callee","containerId","options","response","testData","qrData","qrUrl","_t","_args","w","_context","p","n","makeRequest","type","v","success","displayQRCode","data","qr_code_url","startAutoRefresh","a","message","warn","name","timestamp","Date","now","sessionId","Math","random","toString","substr","error","errorType","JSON","stringify","concat","encodeURIComponent","qr_id","expires_at","_x","apply","_generateKYCQR","_callee2","_t2","_args2","_context2","kycType","requiredFields","_x2","_checkQRStatus","_callee3","qrId","_t3","_context3","handleError","_x3","container","document","getElementById","innerHTML","startTimer","_refreshQR","_callee4","_t4","_args4","_context4","generateAuthQR","generateKYCQR","_x4","_x5","_this","setInterval","_callee5","_t5","_context5","refreshQR","_this2","timeLeft","timerElement","timer","textContent","clearInterval","_makeRequest","_callee6","endpoint","url","requestData","_t6","_context6","client_id","secret_id","fetch","method","headers","Accept","body","ok","status","statusText","json","includes","_x6","_x7","sunuidInstance","initSunuID"],"mappings":"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"}