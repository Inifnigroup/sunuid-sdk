{"version":3,"file":"sunuid-sdk.min.js","sources":["../src/sunuid-sdk.js"],"sourcesContent":["/**\n * SunuID SDK - Package d'intégration pour partenaires\n * \n * @version 1.0.0\n * @author SunuID Team\n * @license MIT\n */\n\n(function(window) {\n    'use strict';\n\n    // Configuration par défaut\n    const DEFAULT_CONFIG = {\n        apiUrl: window.SunuIDConfig?.apiUrl || 'https://api.sunuid.fayma.sn',\n        clientId: null,\n        secretId: null,\n        theme: 'light',\n        language: 'fr',\n        autoRefresh: true,\n        refreshInterval: 30000, // 30 secondes\n        onSuccess: null,\n        onError: null,\n        onExpired: null\n    };\n\n    /**\n     * Classe principale SunuID\n     */\n    class SunuID {\n        constructor(config = {}) {\n            this.config = { ...DEFAULT_CONFIG, ...config };\n            this.qrCode = null;\n            this.refreshTimer = null;\n            this.isInitialized = false;\n            \n            this.init();\n        }\n\n        /**\n         * Initialisation du SDK\n         */\n        init() {\n            if (!this.config.clientId || !this.config.secretId) {\n                throw new Error('SunuID: clientId et secretId sont requis');\n            }\n\n            this.isInitialized = true;\n            console.log('SunuID SDK initialisé avec succès');\n        }\n\n        /**\n         * Générer un QR code d'authentification\n         */\n        async generateAuthQR(containerId, options = {}) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialisé');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-generate', {\n                    type: 'auth',\n                    ...options\n                });\n\n                if (response.success) {\n                    this.displayQRCode(containerId, response.data.qrCodeUrl, 'auth', options);\n                    this.startAutoRefresh(containerId, 'auth', options);\n                    return response.data;\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la génération du QR code');\n                }\n            } catch (error) {\n                console.error('Erreur API détectée:', error.message);\n                console.log('Affichage du message \"Service non disponible\" pour auth');\n                this.displayServiceUnavailable(containerId, 'auth');\n                throw new Error('Service non disponible');\n            }\n        }\n\n        /**\n         * Générer un QR code KYC\n         */\n        async generateKYCQR(containerId, options = {}) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialisé');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-generate', {\n                    type: 'kyc',\n                    ...options\n                });\n\n                if (response.success) {\n                    this.displayQRCode(containerId, response.data.qrCodeUrl, 'kyc', options);\n                    this.startAutoRefresh(containerId, 'kyc', options);\n                    return response.data;\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la génération du QR code KYC');\n                }\n            } catch (error) {\n                console.error('Erreur API détectée:', error.message);\n                console.log('Affichage du message \"Service non disponible\" pour kyc');\n                this.displayServiceUnavailable(containerId, 'kyc');\n                throw new Error('Service non disponible');\n            }\n        }\n\n        /**\n         * Vérifier le statut d'un QR code\n         */\n        async checkQRStatus(sessionId) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialisé');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-status', {\n                    sessionId: sessionId\n                });\n\n                if (response.success) {\n                return response.data;\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la vérification du statut');\n                }\n            } catch (error) {\n                this.handleError(error);\n                throw error;\n            }\n        }\n\n        /**\n         * Afficher un QR code dans un conteneur\n         */\n        displayQRCode(containerId, qrUrl, type, options = {}) {\n            const container = document.getElementById(containerId);\n            if (!container) {\n                throw new Error(`Conteneur avec l'ID \"${containerId}\" non trouvé`);\n            }\n\n            // Nettoyer le conteneur\n            container.innerHTML = '';\n\n            // Créer l'élément QR code\n            const qrElement = document.createElement('div');\n            qrElement.className = 'sunuid-qr-code';\n            qrElement.innerHTML = `\n                    <div class=\"sunuid-qr-header\">\n                    <h3>${type === 'auth' ? 'Authentification' : 'Vérification KYC'}</h3>\n                    <div class=\"sunuid-timer\">\n                        <span>Expire dans: </span>\n                        <span id=\"sunuid-timer\">30</span>\n                        <span> secondes</span>\n                    </div>\n                        </div>\n                <div class=\"sunuid-qr-image\">\n                    <img src=\"${qrUrl}\" alt=\"QR Code SunuID\" style=\"max-width: 300px; height: auto;\">\n                    </div>\n                <div class=\"sunuid-qr-instructions\">\n                    <p>Scannez ce QR code avec l'application SunuID pour vous connecter</p>\n                    </div>\n                <div class=\"sunuid-qr-status\" id=\"sunuid-status\">\n                    <p>En attente de scan...</p>\n                </div>\n            `;\n\n            container.appendChild(qrElement);\n\n            // Démarrer le timer\n            this.startTimer();\n\n            // Appliquer le thème\n            this.applyTheme(options.theme || this.config.theme);\n        }\n\n        /**\n         * Afficher \"Service non disponible\"\n         */\n        displayServiceUnavailable(containerId, type) {\n            console.log(`displayServiceUnavailable appelée pour ${containerId}, type: ${type}`);\n            const container = document.getElementById(containerId);\n            if (!container) {\n                console.error(`Container ${containerId} non trouvé`);\n                return;\n            }\n\n            container.innerHTML = `\n                <div class=\"sunuid-service-unavailable\" style=\"\n                    text-align: center;\n                    padding: 40px 20px;\n                    background: #f8f9fa;\n                    border: 2px dashed #dee2e6;\n                    border-radius: 10px;\n                    color: #6c757d;\n                    font-family: Arial, sans-serif;\n                \">\n                    <div style=\"font-size: 48px; margin-bottom: 20px;\">⚠️</div>\n                    <h3 style=\"margin: 0 0 10px 0; color: #495057;\">Service Non Disponible</h3>\n                    <p style=\"margin: 0; font-size: 14px;\">\n                        Le service d'authentification est temporairement indisponible.<br>\n                        Veuillez réessayer plus tard.\n                    </p>\n                    <div style=\"margin-top: 20px; font-size: 12px; color: #adb5bd;\">\n                        Type: ${type.toUpperCase()}\n                    </div>\n                </div>\n            `;\n        }\n\n        /**\n         * Rafraîchir un QR code\n         */\n        async refreshQR(containerId, type, options = {}) {\n            try {\n                const result = type === 'auth' \n                    ? await this.generateAuthQR(containerId, options)\n                    : await this.generateKYCQR(containerId, options);\n                \n                return result;\n            } catch (error) {\n                console.error('Erreur lors du rafraîchissement:', error.message);\n                this.displayServiceUnavailable(containerId, type);\n                throw error;\n            }\n        }\n\n        /**\n         * Démarrer le rafraîchissement automatique\n         */\n        startAutoRefresh(containerId, type, options) {\n            if (!this.config.autoRefresh) return;\n\n            this.refreshTimer = setInterval(async () => {\n                try {\n                    await this.refreshQR(containerId, type, options);\n                } catch (error) {\n                    console.warn('Erreur lors du rafraîchissement automatique:', error);\n                }\n            }, this.config.refreshInterval);\n        }\n\n        /**\n         * Démarrer le timer de compte à rebours\n         */\n        startTimer() {\n            let timeLeft = 30;\n            const timerElement = document.getElementById('sunuid-timer');\n            \n            const timer = setInterval(() => {\n                timeLeft--;\n                if (timerElement) {\n                    timerElement.textContent = timeLeft;\n                }\n                \n                if (timeLeft <= 0) {\n                    clearInterval(timer);\n                    if (this.config.onExpired) {\n                        this.config.onExpired();\n                    }\n                }\n            }, 1000);\n        }\n\n        /**\n         * Effectuer une requête API\n         */\n        async makeRequest(endpoint, data) {\n            // Utiliser l'endpoint depuis la configuration si disponible\n            const endpointPath = window.SunuIDConfig?.endpoints?.[endpoint.replace('/', '')] || endpoint;\n            const url = `${this.config.apiUrl}${endpointPath}`;\n            \n            try {\n                const response = await fetch(url, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': `Bearer ${this.config.clientId}:${this.config.secretId}`,\n                        'Accept': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        ...data,\n                        client_id: this.config.clientId,\n                        secret_id: this.config.secretId\n                    })\n                });\n\n                if (!response.ok) {\n                    const errorText = await response.text();\n                    let errorData;\n                    try {\n                        errorData = JSON.parse(errorText);\n                    } catch (e) {\n                        errorData = { message: errorText };\n                    }\n                    \n                    throw new Error(errorData.message || `Erreur HTTP: ${response.status}`);\n                }\n\n                const result = await response.json();\n                return result;\n            } catch (error) {\n                console.error('Erreur API SunuID:', error);\n                throw error;\n            }\n        }\n\n        /**\n         * Appliquer le thème\n         */\n        applyTheme(theme) {\n            const container = document.querySelector('.sunuid-qr-code');\n            if (container) {\n                container.className = `sunuid-qr-code sunuid-theme-${theme}`;\n            }\n        }\n\n        /**\n         * Gérer les erreurs\n         */\n        handleError(error) {\n            console.error('SunuID SDK Error:', error);\n            \n            if (this.config.onError) {\n                this.config.onError(error);\n            }\n        }\n\n        /**\n         * Nettoyer les ressources\n         */\n        destroy() {\n            if (this.refreshTimer) {\n                clearInterval(this.refreshTimer);\n            }\n            \n            this.isInitialized = false;\n            console.log('SunuID SDK détruit');\n        }\n    }\n\n    // Exposer la classe globalement\n    window.SunuID = SunuID;\n    window.sunuidInstance = null;\n\n    // Fonction d'initialisation globale\n    window.initSunuID = function(config) {\n        try {\n            window.sunuidInstance = new SunuID(config);\n            return window.sunuidInstance;\n        } catch (error) {\n            console.error('Erreur lors de l\\'initialisation de SunuID:', error);\n            throw error;\n        }\n    };\n\n})(window); "],"names":["window","_window$SunuIDConfig","DEFAULT_CONFIG","apiUrl","SunuIDConfig","clientId","secretId","theme","language","autoRefresh","refreshInterval","onSuccess","onError","onExpired","SunuID","config","arguments","length","undefined","_classCallCheck","this","_objectSpread","qrCode","refreshTimer","isInitialized","init","key","value","Error","console","log","_generateAuthQR","_asyncToGenerator","_regenerator","m","_callee","containerId","options","response","_t","_args","w","_context","p","n","makeRequest","type","v","success","displayQRCode","data","qrCodeUrl","startAutoRefresh","a","message","error","displayServiceUnavailable","_x","apply","_generateKYCQR","_callee2","_t2","_args2","_context2","_x2","_checkQRStatus","_callee3","sessionId","_t3","_context3","handleError","_x3","qrUrl","container","document","getElementById","concat","innerHTML","qrElement","createElement","className","appendChild","startTimer","applyTheme","toUpperCase","_refreshQR","_callee4","result","_t4","_t5","_args4","_context4","generateAuthQR","generateKYCQR","_x4","_x5","_this","setInterval","_callee5","_t6","_context5","refreshQR","warn","_this2","timeLeft","timerElement","timer","textContent","clearInterval","_makeRequest","_callee6","endpoint","_window$SunuIDConfig2","endpointPath","url","errorText","errorData","_t7","_context6","endpoints","replace","fetch","method","headers","Authorization","Accept","body","JSON","stringify","client_id","secret_id","ok","text","parse","e","status","json","_x6","_x7","querySelector","sunuidInstance","initSunuID"],"mappings":"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"}