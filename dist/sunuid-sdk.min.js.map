{"version":3,"file":"sunuid-sdk.min.js","sources":["../src/sunuid-sdk.js"],"sourcesContent":["/**\n * SunuID SDK - Package d'int√©gration pour partenaires\n * \n * @version 1.0.0\n * @author SunuID Team\n * @license MIT\n */\n\n(function(window) {\n    'use strict';\n\n    // Configuration par d√©faut\n    const DEFAULT_CONFIG = {\n        apiUrl: 'https://sunuid.fayma.sn/api',\n        clientId: null,\n        secretId: null,\n        theme: 'light',\n        language: 'fr',\n        autoRefresh: true,\n        refreshInterval: 30000, // 30 secondes\n        onSuccess: null,\n        onError: null,\n        onExpired: null\n    };\n\n    /**\n     * Classe principale SunuID\n     */\n    class SunuID {\n        constructor(config = {}) {\n            this.config = { ...DEFAULT_CONFIG, ...config };\n            this.qrCode = null;\n            this.refreshTimer = null;\n            this.isInitialized = false;\n            \n            this.init();\n        }\n\n        /**\n         * Initialisation du SDK\n         */\n        init() {\n            if (!this.config.clientId || !this.config.secretId) {\n                throw new Error('SunuID: clientId et secretId sont requis');\n            }\n\n            this.isInitialized = true;\n            console.log('SunuID SDK initialis√© avec succ√®s');\n        }\n\n        /**\n         * G√©n√©rer un QR code d'authentification\n         */\n        async generateAuthQR(containerId, options = {}) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n\n            try {\n                // Essayer d'abord l'API r√©elle\n                const response = await this.makeRequest('/auth/qr-generate', {\n                    type: 'auth',\n                    ...options\n                });\n\n                if (response.success) {\n                    this.displayQRCode(containerId, response.data.qr_code_url, 'auth', options);\n                    this.startAutoRefresh(containerId, 'auth', options);\n                    return response.data;\n                } else {\n                    throw new Error(response.message);\n                }\n            } catch (error) {\n                console.warn('Erreur API, g√©n√©ration d\\'un QR code de test:', error.message);\n                \n                // En cas d'√©chec de l'API, g√©n√©rer un QR code de test\n                const testData = {\n                    type: 'auth',\n                    clientId: this.config.clientId,\n                    timestamp: Date.now(),\n                    sessionId: 'test_' + Math.random().toString(36).substr(2, 9),\n                    apiUrl: this.config.apiUrl,\n                    ...options\n                };\n                \n                const qrData = JSON.stringify(testData);\n                const qrUrl = `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(qrData)}`;\n                \n                this.displayQRCode(containerId, qrUrl, 'auth', options);\n                this.startAutoRefresh(containerId, 'auth', options);\n                \n                return {\n                    success: true,\n                    data: {\n                        qr_code_url: qrUrl,\n                        qr_id: testData.sessionId,\n                        expires_at: Date.now() + 30000\n                    }\n                };\n            }\n        }\n\n        /**\n         * G√©n√©rer un QR code KYC\n         */\n        async generateKYCQR(containerId, options = {}) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n\n            try {\n                // Essayer d'abord l'API r√©elle\n                const response = await this.makeRequest('/auth/qr-generate', {\n                    type: 'kyc',\n                    ...options\n                });\n\n                if (response.success) {\n                    this.displayQRCode(containerId, response.data.qr_code_url, 'kyc', options);\n                    this.startAutoRefresh(containerId, 'kyc', options);\n                    return response.data;\n                } else {\n                    throw new Error(response.message);\n                }\n            } catch (error) {\n                console.warn('Erreur API, g√©n√©ration d\\'un QR code de test:', error.message);\n                \n                // En cas d'√©chec de l'API, g√©n√©rer un QR code de test\n                const testData = {\n                    type: 'kyc',\n                    clientId: this.config.clientId,\n                    timestamp: Date.now(),\n                    sessionId: 'test_' + Math.random().toString(36).substr(2, 9),\n                    kycType: options.kycType || 'full',\n                    requiredFields: options.requiredFields || ['identity', 'address', 'phone'],\n                    apiUrl: this.config.apiUrl,\n                    ...options\n                };\n                \n                const qrData = JSON.stringify(testData);\n                const qrUrl = `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(qrData)}`;\n                \n                this.displayQRCode(containerId, qrUrl, 'kyc', options);\n                this.startAutoRefresh(containerId, 'kyc', options);\n                \n                return {\n                    success: true,\n                    data: {\n                        qr_code_url: qrUrl,\n                        qr_id: testData.sessionId,\n                        expires_at: Date.now() + 30000\n                    }\n                };\n            }\n        }\n\n        /**\n         * V√©rifier le statut d'un QR code\n         */\n        async checkQRStatus(qrId) {\n            try {\n                const response = await this.makeRequest('/auth/qr-status', {\n                    qr_id: qrId\n                });\n\n                return response.data;\n            } catch (error) {\n                this.handleError(error);\n                throw error;\n            }\n        }\n\n        /**\n         * Afficher le QR code dans le conteneur\n         */\n        displayQRCode(containerId, qrUrl, type, options = {}) {\n            const container = document.getElementById(containerId);\n            if (!container) {\n                throw new Error(`Conteneur avec l'ID \"${containerId}\" non trouv√©`);\n            }\n\n            const theme = options.theme || this.config.theme;\n            const language = options.language || this.config.language;\n\n            container.innerHTML = `\n                <div class=\"sunuid-qr-container sunuid-theme-${theme}\">\n                    <div class=\"sunuid-qr-header\">\n                        <h3 class=\"sunuid-qr-title\">\n                            ${type === 'auth' ? 'üîê Authentification' : 'üìã V√©rification KYC'}\n                        </h3>\n                        <p class=\"sunuid-qr-subtitle\">\n                            ${type === 'auth' ? \n                                'Scannez ce QR code avec l\\'application SunuID pour vous connecter' :\n                                'Scannez ce QR code avec l\\'application SunuID pour compl√©ter votre profil'\n                            }\n                        </p>\n                    </div>\n                    <div class=\"sunuid-qr-code\">\n                        <img src=\"${qrUrl}\" alt=\"QR Code SunuID\" class=\"sunuid-qr-image\">\n                        <div class=\"sunuid-qr-overlay\">\n                            <div class=\"sunuid-qr-spinner\"></div>\n                        </div>\n                    </div>\n                    <div class=\"sunuid-qr-footer\">\n                        <p class=\"sunuid-qr-timer\">\n                            <i class=\"fa-solid fa-clock\"></i>\n                            <span id=\"sunuid-timer\">30</span> secondes\n                        </p>\n                        <button class=\"sunuid-qr-refresh\" onclick=\"sunuidInstance.refreshQR('${containerId}', '${type}', ${JSON.stringify(options)})\">\n                            <i class=\"fa-solid fa-sync-alt\"></i>\n                            Actualiser\n                        </button>\n                    </div>\n                </div>\n            `;\n\n            this.qrCode = {\n                containerId,\n                type,\n                options,\n                qrUrl\n            };\n\n            this.startTimer();\n        }\n\n        /**\n         * Actualiser le QR code\n         */\n        async refreshQR(containerId, type, options = {}) {\n            try {\n                if (type === 'auth') {\n                    await this.generateAuthQR(containerId, options);\n                } else {\n                    await this.generateKYCQR(containerId, options);\n                }\n            } catch (error) {\n                this.handleError(error);\n            }\n        }\n\n        /**\n         * D√©marrer le timer de rafra√Æchissement automatique\n         */\n        startAutoRefresh(containerId, type, options) {\n            if (!this.config.autoRefresh) return;\n\n            this.refreshTimer = setInterval(async () => {\n                try {\n                    await this.refreshQR(containerId, type, options);\n                } catch (error) {\n                    console.warn('Erreur lors du rafra√Æchissement automatique:', error);\n                }\n            }, this.config.refreshInterval);\n        }\n\n        /**\n         * D√©marrer le timer de compte √† rebours\n         */\n        startTimer() {\n            let timeLeft = 30;\n            const timerElement = document.getElementById('sunuid-timer');\n            \n            const timer = setInterval(() => {\n                timeLeft--;\n                if (timerElement) {\n                    timerElement.textContent = timeLeft;\n                }\n                \n                if (timeLeft <= 0) {\n                    clearInterval(timer);\n                    if (this.config.onExpired) {\n                        this.config.onExpired();\n                    }\n                }\n            }, 1000);\n        }\n\n        /**\n         * Effectuer une requ√™te API\n         */\n        async makeRequest(endpoint, data) {\n            const url = `${this.config.apiUrl}${endpoint}`;\n            \n            const response = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-SunuID-Client-ID': this.config.clientId,\n                    'X-SunuID-Secret-ID': this.config.secretId\n                },\n                body: JSON.stringify(data)\n            });\n\n            if (!response.ok) {\n                throw new Error(`Erreur HTTP: ${response.status}`);\n            }\n\n            return await response.json();\n        }\n\n        /**\n         * G√©rer les erreurs\n         */\n        handleError(error) {\n            console.error('SunuID SDK Error:', error);\n            \n            if (this.config.onError) {\n                this.config.onError(error);\n            }\n        }\n\n        /**\n         * Nettoyer les ressources\n         */\n        destroy() {\n            if (this.refreshTimer) {\n                clearInterval(this.refreshTimer);\n            }\n            \n            this.isInitialized = false;\n            console.log('SunuID SDK d√©truit');\n        }\n    }\n\n    // Exposer la classe globalement\n    window.SunuID = SunuID;\n    window.sunuidInstance = null;\n\n    // Fonction d'initialisation globale\n    window.initSunuID = function(config) {\n        try {\n            window.sunuidInstance = new SunuID(config);\n            return window.sunuidInstance;\n        } catch (error) {\n            console.error('Erreur lors de l\\'initialisation de SunuID:', error);\n            throw error;\n        }\n    };\n\n})(window); "],"names":["window","DEFAULT_CONFIG","apiUrl","clientId","secretId","theme","language","autoRefresh","refreshInterval","onSuccess","onError","onExpired","SunuID","config","arguments","length","undefined","_classCallCheck","this","_objectSpread","qrCode","refreshTimer","isInitialized","init","key","value","Error","console","log","_generateAuthQR","_asyncToGenerator","_regenerator","m","_callee","containerId","options","response","testData","qrData","qrUrl","_t","_args","w","_context","p","n","makeRequest","type","v","success","displayQRCode","data","qr_code_url","startAutoRefresh","a","message","warn","timestamp","Date","now","sessionId","Math","random","toString","substr","JSON","stringify","concat","encodeURIComponent","qr_id","expires_at","_x","apply","_generateKYCQR","_callee2","_t2","_args2","_context2","kycType","requiredFields","_x2","_checkQRStatus","_callee3","qrId","_t3","_context3","handleError","_x3","container","document","getElementById","innerHTML","startTimer","_refreshQR","_callee4","_t4","_args4","_context4","generateAuthQR","generateKYCQR","_x4","_x5","_this","setInterval","_callee5","_t5","_context5","refreshQR","_this2","timeLeft","timerElement","timer","textContent","clearInterval","_makeRequest","_callee6","endpoint","url","_context6","fetch","method","headers","body","ok","status","json","_x6","_x7","error","sunuidInstance","initSunuID"],"mappings":"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"}