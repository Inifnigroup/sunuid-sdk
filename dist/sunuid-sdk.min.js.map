{"version":3,"file":"sunuid-sdk.min.js","sources":["../src/sunuid-sdk.js"],"sourcesContent":["/**\n * SunuID SDK - Package d'intégration pour partenaires\n * \n * @version 1.0.0\n * @author SunuID Team\n * @license MIT\n */\n\n(function(window) {\n    'use strict';\n\n    // Configuration par défaut\n    const DEFAULT_CONFIG = {\n        apiUrl: 'https://sunuid.fayma.sn/api',\n        partnerId: null,\n        clientId: null,\n        secretId: null,\n        theme: 'light',\n        language: 'fr',\n        autoRefresh: true,\n        refreshInterval: 30000, // 30 secondes\n        onSuccess: null,\n        onError: null,\n        onExpired: null\n    };\n\n    /**\n     * Classe principale SunuID\n     */\n    class SunuID {\n        constructor(config = {}) {\n            this.config = { ...DEFAULT_CONFIG, ...config };\n            this.qrCode = null;\n            this.refreshTimer = null;\n            this.isInitialized = false;\n            \n            this.init();\n        }\n\n        /**\n         * Initialisation du SDK\n         */\n        init() {\n            if (!this.config.partnerId || !this.config.clientId || !this.config.secretId) {\n                throw new Error('SunuID: partnerId, clientId et secretId sont requis');\n            }\n\n            this.isInitialized = true;\n            console.log('SunuID SDK initialisé avec succès');\n        }\n\n        /**\n         * Générer un QR code d'authentification\n         */\n        async generateAuthQR(containerId, options = {}) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialisé');\n            }\n\n            try {\n                const response = await this.makeRequest('/auth/qr-generate.php', {\n                    type: 'auth',\n                    ...options\n                });\n\n                if (response.success) {\n                    this.displayQRCode(containerId, response.data.qrCodeUrl, 'auth', options);\n                    this.startAutoRefresh(containerId, 'auth', options);\n                    return response.data;\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la génération du QR code');\n                }\n            } catch (error) {\n                this.handleError(error);\n                throw error;\n            }\n        }\n\n        /**\n         * Générer un QR code KYC\n         */\n        async generateKYCQR(containerId, options = {}) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialisé');\n            }\n\n            try {\n                const response = await this.makeRequest('/auth/qr-generate.php', {\n                    type: 'kyc',\n                    ...options\n                });\n\n                if (response.success) {\n                    this.displayQRCode(containerId, response.data.qrCodeUrl, 'kyc', options);\n                    this.startAutoRefresh(containerId, 'kyc', options);\n                    return response.data;\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la génération du QR code KYC');\n                }\n            } catch (error) {\n                this.handleError(error);\n                throw error;\n            }\n        }\n\n        /**\n         * Vérifier le statut d'un QR code\n         */\n        async checkQRStatus(sessionId) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialisé');\n            }\n\n            try {\n                const response = await this.makeRequest('/auth/qr-status.php', {\n                    sessionId: sessionId\n                });\n\n                if (response.success) {\n                    return response.data;\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la vérification du statut');\n                }\n            } catch (error) {\n                this.handleError(error);\n                throw error;\n            }\n        }\n\n        /**\n         * Afficher un QR code dans un conteneur\n         */\n        displayQRCode(containerId, qrUrl, type, options = {}) {\n            const container = document.getElementById(containerId);\n            if (!container) {\n                throw new Error(`Conteneur avec l'ID \"${containerId}\" non trouvé`);\n            }\n\n            // Nettoyer le conteneur\n            container.innerHTML = '';\n\n            // Créer l'élément QR code\n            const qrElement = document.createElement('div');\n            qrElement.className = 'sunuid-qr-code';\n            qrElement.innerHTML = `\n                <div class=\"sunuid-qr-header\">\n                    <h3>${type === 'auth' ? 'Authentification' : 'Vérification KYC'}</h3>\n                    <div class=\"sunuid-timer\">\n                        <span>Expire dans: </span>\n                        <span id=\"sunuid-timer\">30</span>\n                        <span> secondes</span>\n                    </div>\n                </div>\n                <div class=\"sunuid-qr-image\">\n                    <img src=\"${qrUrl}\" alt=\"QR Code SunuID\" style=\"max-width: 300px; height: auto;\">\n                </div>\n                <div class=\"sunuid-qr-instructions\">\n                    <p>Scannez ce QR code avec l'application SunuID pour vous connecter</p>\n                </div>\n                <div class=\"sunuid-qr-status\" id=\"sunuid-status\">\n                    <p>En attente de scan...</p>\n                </div>\n            `;\n\n            container.appendChild(qrElement);\n\n            // Démarrer le timer\n            this.startTimer();\n\n            // Appliquer le thème\n            this.applyTheme(options.theme || this.config.theme);\n        }\n\n        /**\n         * Rafraîchir un QR code\n         */\n        async refreshQR(containerId, type, options = {}) {\n            try {\n                const result = type === 'auth' \n                    ? await this.generateAuthQR(containerId, options)\n                    : await this.generateKYCQR(containerId, options);\n                \n                return result;\n            } catch (error) {\n                this.handleError(error);\n                throw error;\n            }\n        }\n\n        /**\n         * Démarrer le rafraîchissement automatique\n         */\n        startAutoRefresh(containerId, type, options) {\n            if (!this.config.autoRefresh) return;\n\n            this.refreshTimer = setInterval(async () => {\n                try {\n                    await this.refreshQR(containerId, type, options);\n                } catch (error) {\n                    console.warn('Erreur lors du rafraîchissement automatique:', error);\n                }\n            }, this.config.refreshInterval);\n        }\n\n        /**\n         * Démarrer le timer de compte à rebours\n         */\n        startTimer() {\n            let timeLeft = 30;\n            const timerElement = document.getElementById('sunuid-timer');\n            \n            const timer = setInterval(() => {\n                timeLeft--;\n                if (timerElement) {\n                    timerElement.textContent = timeLeft;\n                }\n                \n                if (timeLeft <= 0) {\n                    clearInterval(timer);\n                    if (this.config.onExpired) {\n                        this.config.onExpired();\n                    }\n                }\n            }, 1000);\n        }\n\n        /**\n         * Effectuer une requête API\n         */\n        async makeRequest(endpoint, data) {\n            const url = `${this.config.apiUrl}${endpoint}`;\n            \n            try {\n                const response = await fetch(url, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'X-SunuID-Client-ID': this.config.clientId,\n                        'X-SunuID-Secret-ID': this.config.secretId,\n                        'X-SunuID-Partner-ID': this.config.partnerId,\n                        'Accept': 'application/json'\n                    },\n                    body: JSON.stringify(data)\n                });\n\n                if (!response.ok) {\n                    const errorText = await response.text();\n                    let errorData;\n                    try {\n                        errorData = JSON.parse(errorText);\n                    } catch (e) {\n                        errorData = { message: errorText };\n                    }\n                    \n                    throw new Error(errorData.message || `Erreur HTTP: ${response.status}`);\n                }\n\n                const result = await response.json();\n                return result;\n            } catch (error) {\n                console.error('Erreur API SunuID:', error);\n                throw error;\n            }\n        }\n\n        /**\n         * Appliquer le thème\n         */\n        applyTheme(theme) {\n            const container = document.querySelector('.sunuid-qr-code');\n            if (container) {\n                container.className = `sunuid-qr-code sunuid-theme-${theme}`;\n            }\n        }\n\n        /**\n         * Gérer les erreurs\n         */\n        handleError(error) {\n            console.error('SunuID SDK Error:', error);\n            \n            if (this.config.onError) {\n                this.config.onError(error);\n            }\n        }\n\n        /**\n         * Nettoyer les ressources\n         */\n        destroy() {\n            if (this.refreshTimer) {\n                clearInterval(this.refreshTimer);\n            }\n            \n            this.isInitialized = false;\n            console.log('SunuID SDK détruit');\n        }\n    }\n\n    // Exposer la classe globalement\n    window.SunuID = SunuID;\n    window.sunuidInstance = null;\n\n    // Fonction d'initialisation globale\n    window.initSunuID = function(config) {\n        try {\n            window.sunuidInstance = new SunuID(config);\n            return window.sunuidInstance;\n        } catch (error) {\n            console.error('Erreur lors de l\\'initialisation de SunuID:', error);\n            throw error;\n        }\n    };\n\n})(window); "],"names":["window","DEFAULT_CONFIG","apiUrl","partnerId","clientId","secretId","theme","language","autoRefresh","refreshInterval","onSuccess","onError","onExpired","SunuID","config","arguments","length","undefined","_classCallCheck","this","_objectSpread","qrCode","refreshTimer","isInitialized","init","key","value","Error","console","log","_generateAuthQR","_asyncToGenerator","_regenerator","m","_callee","containerId","options","response","_t","_args","w","_context","p","n","makeRequest","type","v","success","displayQRCode","data","qrCodeUrl","startAutoRefresh","a","message","handleError","_x","apply","_generateKYCQR","_callee2","_t2","_args2","_context2","_x2","_checkQRStatus","_callee3","sessionId","_t3","_context3","_x3","qrUrl","container","document","getElementById","concat","innerHTML","qrElement","createElement","className","appendChild","startTimer","applyTheme","_refreshQR","_callee4","result","_t4","_t5","_args4","_context4","generateAuthQR","generateKYCQR","_x4","_x5","_this","setInterval","_callee5","_t6","_context5","refreshQR","warn","_this2","timeLeft","timerElement","timer","textContent","clearInterval","_makeRequest","_callee6","endpoint","url","errorText","errorData","_t7","_context6","fetch","method","headers","Accept","body","JSON","stringify","ok","text","parse","e","status","json","error","_x6","_x7","querySelector","sunuidInstance","initSunuID"],"mappings":"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"}