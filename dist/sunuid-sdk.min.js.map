{"version":3,"file":"sunuid-sdk.min.js","sources":["../src/sunuid-sdk.js"],"sourcesContent":["/**\n * SunuID SDK - Package d'intégration pour partenaires\n * \n * @version 1.0.0\n * @author SunuID Team\n * @license MIT\n */\n\n(function(window) {\n    'use strict';\n\n    // Configuration par défaut\n    const DEFAULT_CONFIG = {\n        apiUrl: window.SunuIDConfig?.apiUrl || 'https://api.sunuid.fayma.sn',\n        clientId: null,\n        secretId: null,\n        theme: 'light',\n        language: 'fr',\n        autoRefresh: true,\n        refreshInterval: 30000, // 30 secondes\n        onSuccess: null,\n        onError: null\n    };\n\n    /**\n     * Classe principale SunuID\n     */\n    class SunuID {\n        constructor(config = {}) {\n            this.config = { ...DEFAULT_CONFIG, ...config };\n            this.qrCode = null;\n            this.refreshTimer = null;\n            this.isInitialized = false;\n            \n            this.init();\n        }\n\n        /**\n         * Initialisation du SDK\n         */\n        init() {\n            if (!this.config.clientId || !this.config.secretId) {\n                throw new Error('SunuID: clientId et secretId sont requis');\n            }\n\n            this.isInitialized = true;\n            console.log('SunuID SDK initialisé avec succès');\n        }\n\n        /**\n         * Générer un QR code d'authentification\n         */\n        async generateAuthQR(containerId, options = {}) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialisé');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-generate', {\n                    type: 'auth',\n                    ...options\n                });\n\n                if (response.success) {\n                    // Construire l'URL complète de l'image QR avec la base URL pour les images\n                    const imageBaseUrl = 'https://sunuid.fayma.sn';\n                    const qrImageUrl = `${imageBaseUrl}${response.data.qrcode}`;\n                    this.displayQRCode(containerId, qrImageUrl, 'auth', options);\n                    this.startAutoRefresh(containerId, 'auth', options);\n                    return {\n                        ...response.data,\n                        qrCodeUrl: qrImageUrl,\n                        sessionId: response.data.service_id\n                    };\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la génération du QR code');\n                }\n            } catch (error) {\n                console.error('Erreur API détectée:', error.message);\n                console.log('Affichage du message \"Service non disponible\" pour auth');\n                this.displayServiceUnavailable(containerId, 'auth');\n                throw new Error('Service non disponible');\n            }\n        }\n\n        /**\n         * Générer un QR code KYC\n         */\n        async generateKYCQR(containerId, options = {}) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialisé');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-generate', {\n                    type: 'kyc',\n                    ...options\n                });\n\n                if (response.success) {\n                    // Construire l'URL complète de l'image QR avec la base URL pour les images\n                    const imageBaseUrl = 'https://sunuid.fayma.sn';\n                    const qrImageUrl = `${imageBaseUrl}${response.data.qrcode}`;\n                    this.displayQRCode(containerId, qrImageUrl, 'kyc', options);\n                    this.startAutoRefresh(containerId, 'kyc', options);\n                    return {\n                        ...response.data,\n                        qrCodeUrl: qrImageUrl,\n                        sessionId: response.data.service_id\n                    };\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la génération du QR code KYC');\n                }\n            } catch (error) {\n                console.error('Erreur API détectée:', error.message);\n                console.log('Affichage du message \"Service non disponible\" pour kyc');\n                this.displayServiceUnavailable(containerId, 'kyc');\n                throw new Error('Service non disponible');\n            }\n        }\n\n        /**\n         * Vérifier le statut d'un QR code\n         */\n        async checkQRStatus(sessionId) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialisé');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-status', {\n                    serviceId: sessionId\n                });\n\n                if (response.success) {\n                    return response.data;\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la vérification du statut');\n                }\n            } catch (error) {\n                this.handleError(error);\n                throw error;\n            }\n        }\n\n        /**\n         * Afficher un QR code dans un conteneur\n         */\n        displayQRCode(containerId, qrUrl, type, options = {}) {\n            const container = document.getElementById(containerId);\n            if (!container) {\n                throw new Error(`Conteneur avec l'ID \"${containerId}\" non trouvé`);\n            }\n\n            // Nettoyer le conteneur\n            container.innerHTML = '';\n\n            // Créer l'élément QR code\n            const qrElement = document.createElement('div');\n            qrElement.className = 'sunuid-qr-code';\n            qrElement.innerHTML = `\n                    <div class=\"sunuid-qr-header\">\n                    <h3>${type === 'auth' ? 'Authentification' : 'Vérification KYC'}</h3>\n                    </div>\n                <div class=\"sunuid-qr-image\">\n                    <img src=\"${qrUrl}\" alt=\"QR Code SunuID\" style=\"max-width: 300px; height: auto;\">\n                    </div>\n                <div class=\"sunuid-qr-instructions\">\n                    <p>Scannez ce QR code avec l'application SunuID pour vous connecter</p>\n                    </div>\n                <div class=\"sunuid-qr-status\" id=\"sunuid-status\">\n                    <p>En attente de scan...</p>\n                </div>\n            `;\n\n            container.appendChild(qrElement);\n\n            // Appliquer le thème\n            this.applyTheme(options.theme || this.config.theme);\n        }\n\n        /**\n         * Afficher \"Service non disponible\"\n         */\n        displayServiceUnavailable(containerId, type) {\n            console.log(`displayServiceUnavailable appelée pour ${containerId}, type: ${type}`);\n            const container = document.getElementById(containerId);\n            if (!container) {\n                console.error(`Container ${containerId} non trouvé`);\n                return;\n            }\n\n            container.innerHTML = `\n                <div class=\"sunuid-service-unavailable\" style=\"\n                    text-align: center;\n                    padding: 40px 20px;\n                    background: #f8f9fa;\n                    border: 2px dashed #dee2e6;\n                    border-radius: 10px;\n                    color: #6c757d;\n                    font-family: Arial, sans-serif;\n                \">\n                    <div style=\"font-size: 48px; margin-bottom: 20px;\">⚠️</div>\n                    <h3 style=\"margin: 0 0 10px 0; color: #495057;\">Service Non Disponible</h3>\n                    <p style=\"margin: 0; font-size: 14px;\">\n                        Le service d'authentification est temporairement indisponible.<br>\n                        Veuillez réessayer plus tard.\n                    </p>\n                    <div style=\"margin-top: 20px; font-size: 12px; color: #adb5bd;\">\n                        Type: ${type.toUpperCase()}\n                    </div>\n                </div>\n            `;\n        }\n\n        /**\n         * Rafraîchir un QR code\n         */\n        async refreshQR(containerId, type, options = {}) {\n            try {\n                const result = type === 'auth' \n                    ? await this.generateAuthQR(containerId, options)\n                    : await this.generateKYCQR(containerId, options);\n                \n                return result;\n            } catch (error) {\n                console.error('Erreur lors du rafraîchissement:', error.message);\n                this.displayServiceUnavailable(containerId, type);\n                throw error;\n            }\n        }\n\n        /**\n         * Démarrer le rafraîchissement automatique\n         */\n        startAutoRefresh(containerId, type, options) {\n            if (!this.config.autoRefresh) return;\n\n            this.refreshTimer = setInterval(async () => {\n                try {\n                    await this.refreshQR(containerId, type, options);\n                } catch (error) {\n                    console.warn('Erreur lors du rafraîchissement automatique:', error);\n                }\n            }, this.config.refreshInterval);\n        }\n\n        /**\n         * Démarrer le timer de compte à rebours\n         */\n\n\n        /**\n         * Effectuer une requête API\n         */\n        async makeRequest(endpoint, data) {\n            // Utiliser l'endpoint depuis la configuration si disponible\n            const endpointPath = window.SunuIDConfig?.endpoints?.[endpoint.replace('/', '')] || endpoint;\n            const url = `${this.config.apiUrl}${endpointPath}`;\n            \n            try {\n                const response = await fetch(url, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': `Bearer ${this.config.clientId}:${this.config.secretId}`,\n                        'Accept': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        ...data,\n                        client_id: this.config.clientId,\n                        secret_id: this.config.secretId\n                    })\n                });\n\n                if (!response.ok) {\n                    const errorText = await response.text();\n                    let errorData;\n                    try {\n                        errorData = JSON.parse(errorText);\n                    } catch (e) {\n                        errorData = { message: errorText };\n                    }\n                    \n                    throw new Error(errorData.message || `Erreur HTTP: ${response.status}`);\n                }\n\n                const result = await response.json();\n                return result;\n            } catch (error) {\n                console.error('Erreur API SunuID:', error);\n                throw error;\n            }\n        }\n\n        /**\n         * Appliquer le thème\n         */\n        applyTheme(theme) {\n            const container = document.querySelector('.sunuid-qr-code');\n            if (container) {\n                container.className = `sunuid-qr-code sunuid-theme-${theme}`;\n            }\n        }\n\n        /**\n         * Gérer les erreurs\n         */\n        handleError(error) {\n            console.error('SunuID SDK Error:', error);\n            \n            if (this.config.onError) {\n                this.config.onError(error);\n            }\n        }\n\n        /**\n         * Nettoyer les ressources\n         */\n        destroy() {\n            if (this.refreshTimer) {\n                clearInterval(this.refreshTimer);\n            }\n            \n            this.isInitialized = false;\n            console.log('SunuID SDK détruit');\n        }\n    }\n\n    // Exposer la classe globalement\n    window.SunuID = SunuID;\n    window.sunuidInstance = null;\n\n    // Fonction d'initialisation globale\n    window.initSunuID = function(config) {\n        try {\n            window.sunuidInstance = new SunuID(config);\n            return window.sunuidInstance;\n        } catch (error) {\n            console.error('Erreur lors de l\\'initialisation de SunuID:', error);\n            throw error;\n        }\n    };\n\n})(window); "],"names":["window","_window$SunuIDConfig","DEFAULT_CONFIG","apiUrl","SunuIDConfig","clientId","secretId","theme","language","autoRefresh","refreshInterval","onSuccess","onError","SunuID","config","arguments","length","undefined","_classCallCheck","this","_objectSpread","qrCode","refreshTimer","isInitialized","init","key","value","Error","console","log","_generateAuthQR","_asyncToGenerator","_regenerator","m","_callee","containerId","options","response","qrImageUrl","_t","_args","w","_context","p","n","makeRequest","type","v","success","concat","data","qrcode","displayQRCode","startAutoRefresh","a","qrCodeUrl","sessionId","service_id","message","error","displayServiceUnavailable","_x","apply","_generateKYCQR","_callee2","_t2","_args2","_context2","_x2","_checkQRStatus","_callee3","_t3","_context3","serviceId","handleError","_x3","qrUrl","container","document","getElementById","innerHTML","qrElement","createElement","className","appendChild","applyTheme","toUpperCase","_refreshQR","_callee4","result","_t4","_t5","_args4","_context4","generateAuthQR","generateKYCQR","_x4","_x5","_this","setInterval","_callee5","_t6","_context5","refreshQR","warn","_makeRequest","_callee6","endpoint","_window$SunuIDConfig2","endpointPath","url","errorText","errorData","_t7","_context6","endpoints","replace","fetch","method","headers","Authorization","Accept","body","JSON","stringify","client_id","secret_id","ok","text","parse","e","status","json","_x6","_x7","querySelector","clearInterval","sunuidInstance","initSunuID"],"mappings":"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"}