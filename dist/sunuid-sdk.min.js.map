{"version":3,"file":"sunuid-sdk.min.js","sources":["../src/sunuid-sdk.js"],"sourcesContent":["/**\n * SunuID SDK - Package d'intégration pour partenaires\n * \n * @version 1.0.0\n * @author SunuID Team\n * @license MIT\n */\n\n(function(window) {\n    'use strict';\n\n    // Configuration par défaut\n    const DEFAULT_CONFIG = {\n        apiUrl: window.SunuIDConfig?.apiUrl || 'https://api.sunuid.fayma.sn',\n        clientId: null,\n        secretId: null,\n        type: 1, // Type par défaut (1 = authentification)\n        theme: 'light',\n        language: 'fr',\n        autoRefresh: true,\n        refreshInterval: 30000, // 30 secondes\n        onSuccess: null,\n        onError: null\n    };\n\n    /**\n     * Classe principale SunuID\n     */\n    class SunuID {\n        constructor(config = {}) {\n            this.config = { ...DEFAULT_CONFIG, ...config };\n            this.qrCode = null;\n            this.refreshTimer = null;\n            this.isInitialized = false;\n            \n            this.init();\n        }\n\n        /**\n         * Initialisation du SDK\n         */\n        init() {\n            if (!this.config.clientId || !this.config.secretId) {\n                throw new Error('SunuID: clientId et secretId sont requis');\n            }\n\n            this.isInitialized = true;\n            console.log('SunuID SDK initialisé avec succès');\n        }\n\n        /**\n         * Générer un QR code avec le type configuré\n         */\n        async generateQR(containerId, options = {}) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialisé');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-generate', {\n                    type: this.config.type, // Utilise le type configuré\n                    ...options\n                });\n\n                if (response.success) {\n                    // Construire l'URL complète de l'image QR avec la base URL pour les images\n                    const imageBaseUrl = 'https://sunuid.fayma.sn';\n                    const qrImageUrl = `${imageBaseUrl}${response.data.qrcode}`;\n                    this.displayQRCode(containerId, qrImageUrl, this.config.type, options);\n                    this.startAutoRefresh(containerId, this.config.type, options);\n                    return {\n                        ...response.data,\n                        qrCodeUrl: qrImageUrl,\n                        sessionId: response.data.service_id\n                    };\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la génération du QR code');\n                }\n            } catch (error) {\n                console.error('Erreur API détectée:', error.message);\n                console.log('Affichage du message \"Service non disponible\" pour type ' + this.config.type);\n                this.displayServiceUnavailable(containerId, this.config.type);\n                throw new Error('Service non disponible');\n            }\n        }\n\n\n\n        /**\n         * Générer un QR code avec un type personnalisé\n         */\n        async generateCustomQR(containerId, type, options = {}) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialisé');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-generate', {\n                    type: type, // Type personnalisé (1, 2, 3, etc.)\n                    ...options\n                });\n\n                if (response.success) {\n                    // Construire l'URL complète de l'image QR avec la base URL pour les images\n                    const imageBaseUrl = 'https://sunuid.fayma.sn';\n                    const qrImageUrl = `${imageBaseUrl}${response.data.qrcode}`;\n                    this.displayQRCode(containerId, qrImageUrl, type, options);\n                    this.startAutoRefresh(containerId, type, options);\n                    return {\n                        ...response.data,\n                        qrCodeUrl: qrImageUrl,\n                        sessionId: response.data.service_id\n                    };\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la génération du QR code');\n                }\n            } catch (error) {\n                console.error('Erreur API détectée:', error.message);\n                console.log('Affichage du message \"Service non disponible\" pour type ' + type);\n                this.displayServiceUnavailable(containerId, type);\n                throw new Error('Service non disponible');\n            }\n        }\n\n        // Alias pour maintenir la compatibilité\n        async generateAuthQR(containerId, options = {}) {\n            return this.generateQR(containerId, options);\n        }\n\n        async generateKYCQR(containerId, options = {}) {\n            // Sauvegarder le type actuel\n            const originalType = this.config.type;\n            // Changer temporairement le type pour KYC\n            this.config.type = 2;\n            try {\n                return await this.generateQR(containerId, options);\n            } finally {\n                // Restaurer le type original\n                this.config.type = originalType;\n            }\n        }\n\n        /**\n         * Vérifier le statut d'un QR code\n         */\n        async checkQRStatus(sessionId) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialisé');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-status', {\n                    serviceId: sessionId\n                });\n\n                if (response.success) {\n                    return response.data;\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la vérification du statut');\n                }\n            } catch (error) {\n                this.handleError(error);\n                throw error;\n            }\n        }\n\n        /**\n         * Afficher un QR code dans un conteneur\n         */\n        displayQRCode(containerId, qrUrl, type, options = {}) {\n            const container = document.getElementById(containerId);\n            if (!container) {\n                throw new Error(`Conteneur avec l'ID \"${containerId}\" non trouvé`);\n            }\n\n            // Nettoyer le conteneur\n            container.innerHTML = '';\n\n            // Créer l'élément QR code\n            const qrElement = document.createElement('div');\n            qrElement.className = 'sunuid-qr-code';\n            qrElement.innerHTML = `\n                    <div class=\"sunuid-qr-header\">\n                    <h3>${type === 1 ? 'Authentification' : type === 2 ? 'Vérification KYC' : type === 3 ? 'Service Type 3' : 'Service Type ' + type}</h3>\n                    </div>\n                <div class=\"sunuid-qr-image\">\n                    <img src=\"${qrUrl}\" alt=\"QR Code SunuID\" style=\"max-width: 300px; height: auto;\">\n                    </div>\n                <div class=\"sunuid-qr-instructions\">\n                    <p>Scannez ce QR code avec l'application SunuID pour vous connecter</p>\n                    </div>\n                <div class=\"sunuid-qr-status\" id=\"sunuid-status\">\n                    <p>En attente de scan...</p>\n                </div>\n            `;\n\n            container.appendChild(qrElement);\n\n            // Appliquer le thème\n            this.applyTheme(options.theme || this.config.theme);\n        }\n\n        /**\n         * Afficher \"Service non disponible\"\n         */\n        displayServiceUnavailable(containerId, type) {\n            console.log(`displayServiceUnavailable appelée pour ${containerId}, type: ${type}`);\n            const container = document.getElementById(containerId);\n            if (!container) {\n                console.error(`Container ${containerId} non trouvé`);\n                return;\n            }\n\n            container.innerHTML = `\n                <div class=\"sunuid-service-unavailable\" style=\"\n                    text-align: center;\n                    padding: 40px 20px;\n                    background: #f8f9fa;\n                    border: 2px dashed #dee2e6;\n                    border-radius: 10px;\n                    color: #6c757d;\n                    font-family: Arial, sans-serif;\n                \">\n                    <div style=\"font-size: 48px; margin-bottom: 20px;\">⚠️</div>\n                    <h3 style=\"margin: 0 0 10px 0; color: #495057;\">Service Non Disponible</h3>\n                    <p style=\"margin: 0; font-size: 14px;\">\n                        Le service d'authentification est temporairement indisponible.<br>\n                        Veuillez réessayer plus tard.\n                    </p>\n                    <div style=\"margin-top: 20px; font-size: 12px; color: #adb5bd;\">\n                        Type: ${type.toUpperCase()}\n                    </div>\n                </div>\n            `;\n        }\n\n        /**\n         * Rafraîchir un QR code\n         */\n        async refreshQR(containerId, options = {}) {\n            try {\n                const result = await this.generateQR(containerId, options);\n                return result;\n            } catch (error) {\n                console.error('Erreur lors du rafraîchissement:', error.message);\n                this.displayServiceUnavailable(containerId, this.config.type);\n                throw error;\n            }\n        }\n\n        /**\n         * Démarrer le rafraîchissement automatique\n         */\n        startAutoRefresh(containerId, type, options) {\n            if (!this.config.autoRefresh) return;\n\n            this.refreshTimer = setInterval(async () => {\n                try {\n                    await this.refreshQR(containerId, type, options);\n                } catch (error) {\n                    console.warn('Erreur lors du rafraîchissement automatique:', error);\n                }\n            }, this.config.refreshInterval);\n        }\n\n        /**\n         * Démarrer le timer de compte à rebours\n         */\n\n\n        /**\n         * Effectuer une requête API\n         */\n        async makeRequest(endpoint, data) {\n            // Utiliser l'endpoint depuis la configuration si disponible\n            const endpointPath = window.SunuIDConfig?.endpoints?.[endpoint.replace('/', '')] || endpoint;\n            const url = `${this.config.apiUrl}${endpointPath}`;\n            \n            try {\n                const response = await fetch(url, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': `Bearer ${this.config.clientId}:${this.config.secretId}`,\n                        'Accept': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        ...data,\n                        client_id: this.config.clientId,\n                        secret_id: this.config.secretId\n                    })\n                });\n\n                if (!response.ok) {\n                    const errorText = await response.text();\n                    let errorData;\n                    try {\n                        errorData = JSON.parse(errorText);\n                    } catch (e) {\n                        errorData = { message: errorText };\n                    }\n                    \n                    throw new Error(errorData.message || `Erreur HTTP: ${response.status}`);\n                }\n\n                const result = await response.json();\n                return result;\n            } catch (error) {\n                console.error('Erreur API SunuID:', error);\n                throw error;\n            }\n        }\n\n        /**\n         * Appliquer le thème\n         */\n        applyTheme(theme) {\n            const container = document.querySelector('.sunuid-qr-code');\n            if (container) {\n                container.className = `sunuid-qr-code sunuid-theme-${theme}`;\n            }\n        }\n\n        /**\n         * Gérer les erreurs\n         */\n        handleError(error) {\n            console.error('SunuID SDK Error:', error);\n            \n            if (this.config.onError) {\n                this.config.onError(error);\n            }\n        }\n\n        /**\n         * Nettoyer les ressources\n         */\n        destroy() {\n            if (this.refreshTimer) {\n                clearInterval(this.refreshTimer);\n            }\n            \n            this.isInitialized = false;\n            console.log('SunuID SDK détruit');\n        }\n    }\n\n    // Exposer la classe globalement\n    window.SunuID = SunuID;\n    window.sunuidInstance = null;\n\n    // Fonction d'initialisation globale\n    window.initSunuID = function(config) {\n        try {\n            window.sunuidInstance = new SunuID(config);\n            return window.sunuidInstance;\n        } catch (error) {\n            console.error('Erreur lors de l\\'initialisation de SunuID:', error);\n            throw error;\n        }\n    };\n\n})(window); "],"names":["window","_window$SunuIDConfig","DEFAULT_CONFIG","apiUrl","SunuIDConfig","clientId","secretId","type","theme","language","autoRefresh","refreshInterval","onSuccess","onError","SunuID","config","arguments","length","undefined","_classCallCheck","this","_objectSpread","qrCode","refreshTimer","isInitialized","init","key","value","Error","console","log","_generateQR","_asyncToGenerator","_regenerator","m","_callee","containerId","options","response","qrImageUrl","_t","_args","w","_context","p","n","makeRequest","v","success","concat","data","qrcode","displayQRCode","startAutoRefresh","a","qrCodeUrl","sessionId","service_id","message","error","displayServiceUnavailable","_x","apply","_generateCustomQR","_callee2","_t2","_args2","_context2","_x2","_x3","_generateAuthQR","_callee3","_args3","_context3","generateQR","_x4","_generateKYCQR","_callee4","originalType","_args4","_context4","f","_x5","_checkQRStatus","_callee5","_t3","_context5","serviceId","handleError","_x6","qrUrl","container","document","getElementById","innerHTML","qrElement","createElement","className","appendChild","applyTheme","toUpperCase","_refreshQR","_callee6","result","_t4","_args6","_context6","_x7","_this","setInterval","_callee7","_t5","_context7","refreshQR","warn","_makeRequest","_callee8","endpoint","_window$SunuIDConfig2","endpointPath","url","errorText","errorData","_t6","_context8","endpoints","replace","fetch","method","headers","Authorization","Accept","body","JSON","stringify","client_id","secret_id","ok","text","parse","e","status","json","_x8","_x9","querySelector","clearInterval","sunuidInstance","initSunuID"],"mappings":"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"}