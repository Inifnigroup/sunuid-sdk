{"version":3,"file":"sunuid-sdk.js","sources":["../src/sunuid-sdk.js"],"sourcesContent":["/**\n * SunuID SDK - Package d'int√©gration pour partenaires\n * \n * @version 1.0.0\n * @author SunuID Team\n * @license MIT\n */\n\n(function(window) {\n    'use strict';\n\n    // Configuration par d√©faut\n    const DEFAULT_CONFIG = {\n        apiUrl: window.SunuIDConfig?.apiUrl || 'https://api.sunuid.fayma.sn',\n        clientId: null,\n        secretId: null,\n        type: 2, // Type par d√©faut (2 = authentification)\n        partnerName: null, // Nom du partenaire r√©cup√©r√© depuis l'API\n        theme: 'light',\n        language: 'fr',\n        autoRefresh: false, // D√©sactiv√© par d√©faut pour √©viter les appels r√©p√©titifs\n        refreshInterval: 30000, // 30 secondes\n        autoInit: true, // Initialisation automatique par d√©faut\n        onSuccess: null,\n        onError: null,\n        onStatusUpdate: null,\n        onExpired: null,\n        // Nouvelles options de s√©curit√©\n        enableSecurityLogs: true,\n        validateInputs: true,\n        maxRetries: 3,\n        requestTimeout: 10000, // 10 secondes\n        // Options d'initialisation s√©curis√©e\n        secureInit: false,\n        secureInitUrl: (() => {\n            if (window.SunuIDConfig?.apiUrl?.includes('api.sunuid.fayma.sn')) {\n                return 'https://api.sunuid.fayma.sn/secure-init.php';\n            }\n            return window.SunuIDConfig?.apiUrl?.replace('/api', '') + '/secure-init.php' || 'https://api.sunuid.fayma.sn/secure-init.php';\n        })(),\n        token: null,\n        // Configuration pour forcer l'utilisation du serveur distant\n        forceRemoteServer: true,\n        useLocalFallback: false\n    };\n\n    /**\n     * Classe principale SunuID\n     */\n    class SunuID {\n        constructor(config = {}) {\n            this.config = { ...DEFAULT_CONFIG, ...config };\n            this.qrCode = null;\n            this.refreshTimer = null;\n            this.isInitialized = false;\n            this.socket = null;\n            \n            // Initialisation asynchrone seulement si autoInit est activ√©\n            if (this.config.autoInit !== false) {\n                this.initPromise = this.init();\n            }\n        }\n\n        /**\n         * Initialisation du SDK\n         */\n        async init() {\n            try {\n                // Initialisation s√©curis√©e si activ√©e\n                if (this.config.secureInit) {\n                    await this.secureInit();\n                } else {\n                    // Validation s√©curis√©e des param√®tres\n                    if (this.config.validateInputs) {\n                        this.validateSecurityParams();\n                    }\n                }\n\n                // Log de s√©curit√© pour l'initialisation\n                this.logSecurityEvent('SDK_INIT_START', {\n                    apiUrl: this.config.apiUrl,\n                    type: this.config.type,\n                    secureInit: this.config.secureInit\n                });\n\n                // R√©cup√©rer les informations du partenaire depuis l'API\n                await this.fetchPartnerInfo();\n\n                // Obscurcir les credentials dans les logs\n                this.obfuscateCredentials();\n\n                this.isInitialized = true;\n                console.log('SunuID SDK initialis√© avec succ√®s');\n                console.log('üìã Configuration SDK:', {\n                    apiUrl: this.config.apiUrl,\n                    type: this.config.type,\n                    partnerName: this.config.partnerName,\n                    clientId: this.config.clientId ? '***' + this.config.clientId.slice(-4) : 'null',\n                    secretId: this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null',\n                    secureInit: this.config.secureInit,\n                    theme: this.config.theme\n                });\n                \n                this.logSecurityEvent('SDK_INIT_SUCCESS');\n                \n                // Initialiser la connexion WebSocket\n                this.initWebSocket();\n                \n            } catch (error) {\n                this.logSecurityEvent('SDK_INIT_ERROR', { error: error.message });\n                throw error;\n            }\n        }\n\n        /**\n         * Initialisation s√©curis√©e via PHP\n         */\n        async secureInit() {\n            try {\n                this.logSecurityEvent('SECURE_INIT_START');\n                \n                const initData = {\n                    type: this.config.type,\n                    partnerName: this.config.partnerName,\n                    theme: this.config.theme\n                };\n\n                const response = await fetch(this.config.secureInitUrl, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json'\n                    },\n                    body: JSON.stringify(initData)\n                });\n\n                if (!response.ok) {\n                    throw new Error(`Erreur HTTP: ${response.status}`);\n                }\n\n                const result = await response.json();\n                \n                console.log('üìã R√©ponse initialisation s√©curis√©e:', result);\n                \n                if (!result.success) {\n                    throw new Error(result.error || 'Erreur lors de l\\'initialisation s√©curis√©e');\n                }\n\n                // Stocker le token et les donn√©es s√©curis√©es\n                this.config.token = result.data.token;\n                this.config.apiUrl = result.data.api_url;\n                \n                // D√©coder le token pour r√©cup√©rer les credentials\n                const decodedToken = this.decodeSecureToken(result.data.token);\n                if (decodedToken) {\n                    this.config.clientId = decodedToken.client_id;\n                    this.config.secretId = decodedToken.secret_id;\n                } else {\n                    throw new Error('Impossible de d√©coder le token s√©curis√©');\n                }\n                \n                this.config.expiresIn = result.data.expires_in;\n                this.config.maxRequests = result.data.max_requests;\n                this.config.requestCount = 0;\n\n                this.logSecurityEvent('SECURE_INIT_SUCCESS', {\n                    expiresIn: result.data.expires_in,\n                    maxRequests: result.data.max_requests\n                });\n\n                console.log('‚úÖ Initialisation s√©curis√©e r√©ussie');\n                \n            } catch (error) {\n                this.logSecurityEvent('SECURE_INIT_ERROR', { error: error.message });\n                throw new Error(`√âchec de l'initialisation s√©curis√©e: ${error.message}`);\n            }\n        }\n\n        /**\n         * D√©coder le token s√©curis√©\n         */\n        decodeSecureToken(token) {\n            try {\n                const parts = token.split('.');\n                if (parts.length !== 2) {\n                    console.error('‚ùå Format de token invalide');\n                    return null;\n                }\n                \n                const [payload, signature] = parts;\n                \n                // D√©coder le payload (base64)\n                const decodedPayload = atob(payload);\n                const tokenData = JSON.parse(decodedPayload);\n                \n                // V√©rifier l'expiration\n                if (tokenData.exp && tokenData.exp < Date.now() / 1000) {\n                    console.error('‚ùå Token expir√©');\n                    return null;\n                }\n                \n                console.log('‚úÖ Token d√©cod√© avec succ√®s');\n                return tokenData;\n                \n            } catch (error) {\n                console.error('‚ùå Erreur d√©codage token:', error);\n                return null;\n            }\n        }\n\n        /**\n         * Initialiser la connexion WebSocket\n         */\n        initWebSocket() {\n            try {\n                // V√©rifier si Socket.IO est disponible\n                if (typeof io === 'undefined') {\n                    console.warn('‚ö†Ô∏è Socket.IO non disponible, WebSocket sera initialis√© plus tard');\n                    // R√©essayer apr√®s un d√©lai\n                    setTimeout(() => this.initWebSocket(), 1000);\n                    return;\n                }\n                \n                // Obtenir l'IP du client (simulation)\n                const ip = this.getClientIP();\n                \n                // Initialiser la connexion WebSocket si elle n'existe pas\n                if (!this.socket) {\n                    console.log('üåê Initialisation Socket.IO...');\n                    \n                    this.socket = io('wss://samasocket.fayma.sn:9443', {\n                        query: {\n                            token: this.config.clientId,\n                            type: 'web',\n                            userId: this.config.clientId,\n                            username: ip\n                        },\n                        transports: ['websocket', 'polling']\n                    });\n\n                    // Gestion des √©v√©nements WebSocket\n                    this.socket.on('connect', () => {\n                        console.log('üåê WebSocket connect√© avec succ√®s');\n                        console.log('üìä Socket ID:', this.socket.id);\n                        this.socket.connected = true;\n                    });\n\n                    this.socket.on('disconnect', (reason) => {\n                        console.log('‚ùå WebSocket d√©connect√©:', reason);\n                        this.socket.connected = false;\n                    });\n\n                    this.socket.on('connect_error', (error) => {\n                        console.error('‚ùå Erreur connexion WebSocket:', error);\n                        this.socket.connected = false;\n                    });\n\n                    // √âcouter les √©v√©nements sp√©cifiques\n                    this.socket.on('qr_status_update', (data) => {\n                        console.log('üì± Mise √† jour statut QR re√ßue:', data);\n                        this.handleQRStatusUpdate(data);\n                    });\n\n                    this.socket.on('qr_scan_success', (data) => {\n                        console.log('‚úÖ Scan QR r√©ussi re√ßu:', data);\n                        this.handleQRScanSuccess(data);\n                    });\n\n                    this.socket.on('qr_expired', (data) => {\n                        console.log('‚è∞ QR expir√© re√ßu:', data);\n                        this.handleQRExpired(data);\n                    });\n\n                    // √âcouter l'√©v√©nement qr_scan_initiated sp√©cifiquement\n                    this.socket.on('qr_scan_initiated', (data) => {\n                        console.log('üîç QR Scan Initiated re√ßu:', data);\n                        this.showQRLoader();\n                    });\n\n                    // √âcouter l'√©v√©nement message g√©n√©rique (fallback)\n                    this.socket.on('message', (data) => {\n                        console.log('üì® Message socket re√ßu:', data);\n                        if (data && data.type === 'qr_scan_initiated') {\n                            console.log('üîç QR Scan Initiated d√©tect√© dans message:', data);\n                            this.showQRLoader();\n                        }\n                    });\n\n                    // √âcouter tous les √©v√©nements socket pour le debugging\n                    this.socket.onAny = this.socket.onAny || function(eventName, callback) {\n                        // Fallback pour les versions de Socket.IO qui n'ont pas onAny\n                        console.log(`üåê Socket Event [${eventName}]:`, callback);\n                    };\n                    \n                    // Logger tous les √©v√©nements re√ßus\n                    this.socket.onAny((eventName, ...args) => {\n                        console.log(`üåê Socket Event [${eventName}]:`, args);\n                    });\n                } else {\n                    console.log('üåê WebSocket d√©j√† connect√©');\n                }\n            } catch (error) {\n                console.error('‚ùå Erreur initialisation WebSocket:', error);\n            }\n        }\n\n        /**\n         * Obtenir l'IP du client (simulation)\n         */\n        getClientIP() {\n            // Simulation - en production, vous pourriez utiliser un service d'IP\n            return '127.0.0.1';\n        }\n\n        /**\n         * Obtenir le nom du type √† partir du num√©ro\n         */\n        getTypeName(type) {\n            switch(type) {\n                case 1: return 'KYC';\n                case 2: return 'AUTH';\n                case 3: return 'SIGNATURE';\n                default: return `TYPE-${type}`;\n            }\n        }\n\n        /**\n         * Validation s√©curis√©e des param√®tres\n         */\n        validateSecurityParams() {\n            const errors = [];\n            \n            // Validation du clientId\n            if (!this.config.clientId || typeof this.config.clientId !== 'string') {\n                errors.push('clientId invalide ou manquant');\n            } else if (this.config.clientId.length < 10) {\n                errors.push('clientId trop court');\n            }\n            \n            // Validation du secretId\n            if (!this.config.secretId || typeof this.config.secretId !== 'string') {\n                errors.push('secretId invalide ou manquant');\n            } else if (this.config.secretId.length < 32) {\n                errors.push('secretId trop court (minimum 32 caract√®res)');\n            }\n            \n            // Validation de l'URL API\n            if (!this.config.apiUrl || !this.isValidUrl(this.config.apiUrl)) {\n                errors.push('apiUrl invalide');\n            }\n            \n            // Validation du type\n            if (![1, 2, 3].includes(this.config.type)) {\n                errors.push('type invalide (doit √™tre 1, 2 ou 3)');\n            }\n            \n            if (errors.length > 0) {\n                this.logSecurityEvent('VALIDATION_ERROR', { errors });\n                throw new Error(`Param√®tres de s√©curit√© invalides: ${errors.join(', ')}`);\n            }\n            \n            this.logSecurityEvent('VALIDATION_SUCCESS');\n        }\n\n        /**\n         * Validation d'URL s√©curis√©e\n         */\n        isValidUrl(string) {\n            try {\n                const url = new URL(string);\n                return url.protocol === 'https:' || url.protocol === 'http:';\n            } catch (_) {\n                return false;\n            }\n        }\n\n        /**\n         * Logs de s√©curit√©\n         */\n        logSecurityEvent(event, data = {}) {\n            if (!this.config.enableSecurityLogs) return;\n            \n            const securityLog = {\n                timestamp: new Date().toISOString(),\n                event: event,\n                data: data,\n                userAgent: navigator.userAgent,\n                url: window.location.href\n            };\n            \n            console.warn('üîí [SECURITY]', securityLog);\n            \n            // Stocker les logs de s√©curit√© (optionnel)\n            if (!window.SunuIDSecurityLogs) {\n                window.SunuIDSecurityLogs = [];\n            }\n            window.SunuIDSecurityLogs.push(securityLog);\n        }\n\n        /**\n         * Chiffrement simple des credentials (pour √©viter l'exposition en clair)\n         */\n        obfuscateCredentials() {\n            // Stocker les vraies valeurs pour les logs de s√©curit√©\n            this.config.originalClientId = this.config.clientId;\n            this.config.originalSecretId = this.config.secretId;\n            \n            // Cr√©er des versions obfusqu√©es pour l'affichage uniquement\n            if (this.config.clientId) {\n                this.config.clientIdDisplay = this.config.clientId.replace(/(.{3}).*(.{3})/, '$1***$2');\n            }\n            if (this.config.secretId) {\n                this.config.secretIdDisplay = this.config.secretId.replace(/(.{4}).*(.{4})/, '$1***$2');\n            }\n        }\n\n        /**\n         * Validation des entr√©es utilisateur\n         */\n        sanitizeInput(input) {\n            if (typeof input !== 'string') return input;\n            \n            // Protection contre les injections XSS basiques\n            return input\n                .replace(/[<>]/g, '') // Supprimer les balises HTML\n                .replace(/javascript:/gi, '') // Supprimer les protocoles dangereux\n                .trim();\n        }\n\n        /**\n         * G√©rer la mise √† jour du statut QR\n         */\n        handleQRStatusUpdate(data) {\n            console.log('üì± QR Status Update:', data);\n            if (this.config.onStatusUpdate) {\n                this.config.onStatusUpdate(data);\n            }\n        }\n\n        /**\n         * G√©rer le succ√®s du scan QR\n         */\n        handleQRScanSuccess(data) {\n            console.log('‚úÖ QR Scan Success:', data);\n            if (this.config.onSuccess) {\n                this.config.onSuccess(data);\n            }\n        }\n\n        /**\n         * G√©rer l'expiration du QR\n         */\n        handleQRExpired(data) {\n            console.log('‚è∞ QR Expired:', data);\n            if (this.config.onExpired) {\n                this.config.onExpired(data);\n            }\n        }\n\n        /**\n         * √âmettre un √©v√©nement WebSocket\n         */\n        emitWebSocketEvent(event, data) {\n            if (this.socket && this.socket.connected) {\n                this.socket.emit(event, data);\n                console.log(`üì§ √âv√©nement WebSocket √©mis: ${event}`, data);\n            } else {\n                console.warn('‚ö†Ô∏è WebSocket non connect√©, impossible d\\'√©mettre l\\'√©v√©nement:', event);\n            }\n        }\n\n        /**\n         * Obtenir le statut de la connexion WebSocket\n         */\n        getWebSocketStatus() {\n            if (!this.socket) {\n                return 'not_initialized';\n            }\n            return this.socket.connected ? 'connected' : 'disconnected';\n        }\n\n        /**\n         * Forcer l'initialisation WebSocket (si Socket.IO devient disponible plus tard)\n         */\n        forceWebSocketInit() {\n            if (typeof io !== 'undefined' && !this.socket) {\n                console.log('üîÑ For√ßage de l\\'initialisation WebSocket...');\n                this.initWebSocket();\n            }\n        }\n\n        /**\n         * G√©n√©rer un QR code avec le type configur√©\n         */\n        async generateQR(containerId = 'sunuid-qr-container', options = {}) {\n            // Attendre l'initialisation si n√©cessaire\n            if (this.initPromise) {\n                await this.initPromise;\n                this.initPromise = null;\n            }\n            \n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n            \n            console.log('üéØ generateQR appel√© avec containerId:', containerId);\n            \n            // Attendre que les connexions soient pr√™tes\n            console.log('üîç Attente connexions API et WebSocket...');\n            try {\n                const connectionStatus = await this.waitForConnections(5000); // 5 secondes max\n                console.log('‚úÖ Connexions pr√™tes:', connectionStatus);\n            } catch (connectionError) {\n                console.error('‚ùå Erreur connexions:', connectionError.message);\n                throw new Error('Connexions non disponibles - Impossible de g√©n√©rer le QR code');\n            }\n\n            try {\n                // Utiliser uniquement le socketID comme contenu du QR\n                const socketId = this.socket ? this.socket.id : 'timeout-socket-id';\n                const qrContent = socketId;\n                \n                console.log('üìÑ Contenu QR pr√©par√©:', qrContent);\n                console.log('üîå Socket ID:', socketId);\n                \n                                    // G√©n√©rer le QR avec le contenu complet\n                    const partnerName = this.config.partnerName || 'Partner_unknown';\n                    const response = await this.makeRequest('/qr-generate', {\n                        type: this.config.type,\n                        content: qrContent, // Contenu personnalis√© pour le QR\n                        label: `${this.getTypeName(this.config.type)} ${partnerName}`, // Label du QR avec nom du partenaire\n                        ...options\n                    });\n\n                if (response.success) {\n                    // Construire l'URL compl√®te du QR code\n                    let qrImageUrl = response.data.qrCodeUrl;\n                    \n                    // Si l'URL est relative, la rendre absolue\n                    if (qrImageUrl.startsWith('/')) {\n                        qrImageUrl = `${this.config.apiUrl}${qrImageUrl}`;\n                    }\n                    \n                    this.currentQRUrl = qrImageUrl;\n                    \n                    console.log('‚úÖ QR code g√©n√©r√© par API principale:', qrImageUrl);\n                    console.log('üìÑ Contenu QR final:', qrContent);\n                    console.log('üè∑Ô∏è Label QR:', response.data.label);\n                    console.log('üÜî Session ID:', response.data.sessionId);\n                    \n                    // Afficher le QR code\n                    this.displayQRCode(containerId, qrImageUrl, this.config.type, options);\n                    \n                    this.startAutoRefresh(containerId, this.config.type, options);\n                    \n                    // √âmettre un √©v√©nement WebSocket pour la g√©n√©ration du QR\n                    this.emitWebSocketEvent('qr_generated', {\n                        type: this.config.type,\n                        qrCodeUrl: qrImageUrl,\n                        socketId: socketId,\n                        qrContent: qrContent,\n                        label: response.data.label,\n                        sessionId: response.data.sessionId,\n                        timestamp: Date.now()\n                    });\n                    \n                    return {\n                        ...response.data,\n                        qrCodeUrl: qrImageUrl,\n                        qrContent: qrContent,\n                        label: response.data.label,\n                        sessionId: response.data.sessionId\n                    };\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la g√©n√©ration du QR code');\n                }\n            } catch (error) {\n                console.error('Erreur API d√©tect√©e:', error.message);\n                console.error('Stack trace complet:', error.stack);\n                console.error('Configuration SDK:', {\n                    apiUrl: this.config.apiUrl,\n                    type: this.config.type,\n                    secureInit: this.config.secureInit,\n                    clientId: this.config.clientId ? '***' + this.config.clientId.slice(-4) : 'null',\n                    secretId: this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null'\n                });\n                \n                // Fallback vers le service local seulement si activ√©\n                if (this.config.useLocalFallback) {\n                    console.log('üîç V√©rification fallback local...');\n                    console.log('üîç Hostname:', window.location.hostname);\n                    console.log('üîç Protocol:', window.location.protocol);\n                    console.log('üîç URL compl√®te:', window.location.href);\n                    \n                    const isLocal = window.location.hostname === 'localhost' || \n                                   window.location.hostname === '127.0.0.1' || \n                                   window.location.protocol === 'file:';\n                    \n                    console.log('üîç Est local:', isLocal);\n                    \n                    if (isLocal) {\n                        console.log('üîÑ Tentative fallback vers service QR local...');\n                        console.log('‚ùå Fallback local non impl√©ment√© - utilisation serveur distant uniquement');\n                    } else {\n                        console.log('‚ùå Pas en local, pas de fallback');\n                    }\n                } else {\n                    console.log('üîí Fallback local d√©sactiv√©, utilisation serveur distant uniquement');\n                }\n                \n                console.log('Affichage du message \"Service non disponible\" pour type ' + this.config.type);\n                this.displayServiceUnavailable(containerId, this.config.type);\n                throw new Error('Service non disponible');\n            }\n        }\n\n\n\n        /**\n         * G√©n√©rer un QR code avec un type personnalis√©\n         */\n        async generateCustomQR(containerId, type, options = {}) {\n            // Attendre l'initialisation si n√©cessaire\n            if (this.initPromise) {\n                await this.initPromise;\n                this.initPromise = null;\n            }\n            \n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-generate', {\n                    type: type, // Type personnalis√© (1, 2, 3, etc.)\n                    ...options\n                });\n\n                if (response.success) {\n                    // Construire l'URL compl√®te de l'image QR avec la base URL pour les images\n                    const imageBaseUrl = 'https://sunuid.fayma.sn';\n                    const qrImageUrl = `${imageBaseUrl}${response.data.qrcode}`;\n                    this.displayQRCode(containerId, qrImageUrl, type, options);\n                    \n                    // Le QR code est d√©j√† g√©n√©r√© par l'API principale\n                    console.log('‚úÖ QR code personnalis√© g√©n√©r√© par API principale:', qrImageUrl);\n                    console.log('üìÑ Code de session:', response.data.code);\n                    console.log('üÜî Service ID:', response.data.service_id);\n                    \n                    this.startAutoRefresh(containerId, type, options);\n                    return {\n                        ...response.data,\n                        qrCodeUrl: qrImageUrl,\n                        sessionId: response.data.service_id\n                    };\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la g√©n√©ration du QR code');\n                }\n            } catch (error) {\n                console.error('Erreur API d√©tect√©e:', error.message);\n                console.error('Stack trace complet:', error.stack);\n                console.error('Configuration SDK (Custom):', {\n                    apiUrl: this.config.apiUrl,\n                    type: type,\n                    secureInit: this.config.secureInit,\n                    clientId: this.config.clientId ? '***' + this.config.clientId.slice(-4) : 'null',\n                    secretId: this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null'\n                });\n                console.log('Affichage du message \"Service non disponible\" pour type ' + type);\n                this.displayServiceUnavailable(containerId, type);\n                throw new Error('Service non disponible');\n            }\n        }\n\n        // Alias pour maintenir la compatibilit√©\n        async generateAuthQR(containerId, options = {}) {\n            return this.generateQR(containerId, options);\n        }\n\n        async generateKYCQR(containerId, options = {}) {\n            // Sauvegarder le type actuel\n            const originalType = this.config.type;\n            // Changer temporairement le type pour KYC\n            this.config.type = 1;\n            try {\n                return await this.generateQR(containerId, options);\n            } finally {\n                // Restaurer le type original\n                this.config.type = originalType;\n            }\n        }\n\n        async generateSignatureQR(containerId, options = {}) {\n            // Sauvegarder le type actuel\n            const originalType = this.config.type;\n            // Changer temporairement le type pour Signature\n            this.config.type = 3;\n            try {\n                return await this.generateQR(containerId, options);\n            } finally {\n                // Restaurer le type original\n                this.config.type = originalType;\n            }\n        }\n\n        /**\n         * V√©rifier le statut d'un QR code\n         */\n        async checkQRStatus(sessionId) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-status', {\n                    serviceId: sessionId\n                });\n\n                if (response.success) {\n                    return response.data;\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la v√©rification du statut');\n                }\n            } catch (error) {\n                this.handleError(error);\n                throw error;\n            }\n        }\n\n        /**\n         * G√©n√©rer un QR code avec un contenu sp√©cifique\n         */\n        async generateQRWithContent(content, containerId, type, options = {}) {\n            console.log('üé® G√©n√©ration QR avec contenu:', content);\n            \n            try {\n                // Essayer d'abord le service QR local\n                if (window.location.hostname === 'localhost' || \n                    window.location.hostname === '127.0.0.1' || \n                    window.location.protocol === 'file:') {\n                    \n                    console.log('üè† Utilisation service QR local...');\n                    const localQRUrl = await this.generateQRLocal(content, containerId, type, options);\n                    if (localQRUrl) {\n                        return localQRUrl;\n                    }\n                }\n                \n                // Fallback vers le service QR distant\n                console.log('üåê Utilisation service QR distant...');\n                return await this.generateQRRemote(content, containerId, type, options);\n                \n            } catch (error) {\n                console.error('‚ùå Erreur g√©n√©ration QR:', error);\n                // Fallback vers affichage simple du contenu\n                this.displayQRContent(containerId, content, type, options);\n                return null;\n            }\n        }\n        \n        /**\n         * G√©n√©rer QR code avec service local\n         */\n        async generateQRLocal(content, containerId, type, options = {}) {\n            try {\n                const response = await fetch('http://localhost:8000/api/generate/text', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/x-www-form-urlencoded'\n                    },\n                    body: `text=${encodeURIComponent(content)}&size=300`\n                });\n                \n                if (response.ok) {\n                    const data = await response.json();\n                    const qrUrl = `data:image/png;base64,${data.qrcode}`;\n                    this.displayQRCode(containerId, qrUrl, type, options);\n                    return qrUrl;\n                }\n            } catch (error) {\n                console.log('‚ùå Service QR local non disponible:', error.message);\n            }\n            return null;\n        }\n        \n        /**\n         * G√©n√©rer QR code avec service distant\n         */\n        async generateQRRemote(content, containerId, type, options = {}) {\n            try {\n                const response = await fetch('https://api.sunuid.fayma.sn/qr-generate', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        text: content,\n                        size: 300,\n                        type: type\n                    })\n                });\n                \n                if (response.ok) {\n                    const data = await response.json();\n                    const qrUrl = `data:image/png;base64,${data.qrcode}`;\n                    this.displayQRCode(containerId, qrUrl, type, options);\n                    return qrUrl;\n                }\n            } catch (error) {\n                console.error('‚ùå Erreur service QR distant:', error);\n            }\n            \n            // Fallback vers affichage du contenu\n            this.displayQRContent(containerId, content, type, options);\n            return null;\n        }\n        \n        /**\n         * Afficher le contenu QR en texte (fallback)\n         */\n        displayQRContent(containerId, content, type, options = {}) {\n            const container = document.getElementById(containerId);\n            if (!container) {\n                throw new Error(`Conteneur avec l'ID \"${containerId}\" non trouv√©`);\n            }\n\n            const typeName = this.getTypeName(type);\n            container.innerHTML = `\n                <div class=\"sunuid-qr-code\">\n                    <div class=\"sunuid-qr-header\">\n                        <h3>${typeName}</h3>\n                    </div>\n                    <div class=\"sunuid-qr-content\" style=\"text-align: center; padding: 20px; background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 5px; margin: 10px 0;\">\n                        <p><strong>Contenu QR Code:</strong></p>\n                        <p style=\"font-family: monospace; font-size: 14px; word-break: break-all;\">${content}</p>\n                    </div>\n                    <div class=\"sunuid-qr-instructions\">\n                        <p>Contenu QR g√©n√©r√© avec le format: {type}-{code}-{socketid}</p>\n                    </div>\n                </div>\n            `;\n            \n            console.log('‚úÖ Contenu QR affich√©:', content);\n        }\n        \n        /**\n         * Afficher un QR code dans un conteneur\n         */\n        displayQRCode(containerId, qrUrl, type, options = {}) {\n            const container = document.getElementById(containerId);\n            if (!container) {\n                throw new Error(`Conteneur avec l'ID \"${containerId}\" non trouv√©`);\n            }\n\n            // Nettoyer le conteneur\n            container.innerHTML = '';\n\n            // Cr√©er l'√©l√©ment QR code\n            const qrElement = document.createElement('div');\n            qrElement.className = 'sunuid-qr-code';\n            \n            // Afficher l'image QR avec les informations\n            const typeName = this.getTypeName(type);\n            qrElement.innerHTML = `\n                <div class=\"sunuid-qr-header\">\n                    <h3>${type === 1 ? 'V√©rification KYC' : type === 2 ? 'Authentification' : type === 3 ? 'Signature' : 'Service Type ' + type}</h3>\n                </div>\n                <div class=\"sunuid-qr-image\">\n                    <img src=\"${qrUrl}\" alt=\"QR Code ${typeName}\" style=\"max-width: 300px; border: 1px solid #ddd; border-radius: 5px;\" />\n                </div>\n               \n            `;\n\n            container.appendChild(qrElement);\n\n            // Appliquer le th√®me\n            this.applyTheme(options.theme || this.config.theme);\n            \n            console.log('‚úÖ QR code affich√©:', qrUrl);\n        }\n\n        /**\n         * G√©n√©rer un QR code personnalis√© avec PHP Endroid\n         */\n        async generateCustomQRCode(content, label, options = {}) {\n            console.log('üé® D√©but g√©n√©ration QR personnalis√©...');\n            console.log('üìÑ Contenu:', content);\n            console.log('üè∑Ô∏è Label:', label);\n            \n            // Chercher le conteneur QR\n            let qrContainer = document.getElementById('sunuid-qr-container');\n            if (!qrContainer) {\n                qrContainer = document.getElementById('qr-container');\n            }\n            if (!qrContainer) {\n                console.error('‚ùå QR container not found');\n                return;\n            }\n            \n            console.log('‚úÖ QR container trouv√©');\n\n            // Nettoyer le conteneur\n            qrContainer.innerHTML = '<div style=\"text-align: center; padding: 20px;\"><p>G√©n√©ration QR code...</p></div>';\n\n                         try {\n                 // Utiliser directement l'API principale (plus fiable)\n                 console.log('üé® Tentative g√©n√©ration via API principale...');\n                 await this.generateQRPHP(content, label, qrContainer);\n                 console.log('‚úÖ QR code g√©n√©r√© avec succ√®s');\n                 \n             } catch (error) {\n                 console.error('‚ùå Erreur g√©n√©ration API:', error);\n                 \n                 // Fallback final : image par d√©faut\n                 console.log('‚ö†Ô∏è Affichage image par d√©faut');\n                 this.displayDefaultQR(qrContainer, content, label);\n             }\n        }\n\n        /**\n         * G√©n√©rer un QR code c√¥t√© client (m√©thode principale)\n         */\n        async generateQRClientSide(content, label, qrContainer) {\n            // Charger QRCode si n√©cessaire\n            await this.ensureQRCodeLibrary();\n            \n            if (typeof QRCode === 'undefined') {\n                throw new Error('QRCode library non disponible');\n            }\n            \n            // Cr√©er un canvas\n            const canvas = document.createElement('canvas');\n            canvas.width = 300;\n            canvas.height = 320;\n            const ctx = canvas.getContext('2d');\n            \n            // Fond blanc\n            ctx.fillStyle = '#FFFFFF';\n            ctx.fillRect(0, 0, 300, 320);\n            \n            // G√©n√©rer le QR code\n            return new Promise((resolve, reject) => {\n                QRCode.toCanvas(canvas, content, {\n                    width: 280,\n                    margin: 10,\n                    color: {\n                        dark: '#000000',\n                        light: '#FFFFFF'\n                    }\n                }, (error) => {\n                    if (error) {\n                        reject(error);\n                        return;\n                    }\n                    \n                    // Ajouter le label\n                    ctx.fillStyle = '#333333';\n                    ctx.font = 'bold 14px Arial';\n                    ctx.textAlign = 'center';\n                    ctx.fillText(label, 150, 305);\n                    \n                    // Convertir en data URL\n                    const dataUrl = canvas.toDataURL('image/png');\n                    \n                    // Stocker l'URL\n                    this.currentQRUrl = dataUrl;\n                    \n                    // Afficher le QR code\n                    qrContainer.innerHTML = `\n                        <div style=\"text-align: center; padding: 20px;\">\n                            <img src=\"${dataUrl}\" alt=\"QR Code\" style=\"max-width: 300px; border: 2px solid #ddd; border-radius: 10px;\">\n                        </div>\n                    `;\n                    \n                    // Afficher les instructions\n                    this.showQRInstructions(qrContainer);\n                    \n                    resolve();\n                });\n            });\n        }\n\n        /**\n         * G√©n√©rer un QR code via endpoint PHP (fallback)\n         */\n        async generateQRPHP(content, label, qrContainer) {\n                         // Construire l'URL - Utiliser l'API principale qui fonctionne\n             let qrGeneratorUrl;\n             if (this.config.forceRemoteServer) {\n                 qrGeneratorUrl = 'https://api.sunuid.fayma.sn/qr-generate';\n             } else if (this.config.apiUrl.includes('api.sunuid.fayma.sn')) {\n                 qrGeneratorUrl = 'https://api.sunuid.fayma.sn/qr-generate';\n             } else if (this.config.apiUrl.includes('localhost') || this.config.apiUrl.includes('127.0.0.1')) {\n                 qrGeneratorUrl = 'http://localhost:8000/api/generate/text';\n             } else {\n                 qrGeneratorUrl = this.config.apiUrl + '/qr-generate';\n             }\n            \n            console.log('üîó URL QR Generator:', qrGeneratorUrl);\n            \n                         // Adapter le format selon l'URL\n             let requestBody;\n             let contentType;\n             \n             if (qrGeneratorUrl.includes('localhost:8000')) {\n                 // Service local - format form-data\n                 contentType = 'application/x-www-form-urlencoded';\n                 requestBody = new URLSearchParams({\n                     text: content,\n                     size: 300,\n                     margin: 10,\n                     foreground_color: '000000',\n                     background_color: 'FFFFFF'\n                 });\n             } else {\n                 // Service distant - format JSON avec les param√®tres de l'API principale\n                 contentType = 'application/json';\n                 requestBody = JSON.stringify({\n                     type: this.config.type,\n                     client_id: this.config.clientId,\n                     secret_id: this.config.secretId,\n                     content: content,\n                     label: label\n                 });\n             }\n             \n             const response = await fetch(qrGeneratorUrl, {\n                 method: 'POST',\n                 headers: {\n                     'Content-Type': contentType,\n                     'Accept': 'application/json'\n                 },\n                 body: requestBody\n             });\n            \n            if (!response.ok) {\n                throw new Error(`Erreur HTTP: ${response.status}`);\n            }\n            \n            const responseData = await response.json();\n            \n                         if (!responseData.success) {\n                 throw new Error(`Erreur QR: ${responseData.error}`);\n             }\n             \n             // Adapter selon le format de r√©ponse\n             let qrImageUrl;\n             if (qrGeneratorUrl.includes('localhost:8000')) {\n                 // Service local\n                 qrImageUrl = responseData.data_uri;\n             } else {\n                 // Service distant - utiliser le format de l'API principale\n                 const imageBaseUrl = 'https://sunuid.fayma.sn';\n                 qrImageUrl = `${imageBaseUrl}${responseData.data.qrcode}`;\n             }\n             \n             // Stocker l'URL\n             this.currentQRUrl = qrImageUrl;\n             \n             // Afficher le QR code\n             qrContainer.innerHTML = `\n                 <div style=\"text-align: center; padding: 20px;\">\n                     <img src=\"${qrImageUrl}\" alt=\"QR Code\" style=\"max-width: 300px; border: 2px solid #ddd; border-radius: 10px;\">\n                 </div>\n             `;\n            \n            // Afficher les instructions\n            this.showQRInstructions(qrContainer);\n        }\n\n        /**\n         * Afficher une image QR par d√©faut (fallback final)\n         */\n        displayDefaultQR(qrContainer, content, label) {\n            qrContainer.innerHTML = `\n                <div style=\"text-align: center; padding: 20px; color: #666;\">\n                    <div style=\"width: 300px; height: 300px; background: #f0f0f0; border: 2px solid #ddd; border-radius: 10px; display: flex; align-items: center; justify-content: center; margin: 0 auto;\">\n                        <div>\n                            <p style=\"font-size: 24px; margin: 0;\">üì±</p>\n                            <p style=\"font-size: 14px; margin: 10px 0 0 0;\">QR Code</p>\n                        </div>\n                    </div>\n                    <p style=\"margin-top: 10px; font-size: 12px;\">${label}</p>\n                    <p style=\"font-size: 10px; color: #999; margin-top: 5px;\">Contenu: ${content}</p>\n                </div>\n            `;\n        }\n\n        /**\n         * S'assurer que la biblioth√®que QRCode est disponible\n         */\n        async ensureQRCodeLibrary() {\n            if (typeof QRCode !== 'undefined') {\n                console.log('‚úÖ QRCode library d√©j√† disponible');\n                return true;\n            }\n            \n            console.log('üì¶ Chargement QRCode library...');\n            \n            return new Promise((resolve, reject) => {\n                const script = document.createElement('script');\n                script.src = 'https://cdn.jsdelivr.net/npm/qrcode@1.5.3/lib/browser.min.js';\n                script.onload = () => {\n                    setTimeout(() => {\n                        if (typeof QRCode !== 'undefined') {\n                            console.log('‚úÖ QRCode library charg√©e');\n                            resolve(true);\n                        } else {\n                            console.error('‚ùå QRCode non disponible apr√®s chargement');\n                            reject(new Error('QRCode library non disponible apr√®s chargement'));\n                        }\n                    }, 200);\n                };\n                script.onerror = () => {\n                    console.error('‚ùå Erreur chargement QRCode library');\n                    reject(new Error('Erreur chargement QRCode library'));\n                };\n                document.head.appendChild(script);\n            });\n        }\n\n        /**\n         * Afficher les instructions pour le QR code\n         */\n        showQRInstructions(qrContainer) {\n            const instructionsElement = qrContainer.parentElement.querySelector('.sunuid-qr-instructions');\n            const statusElement = qrContainer.parentElement.querySelector('.sunuid-qr-status');\n            \n            if (instructionsElement) {\n                instructionsElement.style.display = 'block';\n                instructionsElement.classList.add('sunuid-qr-ready');\n            }\n            if (statusElement) {\n                statusElement.style.display = 'block';\n                statusElement.classList.add('sunuid-qr-ready');\n            }\n        }\n\n        /**\n         * Ajouter le logo au centre du QR code\n         */\n        addLogoToCenter(ctx, x, y, width, height) {\n            try {\n                // Cr√©er une image pour le logo\n                const logo = new Image();\n                logo.onload = () => {\n                    const logoSize = 40;\n                    const logoX = x + (width - logoSize) / 2;\n                    const logoY = y + (width - logoSize) / 2;\n\n                    // Dessiner un fond blanc pour le logo\n                    ctx.fillStyle = 'white';\n                    ctx.fillRect(logoX - 2, logoY - 2, logoSize + 4, logoSize + 4);\n\n                    // Dessiner le logo\n                    ctx.drawImage(logo, logoX, logoY, logoSize, logoSize);\n                };\n                logo.src = 'src/logoqr.png';\n            } catch (error) {\n                console.warn('Logo non disponible:', error);\n            }\n        }\n\n        /**\n         * Afficher l'image de fallback\n         */\n        displayFallbackImage() {\n            console.log('‚ö†Ô∏è Affichage de l\\'image de fallback');\n            const qrContainer = document.getElementById('sunuid-qr-container');\n            if (qrContainer) {\n                qrContainer.innerHTML = `\n                    <div style=\"text-align: center; padding: 20px; color: #666;\">\n                        <p>‚ö†Ô∏è G√©n√©ration QR personnalis√© non disponible</p>\n                        <p>Utilisation de l'image par d√©faut</p>\n                        <p><strong>Debug:</strong> QRCode disponible: ${typeof QRCode !== 'undefined'}</p>\n                        <p><strong>Debug:</strong> Container trouv√©: ${qrContainer !== null}</p>\n                    </div>\n                `;\n            }\n        }\n\n        /**\n         * Afficher \"Service non disponible\"\n         */\n        displayServiceUnavailable(containerId, type) {\n            console.log(`displayServiceUnavailable appel√©e pour ${containerId}, type: ${type}`);\n            const container = document.getElementById(containerId);\n            if (!container) {\n                console.error(`Container ${containerId} non trouv√©`);\n                return;\n            }\n\n            container.innerHTML = `\n                <div class=\"sunuid-service-unavailable\" style=\"\n                    text-align: center;\n                    padding: 40px 20px;\n                    background: #f8f9fa;\n                    border: 2px dashed #dee2e6;\n                    border-radius: 10px;\n                    color: #6c757d;\n                    font-family: Arial, sans-serif;\n                \">\n                    <div style=\"font-size: 48px; margin-bottom: 20px;\">‚ö†Ô∏è</div>\n                    <h3 style=\"margin: 0 0 10px 0; color: #495057;\">Service Non Disponible</h3>\n                    <p style=\"margin: 0; font-size: 14px;\">\n                        Le service d'authentification est temporairement indisponible.<br>\n                        Veuillez r√©essayer plus tard.\n                    </p>\n                    <div style=\"margin-top: 20px; font-size: 12px; color: #adb5bd;\">\n                        Type: ${String(type).toUpperCase()}\n                    </div>\n                </div>\n            `;\n        }\n\n        /**\n         * Rafra√Æchir un QR code\n         */\n        async refreshQR(containerId, options = {}) {\n            try {\n                // V√©rifier si on a d√©j√† un QR code g√©n√©r√©\n                if (this.currentQRUrl) {\n                    console.log('üîÑ V√©rification du statut du QR code existant...');\n                    \n                    // Option 1: V√©rifier le statut du QR code via l'API\n                    // (√† impl√©menter si l'API le supporte)\n                    \n                    // Option 2: R√©g√©n√©rer le QR code seulement si n√©cessaire\n                    // Pour l'instant, on r√©g√©n√®re pour s'assurer qu'il est √† jour\n                    const result = await this.generateQR(containerId, options);\n                    return result;\n                } else {\n                    console.log('üîÑ Pas de QR code existant, g√©n√©ration d\\'un nouveau...');\n                    const result = await this.generateQR(containerId, options);\n                    return result;\n                }\n            } catch (error) {\n                console.error('Erreur lors du rafra√Æchissement:', error.message);\n                this.displayServiceUnavailable(containerId, this.config.type);\n                throw error;\n            }\n        }\n\n        /**\n         * D√©marrer le rafra√Æchissement automatique\n         */\n        startAutoRefresh(containerId, type, options) {\n            if (!this.config.autoRefresh) return;\n\n            // Arr√™ter le timer existant s'il y en a un\n            if (this.refreshTimer) {\n                clearInterval(this.refreshTimer);\n                console.log('üîÑ Timer de rafra√Æchissement pr√©c√©dent arr√™t√©');\n            }\n\n            this.refreshTimer = setInterval(async () => {\n                try {\n                    console.log('üîÑ Rafra√Æchissement automatique du QR code...');\n                    await this.refreshQR(containerId, type, options);\n                } catch (error) {\n                    console.warn('Erreur lors du rafra√Æchissement automatique:', error);\n                }\n            }, this.config.refreshInterval);\n            \n            console.log(`üîÑ Timer de rafra√Æchissement d√©marr√© (${this.config.refreshInterval}ms)`);\n        }\n\n        /**\n         * D√©marrer le timer de compte √† rebours\n         */\n\n\n        /**\n         * Effectuer une requ√™te API s√©curis√©e\n         */\n        async makeRequest(endpoint, data) {\n            // Validation de s√©curit√©\n            if (!this.isInitialized) {\n                this.logSecurityEvent('REQUEST_BEFORE_INIT', { endpoint });\n                throw new Error('SDK non initialis√©');\n            }\n\n            // V√©rifier les limites de requ√™tes pour l'initialisation s√©curis√©e\n            if (this.config.secureInit) {\n                this.config.requestCount++;\n                if (this.config.requestCount > this.config.maxRequests) {\n                    this.logSecurityEvent('API_REQUEST_LIMIT_EXCEEDED', { \n                        requestCount: this.config.requestCount,\n                        maxRequests: this.config.maxRequests \n                    });\n                    throw new Error('Limite de requ√™tes d√©pass√©e');\n                }\n            }\n\n            // Sanitisation des donn√©es\n            const sanitizedData = this.sanitizeRequestData(data);\n            \n            // Debug: Afficher les donn√©es envoy√©es\n            console.log('üîç Debug makeRequest - endpoint:', endpoint);\n            console.log('üîç Debug makeRequest - apiUrl:', this.config.apiUrl);\n            console.log('üîç Debug makeRequest - url:', `${this.config.apiUrl}${endpoint}`);\n            console.log('üîç Debug makeRequest - data:', JSON.stringify(sanitizedData, null, 2));\n            console.log('üîç Debug makeRequest - secureInit:', this.config.secureInit);\n            console.log('üîç Debug makeRequest - isInitialized:', this.isInitialized);\n            \n            // Utiliser l'endpoint depuis la configuration si disponible\n            const endpointPath = window.SunuIDConfig?.endpoints?.[endpoint.replace('/', '')] || endpoint;\n            const url = `${this.config.apiUrl}${endpointPath}`;\n            \n            // Debug: Afficher l'URL finale\n            console.log('üîç URL finale construite:', url);\n            console.log('üîç EndpointPath:', endpointPath);\n            console.log('üîç SunuIDConfig endpoints:', JSON.stringify(window.SunuIDConfig?.endpoints));\n            \n            // Log de s√©curit√© pour la requ√™te\n            this.logSecurityEvent('API_REQUEST_START', {\n                endpoint: endpointPath,\n                url: url,\n                dataKeys: Object.keys(sanitizedData),\n                secureInit: this.config.secureInit\n            });\n            \n            let retryCount = 0;\n            const maxRetries = this.config.maxRetries;\n            \n            while (retryCount <= maxRetries) {\n                try {\n                    const controller = new AbortController();\n                    const timeoutId = setTimeout(() => controller.abort(), this.config.requestTimeout);\n                    \n                    // Headers minimaux (API SunuID n'accepte que les headers essentiels)\n                    const headers = {\n                        'Content-Type': 'application/json'\n                    };\n\n                    // Note: En mode s√©curis√©, les credentials sont dans le body\n                    // Pas besoin d'ajouter de header sp√©cial pour √©viter les probl√®mes CORS\n                    // if (this.config.secureInit && this.config.token) {\n                    //     headers['X-Secure-Token'] = this.config.token;\n                    // }\n                    \n                    const response = await fetch(url, {\n                        method: 'POST',\n                        headers: headers,\n                        body: JSON.stringify(sanitizedData),\n                        signal: controller.signal\n                    });\n\n                    clearTimeout(timeoutId);\n\n                    if (!response.ok) {\n                        const errorText = await response.text();\n                        let errorData;\n                        try {\n                            errorData = JSON.parse(errorText);\n                        } catch (e) {\n                            errorData = { message: errorText };\n                        }\n                        \n                        this.logSecurityEvent('API_REQUEST_ERROR', {\n                            status: response.status,\n                            statusText: response.statusText,\n                            error: errorData.message\n                        });\n                        \n                        throw new Error(errorData.message || `Erreur HTTP: ${response.status}`);\n                    }\n\n                    const result = await response.json();\n                    \n                    this.logSecurityEvent('API_REQUEST_SUCCESS', {\n                        endpoint: endpointPath,\n                        responseKeys: Object.keys(result)\n                    });\n                    \n                    return result;\n                    \n                } catch (error) {\n                    retryCount++;\n                    \n                    if (error.name === 'AbortError') {\n                        this.logSecurityEvent('API_REQUEST_TIMEOUT', { retryCount });\n                        if (retryCount > maxRetries) {\n                            throw new Error('Timeout de la requ√™te API');\n                        }\n                        continue;\n                    }\n                    \n                    if (retryCount > maxRetries) {\n                        this.logSecurityEvent('API_REQUEST_MAX_RETRIES', { \n                            retryCount, \n                            error: error.message \n                        });\n                        throw error;\n                    }\n                    \n                    // Attendre avant de r√©essayer\n                    await new Promise(resolve => setTimeout(resolve, 1000 * retryCount));\n                }\n            }\n        }\n\n        /**\n         * Sanitisation des donn√©es de requ√™te\n         */\n        sanitizeRequestData(data) {\n            const sanitized = {};\n            \n            for (const [key, value] of Object.entries(data)) {\n                if (typeof value === 'string') {\n                    sanitized[key] = this.sanitizeInput(value);\n                } else if (typeof value === 'object' && value !== null) {\n                    sanitized[key] = this.sanitizeRequestData(value);\n                } else {\n                    sanitized[key] = value;\n                }\n            }\n            \n            // Ajouter les credentials dans le body (API SunuID les attend ici)\n            // Utiliser les vraies valeurs (originales) si disponibles, sinon les valeurs directes\n            sanitized.client_id = this.config.originalClientId || this.config.clientId;\n            sanitized.secret_id = this.config.originalSecretId || this.config.secretId;\n            \n            // Debug: V√©rifier les credentials\n            console.log('üîç Credentials dans sanitizeRequestData - clientId:', this.config.clientId);\n            console.log('üîç Credentials dans sanitizeRequestData - secretId:', this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null');\n            console.log('üîç Credentials dans sanitizeRequestData - sanitizedClientId:', sanitized.client_id);\n            console.log('üîç Credentials dans sanitizeRequestData - sanitizedSecretId:', sanitized.secret_id ? '***' + sanitized.secret_id.slice(-4) : 'null');\n            console.log('üîç Credentials dans sanitizeRequestData - data complet:', JSON.stringify(sanitized, null, 2));\n            \n            // Debug: V√©rifier les credentials\n            console.log('üîç Credentials dans sanitizeRequestData - clientId:', this.config.clientId);\n            console.log('üîç Credentials dans sanitizeRequestData - secretId:', this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null');\n            console.log('üîç Credentials dans sanitizeRequestData - sanitizedClientId:', sanitized.client_id);\n            console.log('üîç Credentials dans sanitizeRequestData - sanitizedSecretId:', sanitized.secret_id ? '***' + sanitized.secret_id.slice(-4) : 'null');\n            console.log('üîç Credentials dans sanitizeRequestData - data complet:', JSON.stringify(sanitized, null, 2));\n            \n            return sanitized;\n        }\n\n        /**\n         * G√©n√©rer un ID de requ√™te unique\n         */\n        generateRequestId() {\n            return 'req_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n        }\n\n        /**\n         * G√©n√©rer un code de session unique\n         */\n        generateSessionCode() {\n            const timestamp = Date.now();\n            const random = Math.random().toString(36).substr(2, 9);\n            const code = `${timestamp}_${random}`;\n            return btoa(code); // Encoder en base64\n        }\n\n        /**\n         * R√©cup√©rer les informations du partenaire depuis l'API\n         */\n        async fetchPartnerInfo() {\n            try {\n                const response = await this.makeRequest('/debug', {\n                    type: this.config.type,\n                    client_id: this.config.clientId,\n                    secret_id: this.config.secretId\n                });\n\n                console.log('üìã R√©ponse debug API:', response);\n\n                if (response.success && response.authentication && response.authentication.auth_test) {\n                    const authTest = response.authentication.auth_test;\n                    this.config.partnerId = authTest.partner_id;\n                    \n                    // R√©cup√©rer le service_id depuis la r√©ponse\n                    if (response.service_id) {\n                        this.config.serviceId = response.service_id;\n                    } else {\n                        // Fallback: utiliser le partner_id comme service_id\n                        this.config.serviceId = authTest.partner_id;\n                    }\n                    \n                    // Utiliser le partner_id pour d√©terminer le nom du partenaire\n                    // Pour l'instant, on utilise une logique simple bas√©e sur l'ID\n                    if (authTest.partner_id === 21) {\n                        this.config.partnerName = 'Fayma';\n                    } else {\n                        this.config.partnerName = `Partner_${authTest.partner_id}`;\n                    }\n                    \n                    console.log('‚úÖ Informations partenaire r√©cup√©r√©es:', {\n                        partnerName: this.config.partnerName,\n                        partnerId: this.config.partnerId,\n                        serviceId: this.config.serviceId\n                    });\n                } else {\n                    console.warn('‚ö†Ô∏è Impossible de r√©cup√©rer les informations du partenaire, utilisation du partner_id');\n                    this.config.partnerName = `Partner_${this.config.partnerId || 'unknown'}`;\n                }\n            } catch (error) {\n                console.warn('‚ö†Ô∏è Erreur lors de la r√©cup√©ration des informations du partenaire:', error.message);\n                this.config.partnerName = 'Partner_unknown';\n            }\n        }\n\n        /**\n         * Appliquer le th√®me\n         */\n        applyTheme(theme) {\n            const container = document.querySelector('.sunuid-qr-code');\n            if (container) {\n                container.className = `sunuid-qr-code sunuid-theme-${theme}`;\n            }\n        }\n\n        /**\n         * G√©rer les erreurs\n         */\n        handleError(error) {\n            console.error('SunuID SDK Error:', error);\n            \n            if (this.config.onError) {\n                this.config.onError(error);\n            }\n        }\n\n        /**\n         * V√©rifier le statut des connexions\n         */\n        async checkConnections() {\n            const status = {\n                api: false,\n                websocket: false,\n                ready: false\n            };\n            \n            // V√©rifier l'API en utilisant l'endpoint debug avec les credentials\n            try {\n                const testResponse = await fetch(this.config.apiUrl + '/debug', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        type: this.config.type,\n                        client_id: this.config.clientId,\n                        secret_id: this.config.secretId\n                    })\n                });\n                \n                if (testResponse.ok) {\n                    const debugData = await testResponse.json();\n                    // L'API est accessible si on re√ßoit une r√©ponse avec success: true\n                    status.api = debugData.success === true;\n                    console.log('üîç API Status:', status.api ? 'accessible' : 'inaccessible');\n                } else {\n                    status.api = false;\n                    console.log('üîç API Status: HTTP', testResponse.status);\n                }\n            } catch (error) {\n                console.log('üîç Test API √©chou√©:', error.message);\n                status.api = false;\n            }\n            \n            // V√©rifier le WebSocket\n            status.websocket = this.socket && this.socket.connected;\n            \n            // Connexions pr√™tes si API est accessible\n            status.ready = status.api;\n            \n            return status;\n        }\n        \n        /**\n         * Attendre que les connexions soient pr√™tes\n         */\n        async waitForConnections(timeout = 5000) {\n            const startTime = Date.now();\n            \n            while (Date.now() - startTime < timeout) {\n                const status = await this.checkConnections();\n                \n                if (status.ready) {\n                    console.log('‚úÖ Connexions pr√™tes');\n                    return status;\n                }\n                \n                console.log('‚è≥ Attente connexions...', status);\n                await new Promise(resolve => setTimeout(resolve, 1000)); // V√©rification toutes les secondes\n            }\n            \n            throw new Error('Timeout connexions - Impossible de g√©n√©rer le QR code');\n        }\n        \n        /**\n         * Obtenir l'URL du QR code g√©n√©r√©\n         */\n        getQRCode() {\n            // Retourner l'URL du QR code si disponible\n            if (this.currentQRUrl) {\n                return this.currentQRUrl;\n            }\n            \n            // Sinon, retourner une URL par d√©faut ou null\n            return null;\n        }\n\n        /**\n         * Nettoyer les ressources\n         */\n        destroy() {\n            this.stopAutoRefresh();\n            \n            // Fermer la connexion WebSocket\n            if (this.socket) {\n                this.socket.disconnect();\n                this.socket = null;\n                console.log('üåê WebSocket d√©connect√©');\n            }\n            \n            this.isInitialized = false;\n            this.logSecurityEvent('SDK_DESTROY');\n            console.log('SunuID SDK d√©truit');\n        }\n\n        /**\n         * Arr√™ter le rafra√Æchissement automatique\n         */\n        stopAutoRefresh() {\n            if (this.refreshTimer) {\n                clearInterval(this.refreshTimer);\n                this.refreshTimer = null;\n                console.log('üîÑ Timer de rafra√Æchissement arr√™t√©');\n            }\n        }\n\n        /**\n         * Obtenir les logs de s√©curit√©\n         */\n        getSecurityLogs() {\n            return window.SunuIDSecurityLogs || [];\n        }\n\n        /**\n         * Nettoyer les logs de s√©curit√©\n         */\n        clearSecurityLogs() {\n            window.SunuIDSecurityLogs = [];\n            this.logSecurityEvent('SECURITY_LOGS_CLEARED');\n        }\n\n        /**\n         * Afficher un loader pendant le scan du QR code\n         */\n        showQRLoader() {\n            console.log('üîÑ Affichage du loader - Scan QR initi√©');\n            \n            // Chercher le conteneur QR dans diff√©rents IDs possibles\n            const containerIds = ['qr-area', 'qr-container', 'sunuid-qr-container'];\n            let container = null;\n            \n            for (const id of containerIds) {\n                container = document.getElementById(id);\n                if (container) break;\n            }\n            \n            if (!container) {\n                console.warn('‚ö†Ô∏è Conteneur QR non trouv√© pour afficher le loader');\n                return;\n            }\n            \n            // Remplacer le contenu par un loader anim√©\n            container.innerHTML = `\n                <div style=\"\n                    text-align: center;\n                    padding: 40px 20px;\n                    background: #f8f9fa;\n                    border: 2px solid #007bff;\n                    border-radius: 10px;\n                    color: #007bff;\n                    font-family: Arial, sans-serif;\n                \">\n                    <div style=\"\n                        width: 60px;\n                        height: 60px;\n                        border: 4px solid #e3f2fd;\n                        border-top: 4px solid #007bff;\n                        border-radius: 50%;\n                        animation: spin 1s linear infinite;\n                        margin: 0 auto 20px auto;\n                    \"></div>\n                    <h3 style=\"margin: 0 0 10px 0; color: #007bff;\">üîç Scan en cours...</h3>\n                    <p style=\"margin: 0; font-size: 14px;\">\n                        Veuillez patienter pendant la v√©rification de votre identit√©.\n                    </p>\n                    <div style=\"margin-top: 15px; font-size: 12px; color: #6c757d;\">\n                        ‚è±Ô∏è Traitement en cours...\n                    </div>\n                </div>\n                <style>\n                    @keyframes spin {\n                        0% { transform: rotate(0deg); }\n                        100% { transform: rotate(360deg); }\n                    }\n                </style>\n            `;\n            \n            console.log('‚úÖ Loader affich√© avec succ√®s');\n        }\n    }\n\n    // Exposer la classe globalement\n    window.SunuID = SunuID;\n    window.sunuidInstance = null;\n\n    // Fonction d'initialisation globale\n    window.initSunuID = function(config) {\n        try {\n            window.sunuidInstance = new SunuID(config);\n            return window.sunuidInstance;\n        } catch (error) {\n            console.error('Erreur lors de l\\'initialisation de SunuID:', error);\n            throw error;\n        }\n    };\n\n})(window); "],"names":["window","_window$SunuIDConfig","DEFAULT_CONFIG","apiUrl","SunuIDConfig","clientId","secretId","type","partnerName","theme","language","autoRefresh","refreshInterval","autoInit","onSuccess","onError","onStatusUpdate","onExpired","enableSecurityLogs","validateInputs","maxRetries","requestTimeout","secureInit","secureInitUrl","_window$SunuIDConfig2","_window$SunuIDConfig3","includes","replace","token","forceRemoteServer","useLocalFallback","SunuID","config","arguments","length","undefined","_classCallCheck","_objectSpread","qrCode","refreshTimer","isInitialized","socket","initPromise","init","_createClass","key","value","_init","_asyncToGenerator","_regenerator","m","_callee","_t","w","_context","p","n","validateSecurityParams","logSecurityEvent","fetchPartnerInfo","obfuscateCredentials","console","log","slice","initWebSocket","v","error","message","a","apply","_secureInit","_callee2","initData","response","result","decodedToken","_t2","_context2","fetch","method","headers","body","JSON","stringify","ok","Error","concat","status","json","success","data","api_url","decodeSecureToken","client_id","secret_id","expiresIn","expires_in","maxRequests","max_requests","requestCount","parts","split","_parts","_slicedToArray","payload","signature","decodedPayload","atob","tokenData","parse","exp","Date","now","_this","io","warn","setTimeout","ip","getClientIP","query","userId","username","transports","on","id","connected","reason","handleQRStatusUpdate","handleQRScanSuccess","handleQRExpired","showQRLoader","onAny","eventName","callback","_len","args","Array","_key","getTypeName","errors","push","isValidUrl","join","string","url","URL","protocol","_","event","securityLog","timestamp","toISOString","userAgent","navigator","location","href","SunuIDSecurityLogs","originalClientId","originalSecretId","clientIdDisplay","secretIdDisplay","sanitizeInput","input","trim","emitWebSocketEvent","emit","getWebSocketStatus","forceWebSocketInit","_generateQR","_callee3","containerId","options","connectionStatus","socketId","qrContent","qrImageUrl","isLocal","_args3","_t3","_t4","_context3","waitForConnections","makeRequest","content","label","qrCodeUrl","startsWith","currentQRUrl","sessionId","displayQRCode","startAutoRefresh","stack","hostname","displayServiceUnavailable","generateQR","_generateCustomQR","_callee4","imageBaseUrl","_args4","_t5","_context4","qrcode","code","service_id","generateCustomQR","_x","_x2","_generateAuthQR","_callee5","_args5","_context5","generateAuthQR","_x3","_generateKYCQR","_callee6","originalType","_args6","_context6","f","generateKYCQR","_x4","_generateSignatureQR","_callee7","_args7","_context7","generateSignatureQR","_x5","_checkQRStatus","_callee8","_t6","_context8","serviceId","handleError","checkQRStatus","_x6","_generateQRWithContent","_callee9","localQRUrl","_args9","_t7","_context9","generateQRLocal","generateQRRemote","displayQRContent","generateQRWithContent","_x7","_x8","_x9","_generateQRLocal","_callee0","qrUrl","_args0","_t8","_context0","encodeURIComponent","_x0","_x1","_x10","_generateQRRemote","_callee1","_args1","_t9","_context1","text","size","_x11","_x12","_x13","container","document","getElementById","typeName","innerHTML","qrElement","createElement","className","appendChild","applyTheme","_generateCustomQRCode","_callee10","qrContainer","_args10","_t0","_context10","generateQRPHP","displayDefaultQR","generateCustomQRCode","_x14","_x15","_generateQRClientSide","_callee11","_this2","canvas","ctx","_context11","ensureQRCodeLibrary","QRCode","width","height","getContext","fillStyle","fillRect","Promise","resolve","reject","toCanvas","margin","color","dark","light","font","textAlign","fillText","dataUrl","toDataURL","showQRInstructions","generateQRClientSide","_x16","_x17","_x18","_generateQRPHP","_callee12","qrGeneratorUrl","requestBody","contentType","responseData","_context12","URLSearchParams","foreground_color","background_color","data_uri","_x19","_x20","_x21","_ensureQRCodeLibrary","_callee13","_context13","script","src","onload","onerror","head","instructionsElement","parentElement","querySelector","statusElement","style","display","classList","add","addLogoToCenter","x","y","logo","Image","logoSize","logoX","logoY","drawImage","displayFallbackImage","String","toUpperCase","_refreshQR","_callee14","_result","_args14","_t1","_context14","refreshQR","_x22","_this3","clearInterval","setInterval","_callee15","_t10","_context15","_makeRequest","_callee16","endpoint","_window$SunuIDConfig4","_window$SunuIDConfig5","_this4","sanitizedData","endpointPath","retryCount","_loop","_ret","_context17","sanitizeRequestData","endpoints","dataKeys","Object","keys","controller","timeoutId","errorText","errorData","_t11","_context16","AbortController","abort","signal","clearTimeout","e","statusText","responseKeys","name","d","_regeneratorValues","_x23","_x24","sanitized","_i","_Object$entries","entries","_Object$entries$_i","_typeof","generateRequestId","Math","random","toString","substr","generateSessionCode","btoa","_fetchPartnerInfo","_callee17","authTest","_t12","_context18","authentication","auth_test","partnerId","partner_id","_checkConnections","_callee18","testResponse","debugData","_t13","_context19","api","websocket","ready","checkConnections","_waitForConnections","_callee19","timeout","startTime","_args20","_context20","getQRCode","destroy","stopAutoRefresh","disconnect","getSecurityLogs","clearSecurityLogs","containerIds","_i2","_containerIds","sunuidInstance","initSunuID"],"mappings":"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"}