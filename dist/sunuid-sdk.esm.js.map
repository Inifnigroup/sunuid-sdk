{"version":3,"file":"sunuid-sdk.esm.js","sources":["../src/sunuid-sdk.js"],"sourcesContent":["/**\n * SunuID SDK - Package d'int√©gration pour partenaires\n * \n * @version 1.0.0\n * @author SunuID Team\n * @license MIT\n */\n\n(function(window) {\n    'use strict';\n\n    // Configuration par d√©faut\n    const DEFAULT_CONFIG = {\n        apiUrl: window.SunuIDConfig?.apiUrl || 'https://api.sunuid.fayma.sn',\n        clientId: null,\n        secretId: null,\n        type: 2, // Type par d√©faut (2 = authentification)\n        partnerName: 'SunuID', // Nom du partenaire par d√©faut\n        theme: 'light',\n        language: 'fr',\n        autoRefresh: true,\n        refreshInterval: 30000, // 30 secondes\n        onSuccess: null,\n        onError: null,\n        onStatusUpdate: null,\n        onExpired: null,\n        // Nouvelles options de s√©curit√©\n        enableSecurityLogs: true,\n        validateInputs: true,\n        maxRetries: 3,\n        requestTimeout: 10000, // 10 secondes\n        // Options d'initialisation s√©curis√©e\n        secureInit: false,\n        secureInitUrl: 'http://localhost:8081/secure-init.php',\n        token: null\n    };\n\n    /**\n     * Classe principale SunuID\n     */\n    class SunuID {\n        constructor(config = {}) {\n            this.config = { ...DEFAULT_CONFIG, ...config };\n            this.qrCode = null;\n            this.refreshTimer = null;\n            this.isInitialized = false;\n            this.socket = null;\n            \n            // Initialisation asynchrone\n            this.initPromise = this.init();\n        }\n\n        /**\n         * Initialisation du SDK\n         */\n        async init() {\n            try {\n                // Initialisation s√©curis√©e si activ√©e\n                if (this.config.secureInit) {\n                    await this.secureInit();\n                } else {\n                    // Validation s√©curis√©e des param√®tres\n                    if (this.config.validateInputs) {\n                        this.validateSecurityParams();\n                    }\n                }\n\n                // Log de s√©curit√© pour l'initialisation\n                this.logSecurityEvent('SDK_INIT_START', {\n                    apiUrl: this.config.apiUrl,\n                    type: this.config.type,\n                    partnerName: this.config.partnerName,\n                    secureInit: this.config.secureInit\n                });\n\n                // Obscurcir les credentials dans les logs\n                this.obfuscateCredentials();\n\n                this.isInitialized = true;\n                console.log('SunuID SDK initialis√© avec succ√®s');\n                \n                this.logSecurityEvent('SDK_INIT_SUCCESS');\n                \n                // Initialiser la connexion WebSocket\n                this.initWebSocket();\n                \n            } catch (error) {\n                this.logSecurityEvent('SDK_INIT_ERROR', { error: error.message });\n                throw error;\n            }\n        }\n\n        /**\n         * Initialisation s√©curis√©e via PHP\n         */\n        async secureInit() {\n            try {\n                this.logSecurityEvent('SECURE_INIT_START');\n                \n                const initData = {\n                    type: this.config.type,\n                    partnerName: this.config.partnerName,\n                    theme: this.config.theme\n                };\n\n                const response = await fetch(this.config.secureInitUrl, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json'\n                    },\n                    body: JSON.stringify(initData)\n                });\n\n                if (!response.ok) {\n                    throw new Error(`Erreur HTTP: ${response.status}`);\n                }\n\n                const result = await response.json();\n                \n                if (!result.success) {\n                    throw new Error(result.error || 'Erreur lors de l\\'initialisation s√©curis√©e');\n                }\n\n                // Stocker le token et les donn√©es s√©curis√©es\n                this.config.token = result.data.token;\n                this.config.apiUrl = result.data.api_url;\n                \n                // D√©coder le token pour r√©cup√©rer les credentials\n                const decodedToken = this.decodeSecureToken(result.data.token);\n                if (decodedToken) {\n                    this.config.clientId = decodedToken.client_id;\n                    this.config.secretId = decodedToken.secret_id;\n                } else {\n                    throw new Error('Impossible de d√©coder le token s√©curis√©');\n                }\n                \n                this.config.expiresIn = result.data.expires_in;\n                this.config.maxRequests = result.data.max_requests;\n                this.config.requestCount = 0;\n\n                this.logSecurityEvent('SECURE_INIT_SUCCESS', {\n                    expiresIn: result.data.expires_in,\n                    maxRequests: result.data.max_requests\n                });\n\n                console.log('‚úÖ Initialisation s√©curis√©e r√©ussie');\n                \n            } catch (error) {\n                this.logSecurityEvent('SECURE_INIT_ERROR', { error: error.message });\n                throw new Error(`√âchec de l'initialisation s√©curis√©e: ${error.message}`);\n            }\n        }\n\n        /**\n         * D√©coder le token s√©curis√©\n         */\n        decodeSecureToken(token) {\n            try {\n                const parts = token.split('.');\n                if (parts.length !== 2) {\n                    console.error('‚ùå Format de token invalide');\n                    return null;\n                }\n                \n                const [payload, signature] = parts;\n                \n                // D√©coder le payload (base64)\n                const decodedPayload = atob(payload);\n                const tokenData = JSON.parse(decodedPayload);\n                \n                // V√©rifier l'expiration\n                if (tokenData.exp && tokenData.exp < Date.now() / 1000) {\n                    console.error('‚ùå Token expir√©');\n                    return null;\n                }\n                \n                console.log('‚úÖ Token d√©cod√© avec succ√®s');\n                return tokenData;\n                \n            } catch (error) {\n                console.error('‚ùå Erreur d√©codage token:', error);\n                return null;\n            }\n        }\n\n        /**\n         * Initialiser la connexion WebSocket\n         */\n        initWebSocket() {\n            try {\n                // V√©rifier si Socket.IO est disponible\n                if (typeof io === 'undefined') {\n                    console.warn('‚ö†Ô∏è Socket.IO non disponible, WebSocket sera initialis√© plus tard');\n                    // R√©essayer apr√®s un d√©lai\n                    setTimeout(() => this.initWebSocket(), 1000);\n                    return;\n                }\n                \n                // Obtenir l'IP du client (simulation)\n                const ip = this.getClientIP();\n                \n                // Initialiser la connexion WebSocket si elle n'existe pas\n                if (!this.socket) {\n                    this.socket = io('wss://samasocket.fayma.sn:9443', {\n                        query: {\n                            token: this.config.clientId,\n                            type: 'web',\n                            userId: this.config.clientId,\n                            username: ip\n                        }\n                    });\n\n                    // Gestion des √©v√©nements WebSocket\n                    this.socket.on('connect', () => {\n                        console.log('üåê WebSocket connect√© avec succ√®s');\n                        console.log('üìä Socket ID:', this.socket.id);\n                    });\n\n                    this.socket.on('disconnect', (reason) => {\n                        console.log('‚ùå WebSocket d√©connect√©:', reason);\n                    });\n\n                    this.socket.on('connect_error', (error) => {\n                        console.error('‚ùå Erreur connexion WebSocket:', error);\n                    });\n\n                    // √âcouter les √©v√©nements sp√©cifiques\n                    this.socket.on('qr_status_update', (data) => {\n                        console.log('üì± Mise √† jour statut QR re√ßue:', data);\n                        this.handleQRStatusUpdate(data);\n                    });\n\n                    this.socket.on('qr_scan_success', (data) => {\n                        console.log('‚úÖ Scan QR r√©ussi re√ßu:', data);\n                        this.handleQRScanSuccess(data);\n                    });\n\n                    this.socket.on('qr_expired', (data) => {\n                        console.log('‚è∞ QR expir√© re√ßu:', data);\n                        this.handleQRExpired(data);\n                    });\n                }\n            } catch (error) {\n                console.error('‚ùå Erreur initialisation WebSocket:', error);\n            }\n        }\n\n        /**\n         * Obtenir l'IP du client (simulation)\n         */\n        getClientIP() {\n            // Simulation - en production, vous pourriez utiliser un service d'IP\n            return '127.0.0.1';\n        }\n\n        /**\n         * Obtenir le nom du type √† partir du num√©ro\n         */\n        getTypeName(type) {\n            switch(type) {\n                case 1: return 'KYC';\n                case 2: return 'AUTH';\n                case 3: return 'SIGNATURE';\n                default: return `TYPE-${type}`;\n            }\n        }\n\n        /**\n         * Validation s√©curis√©e des param√®tres\n         */\n        validateSecurityParams() {\n            const errors = [];\n            \n            // Validation du clientId\n            if (!this.config.clientId || typeof this.config.clientId !== 'string') {\n                errors.push('clientId invalide ou manquant');\n            } else if (this.config.clientId.length < 10) {\n                errors.push('clientId trop court');\n            }\n            \n            // Validation du secretId\n            if (!this.config.secretId || typeof this.config.secretId !== 'string') {\n                errors.push('secretId invalide ou manquant');\n            } else if (this.config.secretId.length < 32) {\n                errors.push('secretId trop court (minimum 32 caract√®res)');\n            }\n            \n            // Validation de l'URL API\n            if (!this.config.apiUrl || !this.isValidUrl(this.config.apiUrl)) {\n                errors.push('apiUrl invalide');\n            }\n            \n            // Validation du type\n            if (![1, 2, 3].includes(this.config.type)) {\n                errors.push('type invalide (doit √™tre 1, 2 ou 3)');\n            }\n            \n            if (errors.length > 0) {\n                this.logSecurityEvent('VALIDATION_ERROR', { errors });\n                throw new Error(`Param√®tres de s√©curit√© invalides: ${errors.join(', ')}`);\n            }\n            \n            this.logSecurityEvent('VALIDATION_SUCCESS');\n        }\n\n        /**\n         * Validation d'URL s√©curis√©e\n         */\n        isValidUrl(string) {\n            try {\n                const url = new URL(string);\n                return url.protocol === 'https:' || url.protocol === 'http:';\n            } catch (_) {\n                return false;\n            }\n        }\n\n        /**\n         * Logs de s√©curit√©\n         */\n        logSecurityEvent(event, data = {}) {\n            if (!this.config.enableSecurityLogs) return;\n            \n            const securityLog = {\n                timestamp: new Date().toISOString(),\n                event: event,\n                data: data,\n                userAgent: navigator.userAgent,\n                url: window.location.href\n            };\n            \n            console.warn('üîí [SECURITY]', securityLog);\n            \n            // Stocker les logs de s√©curit√© (optionnel)\n            if (!window.SunuIDSecurityLogs) {\n                window.SunuIDSecurityLogs = [];\n            }\n            window.SunuIDSecurityLogs.push(securityLog);\n        }\n\n        /**\n         * Chiffrement simple des credentials (pour √©viter l'exposition en clair)\n         */\n        obfuscateCredentials() {\n            // Stocker les vraies valeurs pour les logs de s√©curit√©\n            this.config.originalClientId = this.config.clientId;\n            this.config.originalSecretId = this.config.secretId;\n            \n            // Cr√©er des versions obfusqu√©es pour l'affichage uniquement\n            if (this.config.clientId) {\n                this.config.clientIdDisplay = this.config.clientId.replace(/(.{3}).*(.{3})/, '$1***$2');\n            }\n            if (this.config.secretId) {\n                this.config.secretIdDisplay = this.config.secretId.replace(/(.{4}).*(.{4})/, '$1***$2');\n            }\n        }\n\n        /**\n         * Validation des entr√©es utilisateur\n         */\n        sanitizeInput(input) {\n            if (typeof input !== 'string') return input;\n            \n            // Protection contre les injections XSS basiques\n            return input\n                .replace(/[<>]/g, '') // Supprimer les balises HTML\n                .replace(/javascript:/gi, '') // Supprimer les protocoles dangereux\n                .trim();\n        }\n\n        /**\n         * G√©rer la mise √† jour du statut QR\n         */\n        handleQRStatusUpdate(data) {\n            if (this.config.onStatusUpdate) {\n                this.config.onStatusUpdate(data);\n            }\n        }\n\n        /**\n         * G√©rer le succ√®s du scan QR\n         */\n        handleQRScanSuccess(data) {\n            if (this.config.onSuccess) {\n                this.config.onSuccess(data);\n            }\n        }\n\n        /**\n         * G√©rer l'expiration du QR\n         */\n        handleQRExpired(data) {\n            if (this.config.onExpired) {\n                this.config.onExpired(data);\n            }\n        }\n\n        /**\n         * √âmettre un √©v√©nement WebSocket\n         */\n        emitWebSocketEvent(event, data) {\n            if (this.socket && this.socket.connected) {\n                this.socket.emit(event, data);\n                console.log(`üì§ √âv√©nement WebSocket √©mis: ${event}`, data);\n            } else if (typeof io === 'undefined') {\n                console.warn('‚ö†Ô∏è Socket.IO non disponible, impossible d\\'√©mettre l\\'√©v√©nement:', event);\n            } else {\n                console.warn('‚ö†Ô∏è WebSocket non connect√©, impossible d\\'√©mettre l\\'√©v√©nement:', event);\n            }\n        }\n\n        /**\n         * Obtenir le statut de la connexion WebSocket\n         */\n        getWebSocketStatus() {\n            if (!this.socket) {\n                return 'not_initialized';\n            }\n            return this.socket.connected ? 'connected' : 'disconnected';\n        }\n\n        /**\n         * Forcer l'initialisation WebSocket (si Socket.IO devient disponible plus tard)\n         */\n        forceWebSocketInit() {\n            if (typeof io !== 'undefined' && !this.socket) {\n                console.log('üîÑ For√ßage de l\\'initialisation WebSocket...');\n                this.initWebSocket();\n            }\n        }\n\n        /**\n         * G√©n√©rer un QR code avec le type configur√©\n         */\n        async generateQR(containerId, options = {}) {\n            // Attendre l'initialisation si n√©cessaire\n            if (this.initPromise) {\n                await this.initPromise;\n                this.initPromise = null;\n            }\n            \n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-generate', {\n                    type: this.config.type, // Utilise le type configur√©\n                    ...options\n                });\n\n                if (response.success) {\n                    // Construire l'URL compl√®te de l'image QR avec la base URL pour les images\n                    const imageBaseUrl = 'https://sunuid.fayma.sn';\n                    const qrImageUrl = `${imageBaseUrl}${response.data.qrcode}`;\n                    this.displayQRCode(containerId, qrImageUrl, this.config.type, options);\n                    \n                    // G√©n√©rer le QR code personnalis√© avec le type + code de l'API + socket ID\n                    if (this.pendingQRInfo && response.data.code) {\n                        // Attendre que le socket ID soit bien d√©fini\n                        const waitForSocketId = () => {\n                            if (this.socket && this.socket.id && this.socket.id !== 'unknown') {\n                                const socketId = this.socket.id;\n                                const qrContent = `${this.config.type}-${response.data.code}-${socketId}`;\n                                \n                                // Utiliser le partnerName de la r√©ponse API et le nom du type\n                                const partnerName = response.data.partnerName || this.config.partnerName || 'SunuID';\n                                const typeName = this.getTypeName(this.config.type);\n                                const qrLabel = `${typeName} - ${partnerName}`;\n                                \n                                this.generateCustomQRCode(qrContent, qrLabel, this.pendingQRInfo.options);\n                                this.pendingQRInfo = null; // Nettoyer\n                            } else {\n                                // R√©essayer apr√®s un d√©lai si le socket ID n'est pas encore disponible\n                                setTimeout(waitForSocketId, 100);\n                            }\n                        };\n                        \n                        waitForSocketId();\n                    }\n                    \n                    this.startAutoRefresh(containerId, this.config.type, options);\n                    \n                    // √âmettre un √©v√©nement WebSocket pour la g√©n√©ration du QR\n                    this.emitWebSocketEvent('qr_generated', {\n                        serviceId: response.data.service_id,\n                        type: this.config.type,\n                        qrCodeUrl: qrImageUrl,\n                        code: response.data.code,\n                        timestamp: Date.now()\n                    });\n                    \n                    return {\n                        ...response.data,\n                        qrCodeUrl: qrImageUrl,\n                        sessionId: response.data.service_id\n                    };\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la g√©n√©ration du QR code');\n                }\n            } catch (error) {\n                console.error('Erreur API d√©tect√©e:', error.message);\n                console.error('Stack trace complet:', error.stack);\n                console.error('Configuration SDK:', {\n                    apiUrl: this.config.apiUrl,\n                    type: this.config.type,\n                    secureInit: this.config.secureInit,\n                    clientId: this.config.clientId ? '***' + this.config.clientId.slice(-4) : 'null',\n                    secretId: this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null'\n                });\n                console.log('Affichage du message \"Service non disponible\" pour type ' + this.config.type);\n                this.displayServiceUnavailable(containerId, this.config.type);\n                throw new Error('Service non disponible');\n            }\n        }\n\n\n\n        /**\n         * G√©n√©rer un QR code avec un type personnalis√©\n         */\n        async generateCustomQR(containerId, type, options = {}) {\n            // Attendre l'initialisation si n√©cessaire\n            if (this.initPromise) {\n                await this.initPromise;\n                this.initPromise = null;\n            }\n            \n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-generate', {\n                    type: type, // Type personnalis√© (1, 2, 3, etc.)\n                    ...options\n                });\n\n                if (response.success) {\n                    // Construire l'URL compl√®te de l'image QR avec la base URL pour les images\n                    const imageBaseUrl = 'https://sunuid.fayma.sn';\n                    const qrImageUrl = `${imageBaseUrl}${response.data.qrcode}`;\n                    this.displayQRCode(containerId, qrImageUrl, type, options);\n                    \n                    // G√©n√©rer le QR code personnalis√© avec le type + code de l'API + socket ID\n                    if (this.pendingQRInfo && response.data.code) {\n                        // Attendre que le socket ID soit bien d√©fini\n                        const waitForSocketId = () => {\n                            if (this.socket && this.socket.id && this.socket.id !== 'unknown') {\n                                const socketId = this.socket.id;\n                                const qrContent = `${type}-${response.data.code}-${socketId}`;\n                                \n                                // Utiliser le partnerName de la r√©ponse API et le nom du type\n                                const partnerName = response.data.partnerName || this.config.partnerName || 'SunuID';\n                                const typeName = this.getTypeName(type);\n                                const qrLabel = `${typeName} - ${partnerName}`;\n                                \n                                this.generateCustomQRCode(qrContent, qrLabel, this.pendingQRInfo.options);\n                                this.pendingQRInfo = null; // Nettoyer\n                            } else {\n                                // R√©essayer apr√®s un d√©lai si le socket ID n'est pas encore disponible\n                                setTimeout(waitForSocketId, 100);\n                            }\n                        };\n                        \n                        waitForSocketId();\n                    }\n                    \n                    this.startAutoRefresh(containerId, type, options);\n                    return {\n                        ...response.data,\n                        qrCodeUrl: qrImageUrl,\n                        sessionId: response.data.service_id\n                    };\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la g√©n√©ration du QR code');\n                }\n            } catch (error) {\n                console.error('Erreur API d√©tect√©e:', error.message);\n                console.error('Stack trace complet:', error.stack);\n                console.error('Configuration SDK (Custom):', {\n                    apiUrl: this.config.apiUrl,\n                    type: type,\n                    secureInit: this.config.secureInit,\n                    clientId: this.config.clientId ? '***' + this.config.clientId.slice(-4) : 'null',\n                    secretId: this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null'\n                });\n                console.log('Affichage du message \"Service non disponible\" pour type ' + type);\n                this.displayServiceUnavailable(containerId, type);\n                throw new Error('Service non disponible');\n            }\n        }\n\n        // Alias pour maintenir la compatibilit√©\n        async generateAuthQR(containerId, options = {}) {\n            return this.generateQR(containerId, options);\n        }\n\n        async generateKYCQR(containerId, options = {}) {\n            // Sauvegarder le type actuel\n            const originalType = this.config.type;\n            // Changer temporairement le type pour KYC\n            this.config.type = 1;\n            try {\n                return await this.generateQR(containerId, options);\n            } finally {\n                // Restaurer le type original\n                this.config.type = originalType;\n            }\n        }\n\n        async generateSignatureQR(containerId, options = {}) {\n            // Sauvegarder le type actuel\n            const originalType = this.config.type;\n            // Changer temporairement le type pour Signature\n            this.config.type = 3;\n            try {\n                return await this.generateQR(containerId, options);\n            } finally {\n                // Restaurer le type original\n                this.config.type = originalType;\n            }\n        }\n\n        /**\n         * V√©rifier le statut d'un QR code\n         */\n        async checkQRStatus(sessionId) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-status', {\n                    serviceId: sessionId\n                });\n\n                if (response.success) {\n                    return response.data;\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la v√©rification du statut');\n                }\n            } catch (error) {\n                this.handleError(error);\n                throw error;\n            }\n        }\n\n        /**\n         * Afficher un QR code dans un conteneur\n         */\n        displayQRCode(containerId, qrUrl, type, options = {}) {\n            const container = document.getElementById(containerId);\n            if (!container) {\n                throw new Error(`Conteneur avec l'ID \"${containerId}\" non trouv√©`);\n            }\n\n            // Nettoyer le conteneur\n            container.innerHTML = '';\n\n            // Cr√©er l'√©l√©ment QR code\n            const qrElement = document.createElement('div');\n            qrElement.className = 'sunuid-qr-code';\n            \n            // Afficher un loader en attendant la r√©ponse API et la connexion socket\n            const typeName = this.getTypeName(type);\n            qrElement.innerHTML = `\n                <div class=\"sunuid-qr-header\">\n                    <h3>${type === 1 ? 'V√©rification KYC' : type === 2 ? 'Authentification' : type === 3 ? 'Signature' : 'Service Type ' + type}</h3>\n                </div>\n                <div class=\"sunuid-qr-image\" id=\"sunuid-qr-container\">\n                    <div style=\"text-align: center; padding: 40px;\">\n                        <div class=\"sunuid-loader\">\n                            <div class=\"sunuid-spinner\"></div>\n                            <p style=\"margin-top: 20px; color: #666;\">Initialisation en cours...</p>\n                            <p style=\"font-size: 12px; color: #999; margin-top: 10px;\">Connexion API et WebSocket</p>\n                            <p style=\"font-size: 11px; color: #ccc; margin-top: 5px;\">Attente du Socket ID...</p>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"sunuid-qr-instructions\" style=\"display: none;\">\n                    <p>Scannez ce QR code avec l'application SunuID pour vous connecter</p>\n                </div>\n                <div class=\"sunuid-qr-status\" id=\"sunuid-status\" style=\"display: none;\">\n                    <p>En attente de scan...</p>\n                </div>\n            `;\n\n            container.appendChild(qrElement);\n\n            // Stocker les informations pour la g√©n√©ration ult√©rieure\n            this.pendingQRInfo = {\n                containerId,\n                type,\n                options\n            };\n\n            // Appliquer le th√®me\n            this.applyTheme(options.theme || this.config.theme);\n        }\n\n        /**\n         * G√©n√©rer un QR code personnalis√© avec PHP Endroid\n         */\n        async generateCustomQRCode(content, label, options = {}) {\n            try {\n                console.log('üé® D√©but g√©n√©ration QR personnalis√© avec PHP...');\n                console.log('üìÑ Contenu:', content);\n                console.log('üè∑Ô∏è Label:', label);\n                \n                const qrContainer = document.getElementById('sunuid-qr-container');\n                if (!qrContainer) {\n                    console.error('‚ùå QR container not found');\n                    this.displayFallbackImage();\n                    return;\n                }\n                \n                console.log('‚úÖ QR container trouv√©');\n\n                // Nettoyer le conteneur\n                qrContainer.innerHTML = '<div style=\"text-align: center; padding: 20px;\"><p>G√©n√©ration QR code avec PHP...</p></div>';\n\n                // Appeler l'endpoint PHP\n                console.log('üîÑ Appel endpoint PHP...');\n                const response = await fetch('http://localhost:8081/qr-generator.php', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        content: content,\n                        label: label,\n                        size: 300,\n                        margin: 10\n                    })\n                });\n                \n                console.log('üì• R√©ponse PHP re√ßue - Status:', response.status);\n                \n                if (!response.ok) {\n                    throw new Error(`Erreur HTTP: ${response.status}`);\n                }\n                \n                const responseData = await response.json();\n                \n                if (!responseData.success) {\n                    throw new Error(`Erreur PHP: ${responseData.error}`);\n                }\n                \n                console.log('‚úÖ QR code g√©n√©r√© par PHP avec succ√®s');\n                console.log('üìä Taille:', responseData.data.size + 'px');\n                console.log('üìä Longueur base64:', responseData.data.length + ' caract√®res');\n\n                // Cr√©er le conteneur avec le QR code PHP\n                qrContainer.innerHTML = `\n                    <div class=\"sunuid-qr-ready\" style=\"text-align: center; padding: 20px;\">\n                        <img src=\"${responseData.data.dataUrl}\" alt=\"QR Code SunuID\" style=\"max-width: 300px; border: 2px solid #ddd; border-radius: 10px;\">\n                        <div style=\"margin-top: 15px;\">\n                            <p style=\"font-weight: bold; color: #333; margin: 5px 0;\">${label}</p>\n                            <p style=\"color: #666; font-size: 12px; margin: 5px 0;\">${content}</p>\n                        </div>\n                    </div>\n                `;\n                \n                // Afficher les instructions et le statut maintenant que le QR est pr√™t\n                const instructionsElement = qrContainer.parentElement.querySelector('.sunuid-qr-instructions');\n                const statusElement = qrContainer.parentElement.querySelector('.sunuid-qr-status');\n                \n                if (instructionsElement) {\n                    instructionsElement.style.display = 'block';\n                    instructionsElement.classList.add('sunuid-qr-ready');\n                }\n                if (statusElement) {\n                    statusElement.style.display = 'block';\n                    statusElement.classList.add('sunuid-qr-ready');\n                }\n                \n                console.log('‚úÖ QR code PHP affich√© dans le conteneur');\n\n            } catch (error) {\n                console.error('‚ùå Erreur g√©n√©ration QR PHP:', error);\n                console.error('Stack trace:', error.stack);\n                this.displayFallbackImage();\n            }\n        }\n\n        /**\n         * Ajouter le logo au centre du QR code\n         */\n        addLogoToCenter(ctx, x, y, width, height) {\n            try {\n                // Cr√©er une image pour le logo\n                const logo = new Image();\n                logo.onload = () => {\n                    const logoSize = 40;\n                    const logoX = x + (width - logoSize) / 2;\n                    const logoY = y + (width - logoSize) / 2;\n\n                    // Dessiner un fond blanc pour le logo\n                    ctx.fillStyle = 'white';\n                    ctx.fillRect(logoX - 2, logoY - 2, logoSize + 4, logoSize + 4);\n\n                    // Dessiner le logo\n                    ctx.drawImage(logo, logoX, logoY, logoSize, logoSize);\n                };\n                logo.src = 'src/logoqr.png';\n            } catch (error) {\n                console.warn('Logo non disponible:', error);\n            }\n        }\n\n        /**\n         * Afficher l'image de fallback\n         */\n        displayFallbackImage() {\n            console.log('‚ö†Ô∏è Affichage de l\\'image de fallback');\n            const qrContainer = document.getElementById('sunuid-qr-container');\n            if (qrContainer) {\n                qrContainer.innerHTML = `\n                    <div style=\"text-align: center; padding: 20px; color: #666;\">\n                        <p>‚ö†Ô∏è G√©n√©ration QR personnalis√© non disponible</p>\n                        <p>Utilisation de l'image par d√©faut</p>\n                        <p><strong>Debug:</strong> QRCode disponible: ${typeof QRCode !== 'undefined'}</p>\n                        <p><strong>Debug:</strong> Container trouv√©: ${qrContainer !== null}</p>\n                    </div>\n                `;\n            } else {\n                console.error('‚ùå Container QR non trouv√© pour fallback');\n            }\n        }\n\n        /**\n         * Afficher \"Service non disponible\"\n         */\n        displayServiceUnavailable(containerId, type) {\n            console.log(`displayServiceUnavailable appel√©e pour ${containerId}, type: ${type}`);\n            const container = document.getElementById(containerId);\n            if (!container) {\n                console.error(`Container ${containerId} non trouv√©`);\n                return;\n            }\n\n            container.innerHTML = `\n                <div class=\"sunuid-service-unavailable\" style=\"\n                    text-align: center;\n                    padding: 40px 20px;\n                    background: #f8f9fa;\n                    border: 2px dashed #dee2e6;\n                    border-radius: 10px;\n                    color: #6c757d;\n                    font-family: Arial, sans-serif;\n                \">\n                    <div style=\"font-size: 48px; margin-bottom: 20px;\">‚ö†Ô∏è</div>\n                    <h3 style=\"margin: 0 0 10px 0; color: #495057;\">Service Non Disponible</h3>\n                    <p style=\"margin: 0; font-size: 14px;\">\n                        Le service d'authentification est temporairement indisponible.<br>\n                        Veuillez r√©essayer plus tard.\n                    </p>\n                    <div style=\"margin-top: 20px; font-size: 12px; color: #adb5bd;\">\n                        Type: ${String(type).toUpperCase()}\n                    </div>\n                </div>\n            `;\n        }\n\n        /**\n         * Rafra√Æchir un QR code\n         */\n        async refreshQR(containerId, options = {}) {\n            try {\n                const result = await this.generateQR(containerId, options);\n                return result;\n            } catch (error) {\n                console.error('Erreur lors du rafra√Æchissement:', error.message);\n                this.displayServiceUnavailable(containerId, this.config.type);\n                throw error;\n            }\n        }\n\n        /**\n         * D√©marrer le rafra√Æchissement automatique\n         */\n        startAutoRefresh(containerId, type, options) {\n            if (!this.config.autoRefresh) return;\n\n            this.refreshTimer = setInterval(async () => {\n                try {\n                    await this.refreshQR(containerId, type, options);\n                } catch (error) {\n                    console.warn('Erreur lors du rafra√Æchissement automatique:', error);\n                }\n            }, this.config.refreshInterval);\n        }\n\n        /**\n         * D√©marrer le timer de compte √† rebours\n         */\n\n\n        /**\n         * Effectuer une requ√™te API s√©curis√©e\n         */\n        async makeRequest(endpoint, data) {\n            // Validation de s√©curit√©\n            if (!this.isInitialized) {\n                this.logSecurityEvent('REQUEST_BEFORE_INIT', { endpoint });\n                throw new Error('SDK non initialis√©');\n            }\n\n            // V√©rifier les limites de requ√™tes pour l'initialisation s√©curis√©e\n            if (this.config.secureInit) {\n                this.config.requestCount++;\n                if (this.config.requestCount > this.config.maxRequests) {\n                    this.logSecurityEvent('API_REQUEST_LIMIT_EXCEEDED', { \n                        requestCount: this.config.requestCount,\n                        maxRequests: this.config.maxRequests \n                    });\n                    throw new Error('Limite de requ√™tes d√©pass√©e');\n                }\n            }\n\n            // Sanitisation des donn√©es\n            const sanitizedData = this.sanitizeRequestData(data);\n            \n            // Debug: Afficher les donn√©es envoy√©es\n            console.log('üîç Debug makeRequest - endpoint:', endpoint);\n            console.log('üîç Debug makeRequest - apiUrl:', this.config.apiUrl);\n            console.log('üîç Debug makeRequest - url:', `${this.config.apiUrl}${endpoint}`);\n            console.log('üîç Debug makeRequest - data:', JSON.stringify(sanitizedData, null, 2));\n            console.log('üîç Debug makeRequest - secureInit:', this.config.secureInit);\n            console.log('üîç Debug makeRequest - isInitialized:', this.isInitialized);\n            \n            // Utiliser l'endpoint depuis la configuration si disponible\n            const endpointPath = window.SunuIDConfig?.endpoints?.[endpoint.replace('/', '')] || endpoint;\n            const url = `${this.config.apiUrl}${endpointPath}`;\n            \n            // Debug: Afficher l'URL finale\n            console.log('üîç URL finale construite:', url);\n            console.log('üîç EndpointPath:', endpointPath);\n            console.log('üîç SunuIDConfig endpoints:', JSON.stringify(window.SunuIDConfig?.endpoints));\n            \n            // Log de s√©curit√© pour la requ√™te\n            this.logSecurityEvent('API_REQUEST_START', {\n                endpoint: endpointPath,\n                url: url,\n                dataKeys: Object.keys(sanitizedData),\n                secureInit: this.config.secureInit\n            });\n            \n            let retryCount = 0;\n            const maxRetries = this.config.maxRetries;\n            \n            while (retryCount <= maxRetries) {\n                try {\n                    const controller = new AbortController();\n                    const timeoutId = setTimeout(() => controller.abort(), this.config.requestTimeout);\n                    \n                    // Headers minimaux (API SunuID n'accepte que les headers essentiels)\n                    const headers = {\n                        'Content-Type': 'application/json'\n                    };\n\n                    // Note: En mode s√©curis√©, les credentials sont dans le body\n                    // Pas besoin d'ajouter de header sp√©cial pour √©viter les probl√®mes CORS\n                    // if (this.config.secureInit && this.config.token) {\n                    //     headers['X-Secure-Token'] = this.config.token;\n                    // }\n                    \n                    const response = await fetch(url, {\n                        method: 'POST',\n                        headers: headers,\n                        body: JSON.stringify(sanitizedData),\n                        signal: controller.signal\n                    });\n\n                    clearTimeout(timeoutId);\n\n                    if (!response.ok) {\n                        const errorText = await response.text();\n                        let errorData;\n                        try {\n                            errorData = JSON.parse(errorText);\n                        } catch (e) {\n                            errorData = { message: errorText };\n                        }\n                        \n                        this.logSecurityEvent('API_REQUEST_ERROR', {\n                            status: response.status,\n                            statusText: response.statusText,\n                            error: errorData.message\n                        });\n                        \n                        throw new Error(errorData.message || `Erreur HTTP: ${response.status}`);\n                    }\n\n                    const result = await response.json();\n                    \n                    this.logSecurityEvent('API_REQUEST_SUCCESS', {\n                        endpoint: endpointPath,\n                        responseKeys: Object.keys(result)\n                    });\n                    \n                    return result;\n                    \n                } catch (error) {\n                    retryCount++;\n                    \n                    if (error.name === 'AbortError') {\n                        this.logSecurityEvent('API_REQUEST_TIMEOUT', { retryCount });\n                        if (retryCount > maxRetries) {\n                            throw new Error('Timeout de la requ√™te API');\n                        }\n                        continue;\n                    }\n                    \n                    if (retryCount > maxRetries) {\n                        this.logSecurityEvent('API_REQUEST_MAX_RETRIES', { \n                            retryCount, \n                            error: error.message \n                        });\n                        throw error;\n                    }\n                    \n                    // Attendre avant de r√©essayer\n                    await new Promise(resolve => setTimeout(resolve, 1000 * retryCount));\n                }\n            }\n        }\n\n        /**\n         * Sanitisation des donn√©es de requ√™te\n         */\n        sanitizeRequestData(data) {\n            const sanitized = {};\n            \n            for (const [key, value] of Object.entries(data)) {\n                if (typeof value === 'string') {\n                    sanitized[key] = this.sanitizeInput(value);\n                } else if (typeof value === 'object' && value !== null) {\n                    sanitized[key] = this.sanitizeRequestData(value);\n                } else {\n                    sanitized[key] = value;\n                }\n            }\n            \n            // Ajouter les credentials dans le body (API SunuID les attend ici)\n            // Utiliser les vraies valeurs (originales) si disponibles, sinon les valeurs directes\n            sanitized.client_id = this.config.originalClientId || this.config.clientId;\n            sanitized.secret_id = this.config.originalSecretId || this.config.secretId;\n            \n            // Debug: V√©rifier les credentials\n            console.log('üîç Credentials dans sanitizeRequestData - clientId:', this.config.clientId);\n            console.log('üîç Credentials dans sanitizeRequestData - secretId:', this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null');\n            console.log('üîç Credentials dans sanitizeRequestData - sanitizedClientId:', sanitized.client_id);\n            console.log('üîç Credentials dans sanitizeRequestData - sanitizedSecretId:', sanitized.secret_id ? '***' + sanitized.secret_id.slice(-4) : 'null');\n            console.log('üîç Credentials dans sanitizeRequestData - data complet:', JSON.stringify(sanitized, null, 2));\n            \n            // Debug: V√©rifier les credentials\n            console.log('üîç Credentials dans sanitizeRequestData - clientId:', this.config.clientId);\n            console.log('üîç Credentials dans sanitizeRequestData - secretId:', this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null');\n            console.log('üîç Credentials dans sanitizeRequestData - sanitizedClientId:', sanitized.client_id);\n            console.log('üîç Credentials dans sanitizeRequestData - sanitizedSecretId:', sanitized.secret_id ? '***' + sanitized.secret_id.slice(-4) : 'null');\n            console.log('üîç Credentials dans sanitizeRequestData - data complet:', JSON.stringify(sanitized, null, 2));\n            \n            return sanitized;\n        }\n\n        /**\n         * G√©n√©rer un ID de requ√™te unique\n         */\n        generateRequestId() {\n            return 'req_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n        }\n\n        /**\n         * Appliquer le th√®me\n         */\n        applyTheme(theme) {\n            const container = document.querySelector('.sunuid-qr-code');\n            if (container) {\n                container.className = `sunuid-qr-code sunuid-theme-${theme}`;\n            }\n        }\n\n        /**\n         * G√©rer les erreurs\n         */\n        handleError(error) {\n            console.error('SunuID SDK Error:', error);\n            \n            if (this.config.onError) {\n                this.config.onError(error);\n            }\n        }\n\n        /**\n         * Nettoyer les ressources\n         */\n        destroy() {\n            if (this.refreshTimer) {\n                clearInterval(this.refreshTimer);\n            }\n            \n            // Fermer la connexion WebSocket\n            if (this.socket) {\n                this.socket.disconnect();\n                this.socket = null;\n                console.log('üåê WebSocket d√©connect√©');\n            }\n            \n            this.isInitialized = false;\n            this.logSecurityEvent('SDK_DESTROY');\n            console.log('SunuID SDK d√©truit');\n        }\n\n        /**\n         * Obtenir les logs de s√©curit√©\n         */\n        getSecurityLogs() {\n            return window.SunuIDSecurityLogs || [];\n        }\n\n        /**\n         * Nettoyer les logs de s√©curit√©\n         */\n        clearSecurityLogs() {\n            window.SunuIDSecurityLogs = [];\n            this.logSecurityEvent('SECURITY_LOGS_CLEARED');\n        }\n    }\n\n    // Exposer la classe globalement\n    window.SunuID = SunuID;\n    window.sunuidInstance = null;\n\n    // Fonction d'initialisation globale\n    window.initSunuID = function(config) {\n        try {\n            window.sunuidInstance = new SunuID(config);\n            return window.sunuidInstance;\n        } catch (error) {\n            console.error('Erreur lors de l\\'initialisation de SunuID:', error);\n            throw error;\n        }\n    };\n\n})(window); "],"names":["window","_window$SunuIDConfig","DEFAULT_CONFIG","apiUrl","SunuIDConfig","clientId","secretId","type","partnerName","theme","language","autoRefresh","refreshInterval","onSuccess","onError","onStatusUpdate","onExpired","enableSecurityLogs","validateInputs","maxRetries","requestTimeout","secureInit","secureInitUrl","token","SunuID","config","arguments","length","undefined","_classCallCheck","_objectSpread","qrCode","refreshTimer","isInitialized","socket","initPromise","init","_createClass","key","value","_init","_asyncToGenerator","_regenerator","m","_callee","_t","w","_context","p","n","validateSecurityParams","logSecurityEvent","obfuscateCredentials","console","log","initWebSocket","v","error","message","a","apply","_secureInit","_callee2","initData","response","result","decodedToken","_t2","_context2","fetch","method","headers","body","JSON","stringify","ok","Error","concat","status","json","success","data","api_url","decodeSecureToken","client_id","secret_id","expiresIn","expires_in","maxRequests","max_requests","requestCount","parts","split","_parts","_slicedToArray","payload","signature","decodedPayload","atob","tokenData","parse","exp","Date","now","_this","io","warn","setTimeout","ip","getClientIP","query","userId","username","on","id","reason","handleQRStatusUpdate","handleQRScanSuccess","handleQRExpired","getTypeName","errors","push","isValidUrl","includes","join","string","url","URL","protocol","_","event","securityLog","timestamp","toISOString","userAgent","navigator","location","href","SunuIDSecurityLogs","originalClientId","originalSecretId","clientIdDisplay","replace","secretIdDisplay","sanitizeInput","input","trim","emitWebSocketEvent","connected","emit","getWebSocketStatus","forceWebSocketInit","_generateQR","_callee3","containerId","_this2","options","imageBaseUrl","qrImageUrl","_waitForSocketId","_args3","_t3","_context3","makeRequest","qrcode","displayQRCode","pendingQRInfo","code","waitForSocketId","socketId","qrContent","typeName","qrLabel","generateCustomQRCode","startAutoRefresh","serviceId","service_id","qrCodeUrl","sessionId","stack","slice","displayServiceUnavailable","generateQR","_x","_generateCustomQR","_callee4","_this3","_response","_waitForSocketId2","_args4","_t4","_context4","generateCustomQR","_x2","_x3","_generateAuthQR","_callee5","_args5","_context5","generateAuthQR","_x4","_generateKYCQR","_callee6","originalType","_args6","_context6","f","generateKYCQR","_x5","_generateSignatureQR","_callee7","_args7","_context7","generateSignatureQR","_x6","_checkQRStatus","_callee8","_response2","_t5","_context8","handleError","checkQRStatus","_x7","qrUrl","container","document","getElementById","innerHTML","qrElement","createElement","className","appendChild","applyTheme","_generateCustomQRCode","_callee9","content","label","qrContainer","_response3","responseData","instructionsElement","statusElement","_args9","_t6","_context9","displayFallbackImage","size","margin","dataUrl","parentElement","querySelector","style","display","classList","add","_x8","_x9","addLogoToCenter","ctx","x","y","width","height","logo","Image","onload","logoSize","logoX","logoY","fillStyle","fillRect","drawImage","src","QRCode","String","toUpperCase","_refreshQR","_callee0","_args0","_t7","_context0","refreshQR","_x0","_this4","setInterval","_callee1","_t8","_context1","_makeRequest","_callee10","endpoint","_window$SunuIDConfig2","_window$SunuIDConfig3","_this5","sanitizedData","endpointPath","retryCount","_loop","_ret","_context11","sanitizeRequestData","endpoints","dataKeys","Object","keys","controller","timeoutId","_response4","errorText","errorData","_t9","_context10","AbortController","abort","signal","clearTimeout","text","e","statusText","responseKeys","name","Promise","resolve","d","_regeneratorValues","_x1","_x10","sanitized","_i","_Object$entries","entries","_Object$entries$_i","_typeof","generateRequestId","Math","random","toString","substr","destroy","clearInterval","disconnect","getSecurityLogs","clearSecurityLogs","sunuidInstance","initSunuID"],"mappings":"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"}