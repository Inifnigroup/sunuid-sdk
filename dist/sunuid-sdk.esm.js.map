{"version":3,"file":"sunuid-sdk.esm.js","sources":["../src/sunuid-sdk.js"],"sourcesContent":["/**\n * SunuID SDK - Package d'int√©gration pour partenaires\n * \n * @version 1.0.0\n * @author SunuID Team\n * @license MIT\n */\n\n(function(window) {\n    'use strict';\n\n    // Configuration par d√©faut\n    const DEFAULT_CONFIG = {\n        apiUrl: window.SunuIDConfig?.apiUrl || 'https://api.sunuid.fayma.sn',\n        clientId: null,\n        secretId: null,\n        type: 2, // Type par d√©faut (2 = authentification)\n        partnerName: null, // Nom du partenaire r√©cup√©r√© depuis l'API\n        theme: 'light',\n        language: 'fr',\n        autoRefresh: false, // D√©sactiv√© par d√©faut pour √©viter les appels r√©p√©titifs\n        refreshInterval: 30000, // 30 secondes\n        autoInit: true, // Initialisation automatique par d√©faut\n        onSuccess: null,\n        onError: null,\n        onStatusUpdate: null,\n        onExpired: null,\n        // Nouvelles options de s√©curit√©\n        enableSecurityLogs: true,\n        validateInputs: true,\n        maxRetries: 3,\n        requestTimeout: 10000, // 10 secondes\n        // Options d'initialisation s√©curis√©e\n        secureInit: false,\n        secureInitUrl: (() => {\n            if (window.SunuIDConfig?.apiUrl?.includes('api.sunuid.fayma.sn')) {\n                return 'https://api.sunuid.fayma.sn/secure-init.php';\n            }\n            return window.SunuIDConfig?.apiUrl?.replace('/api', '') + '/secure-init.php' || 'https://api.sunuid.fayma.sn/secure-init.php';\n        })(),\n        token: null,\n        // Configuration pour forcer l'utilisation du serveur distant\n        forceRemoteServer: true,\n        useLocalFallback: false,\n        // Nouvelles options pour les callbacks\n        redirectAfterSuccess: null,\n        verifySignature: false,\n        tokenMaxAge: 300, // 5 minutes par d√©faut\n        onAuthenticationSuccess: null,\n        onAuthenticationError: null,\n        state: null\n    };\n\n    /**\n     * Classe principale SunuID\n     */\n    class SunuID {\n        constructor(config = {}) {\n            this.config = { ...DEFAULT_CONFIG, ...config };\n            this.qrCode = null;\n            this.refreshTimer = null;\n            this.isInitialized = false;\n            this.socket = null;\n            \n            // Initialisation asynchrone seulement si autoInit est activ√©\n            if (this.config.autoInit !== false) {\n                this.initPromise = this.init();\n            }\n        }\n\n        /**\n         * Initialisation du SDK\n         */\n        async init() {\n            try {\n                // V√©rifier s'il y a un callback √† traiter en premier\n                if (this.handleCallback()) {\n                    console.log('‚úÖ Callback trait√©, initialisation termin√©e');\n                    return;\n                }\n\n                // Initialisation s√©curis√©e si activ√©e\n                if (this.config.secureInit) {\n                    await this.secureInit();\n                } else {\n                    // Validation s√©curis√©e des param√®tres\n                    if (this.config.validateInputs) {\n                        this.validateSecurityParams();\n                    }\n                }\n\n                // Log de s√©curit√© pour l'initialisation\n                this.logSecurityEvent('SDK_INIT_START', {\n                    apiUrl: this.config.apiUrl,\n                    type: this.config.type,\n                    secureInit: this.config.secureInit\n                });\n\n                // R√©cup√©rer les informations du partenaire depuis l'API\n                await this.fetchPartnerInfo();\n\n                // Obscurcir les credentials dans les logs\n                this.obfuscateCredentials();\n\n                this.isInitialized = true;\n                console.log('SunuID SDK initialis√© avec succ√®s');\n                console.log('üìã Configuration SDK:', {\n                    apiUrl: this.config.apiUrl,\n                    type: this.config.type,\n                    partnerName: this.config.partnerName,\n                    clientId: this.config.clientId ? '***' + this.config.clientId.slice(-4) : 'null',\n                    secretId: this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null',\n                    secureInit: this.config.secureInit,\n                    theme: this.config.theme\n                });\n                \n                this.logSecurityEvent('SDK_INIT_SUCCESS');\n                \n                // Initialiser la connexion WebSocket\n                this.initWebSocket();\n                \n            } catch (error) {\n                this.logSecurityEvent('SDK_INIT_ERROR', { error: error.message });\n                throw error;\n            }\n        }\n\n        /**\n         * Initialisation s√©curis√©e via PHP\n         */\n        async secureInit() {\n            try {\n                this.logSecurityEvent('SECURE_INIT_START');\n                \n                const initData = {\n                    type: this.config.type,\n                    partnerName: this.config.partnerName,\n                    theme: this.config.theme\n                };\n\n                const response = await fetch(this.config.secureInitUrl, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json'\n                    },\n                    body: JSON.stringify(initData)\n                });\n\n                if (!response.ok) {\n                    throw new Error(`Erreur HTTP: ${response.status}`);\n                }\n\n                const result = await response.json();\n                \n                console.log('üìã R√©ponse initialisation s√©curis√©e:', result);\n                \n                if (!result.success) {\n                    throw new Error(result.error || 'Erreur lors de l\\'initialisation s√©curis√©e');\n                }\n\n                // Stocker le token et les donn√©es s√©curis√©es\n                this.config.token = result.data.token;\n                this.config.apiUrl = result.data.api_url;\n                \n                // D√©coder le token pour r√©cup√©rer les credentials\n                const decodedToken = this.decodeSecureToken(result.data.token);\n                if (decodedToken) {\n                    this.config.clientId = decodedToken.client_id;\n                    this.config.secretId = decodedToken.secret_id;\n                } else {\n                    throw new Error('Impossible de d√©coder le token s√©curis√©');\n                }\n                \n                this.config.expiresIn = result.data.expires_in;\n                this.config.maxRequests = result.data.max_requests;\n                this.config.requestCount = 0;\n\n                this.logSecurityEvent('SECURE_INIT_SUCCESS', {\n                    expiresIn: result.data.expires_in,\n                    maxRequests: result.data.max_requests\n                });\n\n                console.log('‚úÖ Initialisation s√©curis√©e r√©ussie');\n                \n            } catch (error) {\n                this.logSecurityEvent('SECURE_INIT_ERROR', { error: error.message });\n                throw new Error(`√âchec de l'initialisation s√©curis√©e: ${error.message}`);\n            }\n        }\n\n        /**\n         * D√©coder le token s√©curis√©\n         */\n        decodeSecureToken(token) {\n            try {\n                const parts = token.split('.');\n                if (parts.length !== 2) {\n                    console.error('‚ùå Format de token invalide');\n                    return null;\n                }\n                \n                const [payload, signature] = parts;\n                \n                // D√©coder le payload (base64)\n                const decodedPayload = atob(payload);\n                const tokenData = JSON.parse(decodedPayload);\n                \n                // V√©rifier l'expiration\n                if (tokenData.exp && tokenData.exp < Date.now() / 1000) {\n                    console.error('‚ùå Token expir√©');\n                    return null;\n                }\n                \n                console.log('‚úÖ Token d√©cod√© avec succ√®s');\n                return tokenData;\n                \n            } catch (error) {\n                console.error('‚ùå Erreur d√©codage token:', error);\n                return null;\n            }\n        }\n\n        /**\n         * Initialiser la connexion WebSocket\n         */\n        initWebSocket() {\n            try {\n                // V√©rifier si Socket.IO est disponible\n                if (typeof io === 'undefined') {\n                    console.warn('‚ö†Ô∏è Socket.IO non disponible, WebSocket sera initialis√© plus tard');\n                    // R√©essayer apr√®s un d√©lai\n                    setTimeout(() => this.initWebSocket(), 1000);\n                    return;\n                }\n                \n                // Obtenir l'IP du client (simulation)\n                const ip = this.getClientIP();\n                \n                // Initialiser la connexion WebSocket si elle n'existe pas\n                if (!this.socket) {\n                    console.log('üåê Initialisation Socket.IO...');\n                    \n                    this.socket = io('wss://samasocket.fayma.sn:9443', {\n                        query: {\n                            token: this.config.clientId,\n                            type: 'web',\n                            userId: this.config.clientId,\n                            username: ip\n                        },\n                        transports: ['websocket', 'polling']\n                    });\n\n                    // Gestion des √©v√©nements WebSocket\n                    this.socket.on('connect', () => {\n                        console.log('üåê WebSocket connect√© avec succ√®s');\n                        console.log('üìä Socket ID:', this.socket.id);\n                        this.socket.connected = true;\n                    });\n\n                    this.socket.on('disconnect', (reason) => {\n                        console.log('‚ùå WebSocket d√©connect√©:', reason);\n                        this.socket.connected = false;\n                    });\n\n                    this.socket.on('connect_error', (error) => {\n                        console.error('‚ùå Erreur connexion WebSocket:', error);\n                        this.socket.connected = false;\n                    });\n\n                    // √âcouter les √©v√©nements sp√©cifiques\n                    this.socket.on('qr_status_update', (data) => {\n                        console.log('üì± Mise √† jour statut QR re√ßue:', data);\n                        this.handleQRStatusUpdate(data);\n                    });\n\n                    this.socket.on('qr_scan_success', (data) => {\n                        console.log('‚úÖ Scan QR r√©ussi re√ßu:', data);\n                        this.handleQRScanSuccess(data);\n                    });\n\n                    this.socket.on('qr_expired', (data) => {\n                        console.log('‚è∞ QR expir√© re√ßu:', data);\n                        this.handleQRExpired(data);\n                    });\n\n                    // √âcouter l'√©v√©nement qr_scan_initiated sp√©cifiquement\n                    this.socket.on('qr_scan_initiated', (data) => {\n                        console.log('üîç QR Scan Initiated re√ßu:', data);\n                        this.showQRLoader();\n                    });\n\n                    // √âcouter l'√©v√©nement message g√©n√©rique (fallback)\n                    this.socket.on('message', (data) => {\n                        console.log('üì® Message socket re√ßu:', data);\n                        if (data && data.type === 'qr_scan_initiated') {\n                            console.log('üîç QR Scan Initiated d√©tect√© dans message:', data);\n                            this.showQRLoader();\n                        }\n                    });\n\n                    // √âcouter tous les √©v√©nements socket pour le debugging\n                    this.socket.onAny = this.socket.onAny || function(eventName, callback) {\n                        // Fallback pour les versions de Socket.IO qui n'ont pas onAny\n                        console.log(`üåê Socket Event [${eventName}]:`, callback);\n                    };\n                    \n                    // Logger tous les √©v√©nements re√ßus\n                    this.socket.onAny((eventName, ...args) => {\n                        console.log(`üåê Socket Event [${eventName}]:`, args);\n                    });\n                } else {\n                    console.log('üåê WebSocket d√©j√† connect√©');\n                }\n            } catch (error) {\n                console.error('‚ùå Erreur initialisation WebSocket:', error);\n            }\n        }\n\n        /**\n         * Obtenir l'IP du client (simulation)\n         */\n        getClientIP() {\n            // Simulation - en production, vous pourriez utiliser un service d'IP\n            return '127.0.0.1';\n        }\n\n        /**\n         * Obtenir le nom du type √† partir du num√©ro\n         */\n        getTypeName(type) {\n            switch(type) {\n                case 1: return 'KYC';\n                case 2: return 'AUTH';\n                case 3: return 'SIGNATURE';\n                default: return `TYPE-${type}`;\n            }\n        }\n\n        /**\n         * Validation s√©curis√©e des param√®tres\n         */\n        validateSecurityParams() {\n            const errors = [];\n            \n            // Validation du clientId\n            if (!this.config.clientId || typeof this.config.clientId !== 'string') {\n                errors.push('clientId invalide ou manquant');\n            } else if (this.config.clientId.length < 10) {\n                errors.push('clientId trop court');\n            }\n            \n            // Validation du secretId\n            if (!this.config.secretId || typeof this.config.secretId !== 'string') {\n                errors.push('secretId invalide ou manquant');\n            } else if (this.config.secretId.length < 32) {\n                errors.push('secretId trop court (minimum 32 caract√®res)');\n            }\n            \n            // Validation de l'URL API\n            if (!this.config.apiUrl || !this.isValidUrl(this.config.apiUrl)) {\n                errors.push('apiUrl invalide');\n            }\n            \n            // Validation du type\n            if (![1, 2, 3].includes(this.config.type)) {\n                errors.push('type invalide (doit √™tre 1, 2 ou 3)');\n            }\n            \n            if (errors.length > 0) {\n                this.logSecurityEvent('VALIDATION_ERROR', { errors });\n                throw new Error(`Param√®tres de s√©curit√© invalides: ${errors.join(', ')}`);\n            }\n            \n            this.logSecurityEvent('VALIDATION_SUCCESS');\n        }\n\n        /**\n         * Validation d'URL s√©curis√©e\n         */\n        isValidUrl(string) {\n            try {\n                const url = new URL(string);\n                return url.protocol === 'https:' || url.protocol === 'http:';\n            } catch (_) {\n                return false;\n            }\n        }\n\n        /**\n         * Logs de s√©curit√©\n         */\n        logSecurityEvent(event, data = {}) {\n            if (!this.config.enableSecurityLogs) return;\n            \n            const securityLog = {\n                timestamp: new Date().toISOString(),\n                event: event,\n                data: data,\n                userAgent: navigator.userAgent,\n                url: window.location.href\n            };\n            \n            console.warn('üîí [SECURITY]', securityLog);\n            \n            // Stocker les logs de s√©curit√© (optionnel)\n            if (!window.SunuIDSecurityLogs) {\n                window.SunuIDSecurityLogs = [];\n            }\n            window.SunuIDSecurityLogs.push(securityLog);\n        }\n\n        /**\n         * Chiffrement simple des credentials (pour √©viter l'exposition en clair)\n         */\n        obfuscateCredentials() {\n            // Stocker les vraies valeurs pour les logs de s√©curit√©\n            this.config.originalClientId = this.config.clientId;\n            this.config.originalSecretId = this.config.secretId;\n            \n            // Cr√©er des versions obfusqu√©es pour l'affichage uniquement\n            if (this.config.clientId) {\n                this.config.clientIdDisplay = this.config.clientId.replace(/(.{3}).*(.{3})/, '$1***$2');\n            }\n            if (this.config.secretId) {\n                this.config.secretIdDisplay = this.config.secretId.replace(/(.{4}).*(.{4})/, '$1***$2');\n            }\n        }\n\n        /**\n         * Validation des entr√©es utilisateur\n         */\n        sanitizeInput(input) {\n            if (typeof input !== 'string') return input;\n            \n            // Protection contre les injections XSS basiques\n            return input\n                .replace(/[<>]/g, '') // Supprimer les balises HTML\n                .replace(/javascript:/gi, '') // Supprimer les protocoles dangereux\n                .trim();\n        }\n\n        /**\n         * G√©rer la mise √† jour du statut QR\n         */\n        handleQRStatusUpdate(data) {\n            console.log('üì± QR Status Update:', data);\n            if (this.config.onStatusUpdate) {\n                this.config.onStatusUpdate(data);\n            }\n        }\n\n        /**\n         * G√©rer le succ√®s du scan QR\n         */\n        handleQRScanSuccess(data) {\n            console.log('‚úÖ QR Scan Success:', data);\n            if (this.config.onSuccess) {\n                this.config.onSuccess(data);\n            }\n        }\n\n        /**\n         * G√©rer l'expiration du QR\n         */\n        handleQRExpired(data) {\n            console.log('‚è∞ QR Expired:', data);\n            if (this.config.onExpired) {\n                this.config.onExpired(data);\n            }\n        }\n\n        /**\n         * √âmettre un √©v√©nement WebSocket\n         */\n        emitWebSocketEvent(event, data) {\n            if (this.socket && this.socket.connected) {\n                this.socket.emit(event, data);\n                console.log(`üì§ √âv√©nement WebSocket √©mis: ${event}`, data);\n            } else {\n                console.warn('‚ö†Ô∏è WebSocket non connect√©, impossible d\\'√©mettre l\\'√©v√©nement:', event);\n            }\n        }\n\n        /**\n         * Obtenir le statut de la connexion WebSocket\n         */\n        getWebSocketStatus() {\n            if (!this.socket) {\n                return 'not_initialized';\n            }\n            return this.socket.connected ? 'connected' : 'disconnected';\n        }\n\n        /**\n         * Forcer l'initialisation WebSocket (si Socket.IO devient disponible plus tard)\n         */\n        forceWebSocketInit() {\n            if (typeof io !== 'undefined' && !this.socket) {\n                console.log('üîÑ For√ßage de l\\'initialisation WebSocket...');\n                this.initWebSocket();\n            }\n        }\n\n        /**\n         * G√©n√©rer un QR code avec le type configur√©\n         */\n        async generateQR(containerId = 'sunuid-qr-container', options = {}) {\n            // Attendre l'initialisation si n√©cessaire\n            if (this.initPromise) {\n                await this.initPromise;\n                this.initPromise = null;\n            }\n            \n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n            \n            console.log('üéØ generateQR appel√© avec containerId:', containerId);\n            \n            // Attendre que les connexions soient pr√™tes\n            console.log('üîç Attente connexions API et WebSocket...');\n            try {\n                const connectionStatus = await this.waitForConnections(5000); // 5 secondes max\n                console.log('‚úÖ Connexions pr√™tes:', connectionStatus);\n            } catch (connectionError) {\n                console.error('‚ùå Erreur connexions:', connectionError.message);\n                throw new Error('Connexions non disponibles - Impossible de g√©n√©rer le QR code');\n            }\n\n            try {\n                // Utiliser uniquement le socketID comme contenu du QR\n                const socketId = this.socket ? this.socket.id : 'timeout-socket-id';\n                const qrContent = socketId;\n                \n                console.log('üìÑ Contenu QR pr√©par√©:', qrContent);\n                console.log('üîå Socket ID:', socketId);\n                \n                                    // G√©n√©rer le QR avec le contenu complet\n                    const partnerName = this.config.partnerName || 'Partner_unknown';\n                    const response = await this.makeRequest('/qr-generate', {\n                        type: this.config.type,\n                        data: qrContent, // Essayer data au lieu de content\n                        label: `${this.getTypeName(this.config.type)} ${partnerName}`, // Label du QR avec nom du partenaire\n                        ...options\n                    });\n\n                if (response.success) {\n                    // Debug: Afficher la structure compl√®te de la r√©ponse\n                    console.log('üìã R√©ponse QR API compl√®te:', response);\n                    console.log('üìã Structure response.data:', response.data);\n                    \n                    // Construire l'URL compl√®te du QR code\n                    let qrImageUrl = response.data.qrCodeUrl;\n                    \n                    // Si l'URL est relative, la rendre absolue\n                    if (qrImageUrl && qrImageUrl.startsWith('/')) {\n                        qrImageUrl = `${this.config.apiUrl}${qrImageUrl}`;\n                    }\n                    \n                    // V√©rifier si l'URL du QR code existe\n                    if (!qrImageUrl) {\n                        console.warn('‚ö†Ô∏è qrCodeUrl non trouv√© dans la r√©ponse, recherche d\\'alternatives...');\n                        \n                        // Essayer d'autres champs possibles\n                        qrImageUrl = response.data.qr_url || \n                                    response.data.qrUrl || \n                                    response.data.url || \n                                    response.data.image_url ||\n                                    response.data.imageUrl;\n                        \n                        if (qrImageUrl) {\n                            console.log('‚úÖ URL QR trouv√©e dans un champ alternatif:', qrImageUrl);\n                        } else {\n                            console.error('‚ùå Aucune URL QR trouv√©e dans la r√©ponse');\n                            throw new Error('URL du QR code non trouv√©e dans la r√©ponse API');\n                        }\n                    }\n                    \n                    this.currentQRUrl = qrImageUrl;\n                    \n                    console.log('‚úÖ QR code g√©n√©r√© par API principale:', qrImageUrl);\n                    console.log('üìÑ Contenu QR final:', qrContent);\n                    console.log('üè∑Ô∏è Label QR:', response.data.label || 'N/A');\n                    console.log('üÜî Session ID:', response.data.sessionId || 'N/A');\n                    \n                    // Afficher le QR code\n                    this.displayQRCode(containerId, qrImageUrl, this.config.type, options);\n                    \n                    this.startAutoRefresh(containerId, this.config.type, options);\n                    \n                    // √âmettre un √©v√©nement WebSocket pour la g√©n√©ration du QR\n                    this.emitWebSocketEvent('qr_generated', {\n                        type: this.config.type,\n                        qrCodeUrl: qrImageUrl,\n                        socketId: socketId,\n                        qrContent: qrContent,\n                        label: response.data.label,\n                        sessionId: response.data.sessionId,\n                        timestamp: Date.now()\n                    });\n                    \n                    return {\n                        ...response.data,\n                        qrCodeUrl: qrImageUrl,\n                        qrContent: qrContent,\n                        label: response.data.label,\n                        sessionId: response.data.sessionId\n                    };\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la g√©n√©ration du QR code');\n                }\n            } catch (error) {\n                console.error('Erreur API d√©tect√©e:', error.message);\n                console.error('Stack trace complet:', error.stack);\n                console.error('Configuration SDK:', {\n                    apiUrl: this.config.apiUrl,\n                    type: this.config.type,\n                    secureInit: this.config.secureInit,\n                    clientId: this.config.clientId ? '***' + this.config.clientId.slice(-4) : 'null',\n                    secretId: this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null'\n                });\n                \n                // Fallback vers le service local seulement si activ√©\n                if (this.config.useLocalFallback) {\n                    console.log('üîç V√©rification fallback local...');\n                    console.log('üîç Hostname:', window.location.hostname);\n                    console.log('üîç Protocol:', window.location.protocol);\n                    console.log('üîç URL compl√®te:', window.location.href);\n                    \n                    const isLocal = window.location.hostname === 'localhost' || \n                                   window.location.hostname === '127.0.0.1' || \n                                   window.location.protocol === 'file:';\n                    \n                    console.log('üîç Est local:', isLocal);\n                    \n                    if (isLocal) {\n                        console.log('üîÑ Tentative fallback vers service QR local...');\n                        console.log('‚ùå Fallback local non impl√©ment√© - utilisation serveur distant uniquement');\n                    } else {\n                        console.log('‚ùå Pas en local, pas de fallback');\n                    }\n                } else {\n                    console.log('üîí Fallback local d√©sactiv√©, utilisation serveur distant uniquement');\n                }\n                \n                console.log('Affichage du message \"Service non disponible\" pour type ' + this.config.type);\n                this.displayServiceUnavailable(containerId, this.config.type);\n                throw new Error('Service non disponible');\n            }\n        }\n\n\n\n        /**\n         * G√©n√©rer un QR code avec un type personnalis√©\n         */\n        async generateCustomQR(containerId, type, options = {}) {\n            // Attendre l'initialisation si n√©cessaire\n            if (this.initPromise) {\n                await this.initPromise;\n                this.initPromise = null;\n            }\n            \n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-generate', {\n                    type: type, // Type personnalis√© (1, 2, 3, etc.)\n                    ...options\n                });\n\n                if (response.success) {\n                    // Construire l'URL compl√®te de l'image QR avec la base URL pour les images\n                    const imageBaseUrl = 'https://sunuid.fayma.sn';\n                    const qrImageUrl = `${imageBaseUrl}${response.data.qrcode}`;\n                    this.displayQRCode(containerId, qrImageUrl, type, options);\n                    \n                    // Le QR code est d√©j√† g√©n√©r√© par l'API principale\n                    console.log('‚úÖ QR code personnalis√© g√©n√©r√© par API principale:', qrImageUrl);\n                    console.log('üìÑ Code de session:', response.data.code);\n                    console.log('üÜî Service ID:', response.data.service_id);\n                    \n                    this.startAutoRefresh(containerId, type, options);\n                    return {\n                        ...response.data,\n                        qrCodeUrl: qrImageUrl,\n                        sessionId: response.data.service_id\n                    };\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la g√©n√©ration du QR code');\n                }\n            } catch (error) {\n                console.error('Erreur API d√©tect√©e:', error.message);\n                console.error('Stack trace complet:', error.stack);\n                console.error('Configuration SDK (Custom):', {\n                    apiUrl: this.config.apiUrl,\n                    type: type,\n                    secureInit: this.config.secureInit,\n                    clientId: this.config.clientId ? '***' + this.config.clientId.slice(-4) : 'null',\n                    secretId: this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null'\n                });\n                console.log('Affichage du message \"Service non disponible\" pour type ' + type);\n                this.displayServiceUnavailable(containerId, type);\n                throw new Error('Service non disponible');\n            }\n        }\n\n        // Alias pour maintenir la compatibilit√©\n        async generateAuthQR(containerId, options = {}) {\n            return this.generateQR(containerId, options);\n        }\n\n        async generateKYCQR(containerId, options = {}) {\n            // Sauvegarder le type actuel\n            const originalType = this.config.type;\n            // Changer temporairement le type pour KYC\n            this.config.type = 1;\n            try {\n                return await this.generateQR(containerId, options);\n            } finally {\n                // Restaurer le type original\n                this.config.type = originalType;\n            }\n        }\n\n        async generateSignatureQR(containerId, options = {}) {\n            // Sauvegarder le type actuel\n            const originalType = this.config.type;\n            // Changer temporairement le type pour Signature\n            this.config.type = 3;\n            try {\n                return await this.generateQR(containerId, options);\n            } finally {\n                // Restaurer le type original\n                this.config.type = originalType;\n            }\n        }\n\n        /**\n         * V√©rifier le statut d'un QR code\n         */\n        async checkQRStatus(sessionId) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-status', {\n                    serviceId: sessionId\n                });\n\n                if (response.success) {\n                    return response.data;\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la v√©rification du statut');\n                }\n            } catch (error) {\n                this.handleError(error);\n                throw error;\n            }\n        }\n\n        /**\n         * G√©n√©rer un QR code avec un contenu sp√©cifique\n         */\n        async generateQRWithContent(content, containerId, type, options = {}) {\n            console.log('üé® G√©n√©ration QR avec contenu:', content);\n            \n            try {\n                // Essayer d'abord le service QR local\n                if (window.location.hostname === 'localhost' || \n                    window.location.hostname === '127.0.0.1' || \n                    window.location.protocol === 'file:') {\n                    \n                    console.log('üè† Utilisation service QR local...');\n                    const localQRUrl = await this.generateQRLocal(content, containerId, type, options);\n                    if (localQRUrl) {\n                        return localQRUrl;\n                    }\n                }\n                \n                // Fallback vers le service QR distant\n                console.log('üåê Utilisation service QR distant...');\n                return await this.generateQRRemote(content, containerId, type, options);\n                \n            } catch (error) {\n                console.error('‚ùå Erreur g√©n√©ration QR:', error);\n                // Fallback vers affichage simple du contenu\n                this.displayQRContent(containerId, content, type, options);\n                return null;\n            }\n        }\n        \n        /**\n         * G√©n√©rer QR code avec service local\n         */\n        async generateQRLocal(content, containerId, type, options = {}) {\n            try {\n                const response = await fetch('http://localhost:8000/api/generate/text', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/x-www-form-urlencoded'\n                    },\n                    body: `text=${encodeURIComponent(content)}&size=300`\n                });\n                \n                if (response.ok) {\n                    const data = await response.json();\n                    const qrUrl = `data:image/png;base64,${data.qrcode}`;\n                    this.displayQRCode(containerId, qrUrl, type, options);\n                    return qrUrl;\n                }\n            } catch (error) {\n                console.log('‚ùå Service QR local non disponible:', error.message);\n            }\n            return null;\n        }\n        \n        /**\n         * G√©n√©rer QR code avec service distant\n         */\n        async generateQRRemote(content, containerId, type, options = {}) {\n            try {\n                const response = await fetch('https://api.sunuid.fayma.sn/qr-generate', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        text: content,\n                        size: 300,\n                        type: type\n                    })\n                });\n                \n                if (response.ok) {\n                    const data = await response.json();\n                    const qrUrl = `data:image/png;base64,${data.qrcode}`;\n                    this.displayQRCode(containerId, qrUrl, type, options);\n                    return qrUrl;\n                }\n            } catch (error) {\n                console.error('‚ùå Erreur service QR distant:', error);\n            }\n            \n            // Fallback vers affichage du contenu\n            this.displayQRContent(containerId, content, type, options);\n            return null;\n        }\n        \n        /**\n         * Afficher le contenu QR en texte (fallback)\n         */\n        displayQRContent(containerId, content, type, options = {}) {\n            const container = document.getElementById(containerId);\n            if (!container) {\n                throw new Error(`Conteneur avec l'ID \"${containerId}\" non trouv√©`);\n            }\n\n            const typeName = this.getTypeName(type);\n            container.innerHTML = `\n                <div class=\"sunuid-qr-code\">\n                    <div class=\"sunuid-qr-header\">\n                        <h3>${typeName}</h3>\n                    </div>\n                    <div class=\"sunuid-qr-content\" style=\"text-align: center; padding: 20px; background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 5px; margin: 10px 0;\">\n                        <p><strong>Contenu QR Code:</strong></p>\n                        <p style=\"font-family: monospace; font-size: 14px; word-break: break-all;\">${content}</p>\n                    </div>\n                    <div class=\"sunuid-qr-instructions\">\n                        <p>Contenu QR g√©n√©r√© avec le format: {type}-{code}-{socketid}</p>\n                    </div>\n                </div>\n            `;\n            \n            console.log('‚úÖ Contenu QR affich√©:', content);\n        }\n        \n        /**\n         * Afficher un QR code dans un conteneur\n         */\n        displayQRCode(containerId, qrUrl, type, options = {}) {\n            const container = document.getElementById(containerId);\n            if (!container) {\n                throw new Error(`Conteneur avec l'ID \"${containerId}\" non trouv√©`);\n            }\n\n            // Nettoyer le conteneur\n            container.innerHTML = '';\n\n            // Cr√©er l'√©l√©ment QR code\n            const qrElement = document.createElement('div');\n            qrElement.className = 'sunuid-qr-code';\n            \n            // Afficher l'image QR avec les informations\n            const typeName = this.getTypeName(type);\n            qrElement.innerHTML = `\n                <div class=\"sunuid-qr-header\">\n                    <h3>${type === 1 ? 'V√©rification KYC' : type === 2 ? 'Authentification' : type === 3 ? 'Signature' : 'Service Type ' + type}</h3>\n                </div>\n                <div class=\"sunuid-qr-image\">\n                    <img src=\"${qrUrl}\" alt=\"QR Code ${typeName}\" style=\"max-width: 300px; border: 1px solid #ddd; border-radius: 5px;\" />\n                </div>\n               \n            `;\n\n            container.appendChild(qrElement);\n\n            // Appliquer le th√®me\n            this.applyTheme(options.theme || this.config.theme);\n            \n            console.log('‚úÖ QR code affich√©:', qrUrl);\n        }\n\n        /**\n         * G√©n√©rer un QR code personnalis√© avec PHP Endroid\n         */\n        async generateCustomQRCode(content, label, options = {}) {\n            console.log('üé® D√©but g√©n√©ration QR personnalis√©...');\n            console.log('üìÑ Contenu:', content);\n            console.log('üè∑Ô∏è Label:', label);\n            \n            // Chercher le conteneur QR\n            let qrContainer = document.getElementById('sunuid-qr-container');\n            if (!qrContainer) {\n                qrContainer = document.getElementById('qr-container');\n            }\n            if (!qrContainer) {\n                console.error('‚ùå QR container not found');\n                return;\n            }\n            \n            console.log('‚úÖ QR container trouv√©');\n\n            // Nettoyer le conteneur\n            qrContainer.innerHTML = '<div style=\"text-align: center; padding: 20px;\"><p>G√©n√©ration QR code...</p></div>';\n\n                         try {\n                 // Utiliser directement l'API principale (plus fiable)\n                 console.log('üé® Tentative g√©n√©ration via API principale...');\n                 await this.generateQRPHP(content, label, qrContainer);\n                 console.log('‚úÖ QR code g√©n√©r√© avec succ√®s');\n                 \n             } catch (error) {\n                 console.error('‚ùå Erreur g√©n√©ration API:', error);\n                 \n                 // Fallback final : image par d√©faut\n                 console.log('‚ö†Ô∏è Affichage image par d√©faut');\n                 this.displayDefaultQR(qrContainer, content, label);\n             }\n        }\n\n        /**\n         * G√©n√©rer un QR code c√¥t√© client (m√©thode principale)\n         */\n        async generateQRClientSide(content, label, qrContainer) {\n            // Charger QRCode si n√©cessaire\n            await this.ensureQRCodeLibrary();\n            \n            if (typeof QRCode === 'undefined') {\n                throw new Error('QRCode library non disponible');\n            }\n            \n            // Cr√©er un canvas\n            const canvas = document.createElement('canvas');\n            canvas.width = 300;\n            canvas.height = 320;\n            const ctx = canvas.getContext('2d');\n            \n            // Fond blanc\n            ctx.fillStyle = '#FFFFFF';\n            ctx.fillRect(0, 0, 300, 320);\n            \n            // G√©n√©rer le QR code\n            return new Promise((resolve, reject) => {\n                QRCode.toCanvas(canvas, content, {\n                    width: 280,\n                    margin: 10,\n                    color: {\n                        dark: '#000000',\n                        light: '#FFFFFF'\n                    }\n                }, (error) => {\n                    if (error) {\n                        reject(error);\n                        return;\n                    }\n                    \n                    // Ajouter le label\n                    ctx.fillStyle = '#333333';\n                    ctx.font = 'bold 14px Arial';\n                    ctx.textAlign = 'center';\n                    ctx.fillText(label, 150, 305);\n                    \n                    // Convertir en data URL\n                    const dataUrl = canvas.toDataURL('image/png');\n                    \n                    // Stocker l'URL\n                    this.currentQRUrl = dataUrl;\n                    \n                    // Afficher le QR code\n                    qrContainer.innerHTML = `\n                        <div style=\"text-align: center; padding: 20px;\">\n                            <img src=\"${dataUrl}\" alt=\"QR Code\" style=\"max-width: 300px; border: 2px solid #ddd; border-radius: 10px;\">\n                        </div>\n                    `;\n                    \n                    // Afficher les instructions\n                    this.showQRInstructions(qrContainer);\n                    \n                    resolve();\n                });\n            });\n        }\n\n        /**\n         * G√©n√©rer un QR code via endpoint PHP (fallback)\n         */\n        async generateQRPHP(content, label, qrContainer) {\n                         // Construire l'URL - Utiliser l'API principale qui fonctionne\n             let qrGeneratorUrl;\n             if (this.config.forceRemoteServer) {\n                 qrGeneratorUrl = 'https://api.sunuid.fayma.sn/qr-generate';\n             } else if (this.config.apiUrl.includes('api.sunuid.fayma.sn')) {\n                 qrGeneratorUrl = 'https://api.sunuid.fayma.sn/qr-generate';\n             } else if (this.config.apiUrl.includes('localhost') || this.config.apiUrl.includes('127.0.0.1')) {\n                 qrGeneratorUrl = 'http://localhost:8000/api/generate/text';\n             } else {\n                 qrGeneratorUrl = this.config.apiUrl + '/qr-generate';\n             }\n            \n            console.log('üîó URL QR Generator:', qrGeneratorUrl);\n            \n                         // Adapter le format selon l'URL\n             let requestBody;\n             let contentType;\n             \n             if (qrGeneratorUrl.includes('localhost:8000')) {\n                 // Service local - format form-data\n                 contentType = 'application/x-www-form-urlencoded';\n                 requestBody = new URLSearchParams({\n                     text: content,\n                     size: 300,\n                     margin: 10,\n                     foreground_color: '000000',\n                     background_color: 'FFFFFF'\n                 });\n             } else {\n                 // Service distant - format JSON avec les param√®tres de l'API principale\n                 contentType = 'application/json';\n                 requestBody = JSON.stringify({\n                     type: this.config.type,\n                     client_id: this.config.clientId,\n                     secret_id: this.config.secretId,\n                     content: content,\n                     label: label\n                 });\n             }\n             \n             const response = await fetch(qrGeneratorUrl, {\n                 method: 'POST',\n                 headers: {\n                     'Content-Type': contentType,\n                     'Accept': 'application/json'\n                 },\n                 body: requestBody\n             });\n            \n            if (!response.ok) {\n                throw new Error(`Erreur HTTP: ${response.status}`);\n            }\n            \n            const responseData = await response.json();\n            \n                         if (!responseData.success) {\n                 throw new Error(`Erreur QR: ${responseData.error}`);\n             }\n             \n             // Adapter selon le format de r√©ponse\n             let qrImageUrl;\n             if (qrGeneratorUrl.includes('localhost:8000')) {\n                 // Service local\n                 qrImageUrl = responseData.data_uri;\n             } else {\n                 // Service distant - utiliser le format de l'API principale\n                 const imageBaseUrl = 'https://sunuid.fayma.sn';\n                 qrImageUrl = `${imageBaseUrl}${responseData.data.qrcode}`;\n             }\n             \n             // Stocker l'URL\n             this.currentQRUrl = qrImageUrl;\n             \n             // Afficher le QR code\n             qrContainer.innerHTML = `\n                 <div style=\"text-align: center; padding: 20px;\">\n                     <img src=\"${qrImageUrl}\" alt=\"QR Code\" style=\"max-width: 300px; border: 2px solid #ddd; border-radius: 10px;\">\n                 </div>\n             `;\n            \n            // Afficher les instructions\n            this.showQRInstructions(qrContainer);\n        }\n\n        /**\n         * Afficher une image QR par d√©faut (fallback final)\n         */\n        displayDefaultQR(qrContainer, content, label) {\n            qrContainer.innerHTML = `\n                <div style=\"text-align: center; padding: 20px; color: #666;\">\n                    <div style=\"width: 300px; height: 300px; background: #f0f0f0; border: 2px solid #ddd; border-radius: 10px; display: flex; align-items: center; justify-content: center; margin: 0 auto;\">\n                        <div>\n                            <p style=\"font-size: 24px; margin: 0;\">üì±</p>\n                            <p style=\"font-size: 14px; margin: 10px 0 0 0;\">QR Code</p>\n                        </div>\n                    </div>\n                    <p style=\"margin-top: 10px; font-size: 12px;\">${label}</p>\n                    <p style=\"font-size: 10px; color: #999; margin-top: 5px;\">Contenu: ${content}</p>\n                </div>\n            `;\n        }\n\n        /**\n         * S'assurer que la biblioth√®que QRCode est disponible\n         */\n        async ensureQRCodeLibrary() {\n            if (typeof QRCode !== 'undefined') {\n                console.log('‚úÖ QRCode library d√©j√† disponible');\n                return true;\n            }\n            \n            console.log('üì¶ Chargement QRCode library...');\n            \n            return new Promise((resolve, reject) => {\n                const script = document.createElement('script');\n                script.src = 'https://cdn.jsdelivr.net/npm/qrcode@1.5.3/lib/browser.min.js';\n                script.onload = () => {\n                    setTimeout(() => {\n                        if (typeof QRCode !== 'undefined') {\n                            console.log('‚úÖ QRCode library charg√©e');\n                            resolve(true);\n                        } else {\n                            console.error('‚ùå QRCode non disponible apr√®s chargement');\n                            reject(new Error('QRCode library non disponible apr√®s chargement'));\n                        }\n                    }, 200);\n                };\n                script.onerror = () => {\n                    console.error('‚ùå Erreur chargement QRCode library');\n                    reject(new Error('Erreur chargement QRCode library'));\n                };\n                document.head.appendChild(script);\n            });\n        }\n\n        /**\n         * Afficher les instructions pour le QR code\n         */\n        showQRInstructions(qrContainer) {\n            const instructionsElement = qrContainer.parentElement.querySelector('.sunuid-qr-instructions');\n            const statusElement = qrContainer.parentElement.querySelector('.sunuid-qr-status');\n            \n            if (instructionsElement) {\n                instructionsElement.style.display = 'block';\n                instructionsElement.classList.add('sunuid-qr-ready');\n            }\n            if (statusElement) {\n                statusElement.style.display = 'block';\n                statusElement.classList.add('sunuid-qr-ready');\n            }\n        }\n\n        /**\n         * Ajouter le logo au centre du QR code\n         */\n        addLogoToCenter(ctx, x, y, width, height) {\n            try {\n                // Cr√©er une image pour le logo\n                const logo = new Image();\n                logo.onload = () => {\n                    const logoSize = 40;\n                    const logoX = x + (width - logoSize) / 2;\n                    const logoY = y + (width - logoSize) / 2;\n\n                    // Dessiner un fond blanc pour le logo\n                    ctx.fillStyle = 'white';\n                    ctx.fillRect(logoX - 2, logoY - 2, logoSize + 4, logoSize + 4);\n\n                    // Dessiner le logo\n                    ctx.drawImage(logo, logoX, logoY, logoSize, logoSize);\n                };\n                logo.src = 'src/logoqr.png';\n            } catch (error) {\n                console.warn('Logo non disponible:', error);\n            }\n        }\n\n        /**\n         * Afficher l'image de fallback\n         */\n        displayFallbackImage() {\n            console.log('‚ö†Ô∏è Affichage de l\\'image de fallback');\n            const qrContainer = document.getElementById('sunuid-qr-container');\n            if (qrContainer) {\n                qrContainer.innerHTML = `\n                    <div style=\"text-align: center; padding: 20px; color: #666;\">\n                        <p>‚ö†Ô∏è G√©n√©ration QR personnalis√© non disponible</p>\n                        <p>Utilisation de l'image par d√©faut</p>\n                        <p><strong>Debug:</strong> QRCode disponible: ${typeof QRCode !== 'undefined'}</p>\n                        <p><strong>Debug:</strong> Container trouv√©: ${qrContainer !== null}</p>\n                    </div>\n                `;\n            }\n        }\n\n        /**\n         * Afficher \"Service non disponible\"\n         */\n        displayServiceUnavailable(containerId, type) {\n            console.log(`displayServiceUnavailable appel√©e pour ${containerId}, type: ${type}`);\n            const container = document.getElementById(containerId);\n            if (!container) {\n                console.error(`Container ${containerId} non trouv√©`);\n                return;\n            }\n\n            container.innerHTML = `\n                <div class=\"sunuid-service-unavailable\" style=\"\n                    text-align: center;\n                    padding: 40px 20px;\n                    background: #f8f9fa;\n                    border: 2px dashed #dee2e6;\n                    border-radius: 10px;\n                    color: #6c757d;\n                    font-family: Arial, sans-serif;\n                \">\n                    <div style=\"font-size: 48px; margin-bottom: 20px;\">‚ö†Ô∏è</div>\n                    <h3 style=\"margin: 0 0 10px 0; color: #495057;\">Service Non Disponible</h3>\n                    <p style=\"margin: 0; font-size: 14px;\">\n                        Le service d'authentification est temporairement indisponible.<br>\n                        Veuillez r√©essayer plus tard.\n                    </p>\n                    <div style=\"margin-top: 20px; font-size: 12px; color: #adb5bd;\">\n                        Type: ${String(type).toUpperCase()}\n                    </div>\n                </div>\n            `;\n        }\n\n        /**\n         * Rafra√Æchir un QR code\n         */\n        async refreshQR(containerId, options = {}) {\n            try {\n                // V√©rifier si on a d√©j√† un QR code g√©n√©r√©\n                if (this.currentQRUrl) {\n                    console.log('üîÑ V√©rification du statut du QR code existant...');\n                    \n                    // Option 1: V√©rifier le statut du QR code via l'API\n                    // (√† impl√©menter si l'API le supporte)\n                    \n                    // Option 2: R√©g√©n√©rer le QR code seulement si n√©cessaire\n                    // Pour l'instant, on r√©g√©n√®re pour s'assurer qu'il est √† jour\n                    const result = await this.generateQR(containerId, options);\n                    return result;\n                } else {\n                    console.log('üîÑ Pas de QR code existant, g√©n√©ration d\\'un nouveau...');\n                    const result = await this.generateQR(containerId, options);\n                    return result;\n                }\n            } catch (error) {\n                console.error('Erreur lors du rafra√Æchissement:', error.message);\n                this.displayServiceUnavailable(containerId, this.config.type);\n                throw error;\n            }\n        }\n\n        /**\n         * D√©marrer le rafra√Æchissement automatique\n         */\n        startAutoRefresh(containerId, type, options) {\n            if (!this.config.autoRefresh) return;\n\n            // Arr√™ter le timer existant s'il y en a un\n            if (this.refreshTimer) {\n                clearInterval(this.refreshTimer);\n                console.log('üîÑ Timer de rafra√Æchissement pr√©c√©dent arr√™t√©');\n            }\n\n            this.refreshTimer = setInterval(async () => {\n                try {\n                    console.log('üîÑ Rafra√Æchissement automatique du QR code...');\n                    await this.refreshQR(containerId, type, options);\n                } catch (error) {\n                    console.warn('Erreur lors du rafra√Æchissement automatique:', error);\n                }\n            }, this.config.refreshInterval);\n            \n            console.log(`üîÑ Timer de rafra√Æchissement d√©marr√© (${this.config.refreshInterval}ms)`);\n        }\n\n        /**\n         * D√©marrer le timer de compte √† rebours\n         */\n\n\n        /**\n         * Effectuer une requ√™te API s√©curis√©e\n         */\n        async makeRequest(endpoint, data) {\n            // Validation de s√©curit√©\n            if (!this.isInitialized) {\n                this.logSecurityEvent('REQUEST_BEFORE_INIT', { endpoint });\n                throw new Error('SDK non initialis√©');\n            }\n\n            // V√©rifier les limites de requ√™tes pour l'initialisation s√©curis√©e\n            if (this.config.secureInit) {\n                this.config.requestCount++;\n                if (this.config.requestCount > this.config.maxRequests) {\n                    this.logSecurityEvent('API_REQUEST_LIMIT_EXCEEDED', { \n                        requestCount: this.config.requestCount,\n                        maxRequests: this.config.maxRequests \n                    });\n                    throw new Error('Limite de requ√™tes d√©pass√©e');\n                }\n            }\n\n            // Sanitisation des donn√©es\n            const sanitizedData = this.sanitizeRequestData(data);\n            \n            // Debug: Afficher les donn√©es envoy√©es\n            console.log('üîç Debug makeRequest - endpoint:', endpoint);\n            console.log('üîç Debug makeRequest - apiUrl:', this.config.apiUrl);\n            console.log('üîç Debug makeRequest - url:', `${this.config.apiUrl}${endpoint}`);\n            console.log('üîç Debug makeRequest - data:', JSON.stringify(sanitizedData, null, 2));\n            console.log('üîç Debug makeRequest - secureInit:', this.config.secureInit);\n            console.log('üîç Debug makeRequest - isInitialized:', this.isInitialized);\n            \n            // Utiliser l'endpoint depuis la configuration si disponible\n            const endpointPath = window.SunuIDConfig?.endpoints?.[endpoint.replace('/', '')] || endpoint;\n            const url = `${this.config.apiUrl}${endpointPath}`;\n            \n            // Debug: Afficher l'URL finale\n            console.log('üîç URL finale construite:', url);\n            console.log('üîç EndpointPath:', endpointPath);\n            console.log('üîç SunuIDConfig endpoints:', JSON.stringify(window.SunuIDConfig?.endpoints));\n            \n            // Log de s√©curit√© pour la requ√™te\n            this.logSecurityEvent('API_REQUEST_START', {\n                endpoint: endpointPath,\n                url: url,\n                dataKeys: Object.keys(sanitizedData),\n                secureInit: this.config.secureInit\n            });\n            \n            let retryCount = 0;\n            const maxRetries = this.config.maxRetries;\n            \n            while (retryCount <= maxRetries) {\n                try {\n                    const controller = new AbortController();\n                    const timeoutId = setTimeout(() => controller.abort(), this.config.requestTimeout);\n                    \n                    // Headers minimaux (API SunuID n'accepte que les headers essentiels)\n                    const headers = {\n                        'Content-Type': 'application/json'\n                    };\n\n                    // Note: En mode s√©curis√©, les credentials sont dans le body\n                    // Pas besoin d'ajouter de header sp√©cial pour √©viter les probl√®mes CORS\n                    // if (this.config.secureInit && this.config.token) {\n                    //     headers['X-Secure-Token'] = this.config.token;\n                    // }\n                    \n                    const response = await fetch(url, {\n                        method: 'POST',\n                        headers: headers,\n                        body: JSON.stringify(sanitizedData),\n                        signal: controller.signal\n                    });\n\n                    clearTimeout(timeoutId);\n\n                    if (!response.ok) {\n                        const errorText = await response.text();\n                        let errorData;\n                        try {\n                            errorData = JSON.parse(errorText);\n                        } catch (e) {\n                            errorData = { message: errorText };\n                        }\n                        \n                        this.logSecurityEvent('API_REQUEST_ERROR', {\n                            status: response.status,\n                            statusText: response.statusText,\n                            error: errorData.message\n                        });\n                        \n                        throw new Error(errorData.message || `Erreur HTTP: ${response.status}`);\n                    }\n\n                    const result = await response.json();\n                    \n                    this.logSecurityEvent('API_REQUEST_SUCCESS', {\n                        endpoint: endpointPath,\n                        responseKeys: Object.keys(result)\n                    });\n                    \n                    return result;\n                    \n                } catch (error) {\n                    retryCount++;\n                    \n                    if (error.name === 'AbortError') {\n                        this.logSecurityEvent('API_REQUEST_TIMEOUT', { retryCount });\n                        if (retryCount > maxRetries) {\n                            throw new Error('Timeout de la requ√™te API');\n                        }\n                        continue;\n                    }\n                    \n                    if (retryCount > maxRetries) {\n                        this.logSecurityEvent('API_REQUEST_MAX_RETRIES', { \n                            retryCount, \n                            error: error.message \n                        });\n                        throw error;\n                    }\n                    \n                    // Attendre avant de r√©essayer\n                    await new Promise(resolve => setTimeout(resolve, 1000 * retryCount));\n                }\n            }\n        }\n\n        /**\n         * Sanitisation des donn√©es de requ√™te\n         */\n        sanitizeRequestData(data) {\n            const sanitized = {};\n            \n            // D'abord, copier tous les champs de data\n            for (const [key, value] of Object.entries(data)) {\n                if (typeof value === 'string') {\n                    sanitized[key] = this.sanitizeInput(value);\n                } else if (typeof value === 'object' && value !== null) {\n                    sanitized[key] = this.sanitizeRequestData(value);\n                } else {\n                    sanitized[key] = value;\n                }\n            }\n            \n            // Ensuite, ajouter/√©craser les credentials (API SunuID les attend ici)\n            // Utiliser les vraies valeurs (originales) si disponibles, sinon les valeurs directes\n            sanitized.client_id = this.config.originalClientId || this.config.clientId;\n            sanitized.secret_id = this.config.originalSecretId || this.config.secretId;\n            \n            // Debug: V√©rifier les credentials et les donn√©es\n            console.log('üîç Credentials dans sanitizeRequestData - clientId:', this.config.clientId);\n            console.log('üîç Credentials dans sanitizeRequestData - secretId:', this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null');\n            console.log('üîç Credentials dans sanitizeRequestData - sanitizedClientId:', sanitized.client_id);\n            console.log('üîç Credentials dans sanitizeRequestData - sanitizedSecretId:', sanitized.secret_id ? '***' + sanitized.secret_id.slice(-4) : 'null');\n            console.log('üîç Credentials dans sanitizeRequestData - data complet:', JSON.stringify(sanitized, null, 2));\n            \n            return sanitized;\n        }\n\n        /**\n         * G√©n√©rer un ID de requ√™te unique\n         */\n        generateRequestId() {\n            return 'req_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n        }\n\n        /**\n         * G√©n√©rer un code de session unique\n         */\n        generateSessionCode() {\n            const timestamp = Date.now();\n            const random = Math.random().toString(36).substr(2, 9);\n            const code = `${timestamp}_${random}`;\n            return btoa(code); // Encoder en base64\n        }\n\n        /**\n         * R√©cup√©rer les informations du partenaire depuis l'API\n         */\n        async fetchPartnerInfo() {\n            try {\n                const response = await this.makeRequest('/debug', {\n                    type: this.config.type,\n                    client_id: this.config.clientId,\n                    secret_id: this.config.secretId\n                });\n\n                console.log('üìã R√©ponse debug API:', response);\n\n                // V√©rifier la structure de la r√©ponse\n                if (response.success && response.data) {\n                    const data = response.data;\n                    \n                    // Essayer de r√©cup√©rer le partner_id depuis diff√©rentes structures possibles\n                    let partnerId = null;\n                    \n                    if (data.partner_id) {\n                        partnerId = data.partner_id;\n                    } else if (data.authentication && data.authentication.auth_test && data.authentication.auth_test.partner_id) {\n                        partnerId = data.authentication.auth_test.partner_id;\n                    } else if (data.auth_test && data.auth_test.partner_id) {\n                        partnerId = data.auth_test.partner_id;\n                    }\n                    \n                    if (partnerId) {\n                        this.config.partnerId = partnerId;\n                        \n                        // R√©cup√©rer le service_id depuis la r√©ponse\n                        if (data.service_id) {\n                            this.config.serviceId = data.service_id;\n                        } else {\n                            // Fallback: utiliser le partner_id comme service_id\n                            this.config.serviceId = partnerId;\n                        }\n                        \n                        // Utiliser le partner_id pour d√©terminer le nom du partenaire\n                        if (partnerId === 21) {\n                            this.config.partnerName = 'Fayma';\n                        } else {\n                            this.config.partnerName = `Partner_${partnerId}`;\n                        }\n                        \n                        console.log('‚úÖ Informations partenaire r√©cup√©r√©es:', {\n                            partnerName: this.config.partnerName,\n                            partnerId: this.config.partnerId,\n                            serviceId: this.config.serviceId\n                        });\n                    } else {\n                        console.warn('‚ö†Ô∏è Partner ID non trouv√© dans la r√©ponse, utilisation du partner_id par d√©faut');\n                        this.config.partnerName = `Partner_${this.config.partnerId || 'unknown'}`;\n                    }\n                } else {\n                    console.warn('‚ö†Ô∏è Structure de r√©ponse invalide, utilisation du partner_id par d√©faut');\n                    this.config.partnerName = `Partner_${this.config.partnerId || 'unknown'}`;\n                }\n            } catch (error) {\n                console.warn('‚ö†Ô∏è Erreur lors de la r√©cup√©ration des informations du partenaire:', error.message);\n                this.config.partnerName = 'Partner_unknown';\n            }\n        }\n\n        /**\n         * Appliquer le th√®me\n         */\n        applyTheme(theme) {\n            const container = document.querySelector('.sunuid-qr-code');\n            if (container) {\n                container.className = `sunuid-qr-code sunuid-theme-${theme}`;\n            }\n        }\n\n        /**\n         * G√©rer les erreurs\n         */\n        handleError(error) {\n            console.error('SunuID SDK Error:', error);\n            \n            if (this.config.onError) {\n                this.config.onError(error);\n            }\n        }\n\n        /**\n         * V√©rifier le statut des connexions\n         */\n        async checkConnections() {\n            const status = {\n                api: false,\n                websocket: false,\n                ready: false\n            };\n            \n            // V√©rifier l'API en utilisant l'endpoint debug avec les credentials\n            try {\n                const testResponse = await fetch(this.config.apiUrl + '/debug', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        type: this.config.type,\n                        client_id: this.config.clientId,\n                        secret_id: this.config.secretId\n                    })\n                });\n                \n                if (testResponse.ok) {\n                    const debugData = await testResponse.json();\n                    // L'API est accessible si on re√ßoit une r√©ponse avec success: true\n                    status.api = debugData.success === true;\n                    console.log('üîç API Status:', status.api ? 'accessible' : 'inaccessible');\n                } else {\n                    status.api = false;\n                    console.log('üîç API Status: HTTP', testResponse.status);\n                }\n            } catch (error) {\n                console.log('üîç Test API √©chou√©:', error.message);\n                status.api = false;\n            }\n            \n            // V√©rifier le WebSocket\n            status.websocket = this.socket && this.socket.connected;\n            \n            // Connexions pr√™tes si API est accessible\n            status.ready = status.api;\n            \n            return status;\n        }\n        \n        /**\n         * Attendre que les connexions soient pr√™tes\n         */\n        async waitForConnections(timeout = 5000) {\n            const startTime = Date.now();\n            \n            while (Date.now() - startTime < timeout) {\n                const status = await this.checkConnections();\n                \n                if (status.ready) {\n                    console.log('‚úÖ Connexions pr√™tes');\n                    return status;\n                }\n                \n                console.log('‚è≥ Attente connexions...', status);\n                await new Promise(resolve => setTimeout(resolve, 1000)); // V√©rification toutes les secondes\n            }\n            \n            throw new Error('Timeout connexions - Impossible de g√©n√©rer le QR code');\n        }\n        \n        /**\n         * Obtenir l'URL du QR code g√©n√©r√©\n         */\n        getQRCode() {\n            // Retourner l'URL du QR code si disponible\n            if (this.currentQRUrl) {\n                return this.currentQRUrl;\n            }\n            \n            // Sinon, retourner une URL par d√©faut ou null\n            return null;\n        }\n\n        /**\n         * Nettoyer les ressources\n         */\n        destroy() {\n            this.stopAutoRefresh();\n            \n            // Fermer la connexion WebSocket\n            if (this.socket) {\n                this.socket.disconnect();\n                this.socket = null;\n                console.log('üåê WebSocket d√©connect√©');\n            }\n            \n            this.isInitialized = false;\n            this.logSecurityEvent('SDK_DESTROY');\n            console.log('SunuID SDK d√©truit');\n        }\n\n        /**\n         * Arr√™ter le rafra√Æchissement automatique\n         */\n        stopAutoRefresh() {\n            if (this.refreshTimer) {\n                clearInterval(this.refreshTimer);\n                this.refreshTimer = null;\n                console.log('üîÑ Timer de rafra√Æchissement arr√™t√©');\n            }\n        }\n\n        /**\n         * Obtenir les logs de s√©curit√©\n         */\n        getSecurityLogs() {\n            return window.SunuIDSecurityLogs || [];\n        }\n\n        /**\n         * Nettoyer les logs de s√©curit√©\n         */\n        clearSecurityLogs() {\n            window.SunuIDSecurityLogs = [];\n            this.logSecurityEvent('SECURITY_LOGS_CLEARED');\n        }\n\n        /**\n         * Afficher un loader pendant le scan du QR code\n         */\n        showQRLoader() {\n            console.log('üîÑ Affichage du loader - Scan QR initi√©');\n            \n            // Chercher le conteneur QR dans diff√©rents IDs possibles\n            const containerIds = ['qr-area', 'qr-container', 'sunuid-qr-container'];\n            let container = null;\n            \n            for (const id of containerIds) {\n                container = document.getElementById(id);\n                if (container) break;\n            }\n            \n            if (!container) {\n                console.warn('‚ö†Ô∏è Conteneur QR non trouv√© pour afficher le loader');\n                return;\n            }\n            \n            // Remplacer le contenu par un loader anim√©\n            container.innerHTML = `\n                <div style=\"\n                    text-align: center;\n                    padding: 40px 20px;\n                    background: #f8f9fa;\n                    border: 2px solid #007bff;\n                    border-radius: 10px;\n                    color: #007bff;\n                    font-family: Arial, sans-serif;\n                \">\n                    <div style=\"\n                        width: 60px;\n                        height: 60px;\n                        border: 4px solid #e3f2fd;\n                        border-top: 4px solid #007bff;\n                        border-radius: 50%;\n                        animation: spin 1s linear infinite;\n                        margin: 0 auto 20px auto;\n                    \"></div>\n                    <h3 style=\"margin: 0 0 10px 0; color: #007bff;\">üîç Scan en cours...</h3>\n                    <p style=\"margin: 0; font-size: 14px;\">\n                        Veuillez patienter pendant la v√©rification de votre identit√©.\n                    </p>\n                    <div style=\"margin-top: 15px; font-size: 12px; color: #6c757d;\">\n                        ‚è±Ô∏è Traitement en cours...\n                    </div>\n                </div>\n                <style>\n                    @keyframes spin {\n                        0% { transform: rotate(0deg); }\n                        100% { transform: rotate(360deg); }\n                    }\n                </style>\n            `;\n            \n            console.log('‚úÖ Loader affich√© avec succ√®s');\n        }\n\n        /**\n         * G√©rer le callback SunuID\n         */\n        handleCallback() {\n            const urlParams = new URLSearchParams(window.location.search);\n            \n            // V√©rifier si c'est un callback SunuID\n            if (urlParams.has('token') && urlParams.has('session_id')) {\n                console.log('üîó Callback SunuID d√©tect√©');\n                \n                // R√©cup√©rer les param√®tres\n                const callbackData = {\n                    token: urlParams.get('token'),\n                    state: urlParams.get('state'),\n                    session_id: urlParams.get('session_id'),\n                    user_id: urlParams.get('user_id'),\n                    partner_id: urlParams.get('partner_id'),\n                    type: urlParams.get('type'),\n                    timestamp: urlParams.get('timestamp'),\n                    signature: urlParams.get('signature')\n                };\n                \n                console.log('üìã Donn√©es callback:', callbackData);\n                \n                // Valider le callback\n                this.validateCallback(callbackData);\n                \n                // Traiter l'authentification\n                this.processAuthentication(callbackData);\n                \n                return true;\n            }\n            \n            return false;\n        }\n\n        /**\n         * Valider le callback\n         */\n        validateCallback(data) {\n            console.log('üîí Validation du callback...');\n            \n            // V√©rifier l'√©tat de s√©curit√©\n            if (data.state && data.state !== this.config.state) {\n                console.error('‚ùå √âtat de s√©curit√© invalide');\n                throw new Error('√âtat de s√©curit√© invalide');\n            }\n            \n            // V√©rifier la signature (si configur√©e)\n            if (data.signature && this.config.verifySignature) {\n                if (!this.verifySignature(data)) {\n                    console.error('‚ùå Signature invalide');\n                    throw new Error('Signature invalide');\n                }\n            }\n            \n            // V√©rifier l'expiration\n            if (data.timestamp && this.isExpired(data.timestamp)) {\n                console.error('‚ùå Token expir√©');\n                throw new Error('Token expir√©');\n            }\n            \n            console.log('‚úÖ Callback valid√© avec succ√®s');\n        }\n\n        /**\n         * Traiter l'authentification\n         */\n        processAuthentication(data) {\n            console.log('üîê Traitement de l\\'authentification...');\n            \n            try {\n                // D√©coder le JWT token\n                const decodedToken = this.decodeJWT(data.token);\n                \n                // V√©rifier les donn√©es utilisateur\n                const userData = {\n                    user_id: decodedToken.user_id || data.user_id,\n                    session_id: decodedToken.session_id || data.session_id,\n                    partner_id: decodedToken.partner_id || data.partner_id,\n                    type: decodedToken.type || data.type,\n                    iat: decodedToken.iat,\n                    exp: decodedToken.exp\n                };\n                \n                console.log('üë§ Donn√©es utilisateur:', userData);\n                \n                // √âmettre l'√©v√©nement de succ√®s\n                this.emitWebSocketEvent('authentication_success', {\n                    userData: userData,\n                    callbackData: data,\n                    timestamp: Date.now()\n                });\n                \n                // Appeler le callback de succ√®s\n                if (this.config.onAuthenticationSuccess) {\n                    this.config.onAuthenticationSuccess(userData, data);\n                }\n                \n                // Rediriger si configur√©\n                if (this.config.redirectAfterSuccess) {\n                    this.redirectAfterSuccess(userData);\n                }\n                \n                console.log('‚úÖ Authentification trait√©e avec succ√®s');\n                \n            } catch (error) {\n                console.error('‚ùå Erreur lors du traitement:', error);\n                \n                // Appeler le callback d'erreur\n                if (this.config.onAuthenticationError) {\n                    this.config.onAuthenticationError(error, data);\n                }\n                \n                throw error;\n            }\n        }\n\n        /**\n         * D√©coder un JWT token\n         */\n        decodeJWT(token) {\n            try {\n                // D√©codage simple du JWT (sans v√©rification de signature)\n                const parts = token.split('.');\n                if (parts.length !== 3) {\n                    throw new Error('Format JWT invalide');\n                }\n                \n                const payload = parts[1];\n                const decoded = JSON.parse(atob(payload));\n                \n                return decoded;\n            } catch (error) {\n                console.error('‚ùå Erreur d√©codage JWT:', error);\n                throw new Error('Token JWT invalide');\n            }\n        }\n\n        /**\n         * V√©rifier la signature\n         */\n        verifySignature(data) {\n            // Impl√©mentation basique - √† adapter selon vos besoins\n            const expectedSignature = this.generateSignature(data);\n            return data.signature === expectedSignature;\n        }\n\n        /**\n         * G√©n√©rer une signature\n         */\n        generateSignature(data) {\n            // Impl√©mentation basique - √† adapter selon vos besoins\n            const payload = `${data.token}.${data.state}.${data.session_id}.${data.timestamp}`;\n            return btoa(payload).slice(0, 12); // Signature simplifi√©e\n        }\n\n        /**\n         * V√©rifier l'expiration\n         */\n        isExpired(timestamp) {\n            const currentTime = Math.floor(Date.now() / 1000);\n            const tokenTime = parseInt(timestamp);\n            const maxAge = this.config.tokenMaxAge || 300; // 5 minutes par d√©faut\n            \n            return (currentTime - tokenTime) > maxAge;\n        }\n\n        /**\n         * Rediriger apr√®s succ√®s\n         */\n        redirectAfterSuccess(userData) {\n            let redirectUrl = this.config.redirectAfterSuccess;\n            \n            // Remplacer les variables dans l'URL\n            redirectUrl = redirectUrl\n                .replace('{user_id}', userData.user_id)\n                .replace('{session_id}', userData.session_id)\n                .replace('{partner_id}', userData.partner_id)\n                .replace('{type}', userData.type);\n            \n            console.log('üîÑ Redirection vers:', redirectUrl);\n            \n            // Redirection avec d√©lai pour permettre les callbacks\n            setTimeout(() => {\n                window.location.href = redirectUrl;\n            }, 100);\n        }\n\n        /**\n         * G√©n√©rer un √©tat de s√©curit√©\n         */\n        generateState() {\n            const state = 'sunuid_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n            this.config.state = state;\n            return state;\n        }\n    }\n\n    // Exposer la classe globalement\n    window.SunuID = SunuID;\n    window.sunuidInstance = null;\n\n    // Fonction d'initialisation globale\n    window.initSunuID = function(config) {\n        try {\n            window.sunuidInstance = new SunuID(config);\n            return window.sunuidInstance;\n        } catch (error) {\n            console.error('Erreur lors de l\\'initialisation de SunuID:', error);\n            throw error;\n        }\n    };\n\n})(window); "],"names":["window","_window$SunuIDConfig","DEFAULT_CONFIG","apiUrl","SunuIDConfig","clientId","secretId","type","partnerName","theme","language","autoRefresh","refreshInterval","autoInit","onSuccess","onError","onStatusUpdate","onExpired","enableSecurityLogs","validateInputs","maxRetries","requestTimeout","secureInit","secureInitUrl","_window$SunuIDConfig2","_window$SunuIDConfig3","includes","replace","token","forceRemoteServer","useLocalFallback","redirectAfterSuccess","verifySignature","tokenMaxAge","onAuthenticationSuccess","onAuthenticationError","state","SunuID","config","arguments","length","undefined","_classCallCheck","_objectSpread","qrCode","refreshTimer","isInitialized","socket","initPromise","init","_createClass","key","value","_init","_asyncToGenerator","_regenerator","m","_callee","_t","w","_context","p","n","handleCallback","console","log","a","validateSecurityParams","logSecurityEvent","fetchPartnerInfo","obfuscateCredentials","slice","initWebSocket","v","error","message","apply","_secureInit","_callee2","initData","response","result","decodedToken","_t2","_context2","fetch","method","headers","body","JSON","stringify","ok","Error","concat","status","json","success","data","api_url","decodeSecureToken","client_id","secret_id","expiresIn","expires_in","maxRequests","max_requests","requestCount","parts","split","_parts","_slicedToArray","payload","signature","decodedPayload","atob","tokenData","parse","exp","Date","now","_this","io","warn","setTimeout","ip","getClientIP","query","userId","username","transports","on","id","connected","reason","handleQRStatusUpdate","handleQRScanSuccess","handleQRExpired","showQRLoader","onAny","eventName","callback","_len","args","Array","_key","getTypeName","errors","push","isValidUrl","join","string","url","URL","protocol","_","event","securityLog","timestamp","toISOString","userAgent","navigator","location","href","SunuIDSecurityLogs","originalClientId","originalSecretId","clientIdDisplay","secretIdDisplay","sanitizeInput","input","trim","emitWebSocketEvent","emit","getWebSocketStatus","forceWebSocketInit","_generateQR","_callee3","containerId","options","connectionStatus","socketId","qrContent","qrImageUrl","isLocal","_args3","_t3","_t4","_context3","waitForConnections","makeRequest","label","qrCodeUrl","startsWith","qr_url","qrUrl","image_url","imageUrl","currentQRUrl","sessionId","displayQRCode","startAutoRefresh","stack","hostname","displayServiceUnavailable","generateQR","_generateCustomQR","_callee4","imageBaseUrl","_args4","_t5","_context4","qrcode","code","service_id","generateCustomQR","_x","_x2","_generateAuthQR","_callee5","_args5","_context5","generateAuthQR","_x3","_generateKYCQR","_callee6","originalType","_args6","_context6","f","generateKYCQR","_x4","_generateSignatureQR","_callee7","_args7","_context7","generateSignatureQR","_x5","_checkQRStatus","_callee8","_t6","_context8","serviceId","handleError","checkQRStatus","_x6","_generateQRWithContent","_callee9","content","localQRUrl","_args9","_t7","_context9","generateQRLocal","generateQRRemote","displayQRContent","generateQRWithContent","_x7","_x8","_x9","_generateQRLocal","_callee0","_args0","_t8","_context0","encodeURIComponent","_x0","_x1","_x10","_generateQRRemote","_callee1","_args1","_t9","_context1","text","size","_x11","_x12","_x13","container","document","getElementById","typeName","innerHTML","qrElement","createElement","className","appendChild","applyTheme","_generateCustomQRCode","_callee10","qrContainer","_args10","_t0","_context10","generateQRPHP","displayDefaultQR","generateCustomQRCode","_x14","_x15","_generateQRClientSide","_callee11","_this2","canvas","ctx","_context11","ensureQRCodeLibrary","QRCode","width","height","getContext","fillStyle","fillRect","Promise","resolve","reject","toCanvas","margin","color","dark","light","font","textAlign","fillText","dataUrl","toDataURL","showQRInstructions","generateQRClientSide","_x16","_x17","_x18","_generateQRPHP","_callee12","qrGeneratorUrl","requestBody","contentType","responseData","_context12","URLSearchParams","foreground_color","background_color","data_uri","_x19","_x20","_x21","_ensureQRCodeLibrary","_callee13","_context13","script","src","onload","onerror","head","instructionsElement","parentElement","querySelector","statusElement","style","display","classList","add","addLogoToCenter","x","y","logo","Image","logoSize","logoX","logoY","drawImage","displayFallbackImage","String","toUpperCase","_refreshQR","_callee14","_result","_args14","_t1","_context14","refreshQR","_x22","_this3","clearInterval","setInterval","_callee15","_t10","_context15","_makeRequest","_callee16","endpoint","_window$SunuIDConfig4","_window$SunuIDConfig5","_this4","sanitizedData","endpointPath","retryCount","_loop","_ret","_context17","sanitizeRequestData","endpoints","dataKeys","Object","keys","controller","timeoutId","errorText","errorData","_t11","_context16","AbortController","abort","signal","clearTimeout","e","statusText","responseKeys","name","d","_regeneratorValues","_x23","_x24","sanitized","_i","_Object$entries","entries","_Object$entries$_i","_typeof","generateRequestId","Math","random","toString","substr","generateSessionCode","btoa","_fetchPartnerInfo","_callee17","partnerId","_t12","_context18","partner_id","authentication","auth_test","_checkConnections","_callee18","testResponse","debugData","_t13","_context19","api","websocket","ready","checkConnections","_waitForConnections","_callee19","timeout","startTime","_args20","_context20","getQRCode","destroy","stopAutoRefresh","disconnect","getSecurityLogs","clearSecurityLogs","containerIds","_i2","_containerIds","urlParams","search","has","callbackData","get","session_id","user_id","validateCallback","processAuthentication","isExpired","decodeJWT","userData","iat","decoded","expectedSignature","generateSignature","currentTime","floor","tokenTime","parseInt","maxAge","redirectUrl","generateState","sunuidInstance","initSunuID"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC,UAASA,MAAM,EAAAC,oBAAA,EAAE;;AAGd;AACA,EAAA,IAAMC,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,CAAA,CAAAF,oBAAA,GAAAD,MAAM,CAACI,YAAY,MAAAH,IAAAA,IAAAA,oBAAA,KAAnBA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,oBAAA,CAAqBE,MAAM,KAAI,6BAA6B;AACpEE,IAAAA,QAAQ,EAAE,IAAI;AACdC,IAAAA,QAAQ,EAAE,IAAI;AACdC,IAAAA,IAAI,EAAE,CAAC;AAAE;AACTC,IAAAA,WAAW,EAAE,IAAI;AAAE;AACnBC,IAAAA,KAAK,EAAE,OAAO;AACdC,IAAAA,QAAQ,EAAE,IAAI;AACdC,IAAAA,WAAW,EAAE,KAAK;AAAE;AACpBC,IAAAA,eAAe,EAAE,KAAK;AAAE;AACxBC,IAAAA,QAAQ,EAAE,IAAI;AAAE;AAChBC,IAAAA,SAAS,EAAE,IAAI;AACfC,IAAAA,OAAO,EAAE,IAAI;AACbC,IAAAA,cAAc,EAAE,IAAI;AACpBC,IAAAA,SAAS,EAAE,IAAI;AACf;AACAC,IAAAA,kBAAkB,EAAE,IAAI;AACxBC,IAAAA,cAAc,EAAE,IAAI;AACpBC,IAAAA,UAAU,EAAE,CAAC;AACbC,IAAAA,cAAc,EAAE,KAAK;AAAE;AACvB;AACAC,IAAAA,UAAU,EAAE,KAAK;AACjBC,IAAAA,aAAa,EAAG,UAAAC,qBAAA,EAAAC,qBAAA,EAAM;MAClB,IAAAD,CAAAA,qBAAA,GAAIxB,MAAM,CAACI,YAAY,MAAAoB,IAAAA,IAAAA,qBAAA,KAAAA,KAAAA,CAAAA,IAAAA,CAAAA,qBAAA,GAAnBA,qBAAA,CAAqBrB,MAAM,MAAA,IAAA,IAAAqB,qBAAA,KAA3BA,KAAAA,CAAAA,IAAAA,qBAAA,CAA6BE,QAAQ,CAAC,qBAAqB,CAAC,EAAE;AAC9D,QAAA,OAAO,6CAA6C,CAAA;AACxD,OAAA;AACA,MAAA,OAAO,CAAAD,CAAAA,qBAAA,GAAAzB,MAAM,CAACI,YAAY,MAAAqB,IAAAA,IAAAA,qBAAA,KAAAA,KAAAA,CAAAA,IAAAA,CAAAA,qBAAA,GAAnBA,qBAAA,CAAqBtB,MAAM,MAAAsB,IAAAA,IAAAA,qBAAA,KAA3BA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,qBAAA,CAA6BE,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,IAAG,kBAAkB,IAAI,6CAA6C,CAAA;AACjI,KAAC,EAAG;AACJC,IAAAA,KAAK,EAAE,IAAI;AACX;AACAC,IAAAA,iBAAiB,EAAE,IAAI;AACvBC,IAAAA,gBAAgB,EAAE,KAAK;AACvB;AACAC,IAAAA,oBAAoB,EAAE,IAAI;AAC1BC,IAAAA,eAAe,EAAE,KAAK;AACtBC,IAAAA,WAAW,EAAE,GAAG;AAAE;AAClBC,IAAAA,uBAAuB,EAAE,IAAI;AAC7BC,IAAAA,qBAAqB,EAAE,IAAI;AAC3BC,IAAAA,KAAK,EAAE,IAAA;GACV,CAAA;;AAED;AACJ;AACA;AAFI,EAAA,IAGMC,MAAM,gBAAA,YAAA;AACR,IAAA,SAAAA,SAAyB;AAAA,MAAA,IAAbC,MAAM,GAAAC,SAAA,CAAAC,MAAA,GAAA,CAAA,IAAAD,SAAA,CAAA,CAAA,CAAA,KAAAE,SAAA,GAAAF,SAAA,CAAA,CAAA,CAAA,GAAG,EAAE,CAAA;AAAAG,MAAAA,eAAA,OAAAL,MAAA,CAAA,CAAA;MACnB,IAAI,CAACC,MAAM,GAAAK,cAAA,CAAAA,cAAA,CAAQzC,EAAAA,EAAAA,cAAc,CAAKoC,EAAAA,MAAM,CAAE,CAAA;MAC9C,IAAI,CAACM,MAAM,GAAG,IAAI,CAAA;MAClB,IAAI,CAACC,YAAY,GAAG,IAAI,CAAA;MACxB,IAAI,CAACC,aAAa,GAAG,KAAK,CAAA;MAC1B,IAAI,CAACC,MAAM,GAAG,IAAI,CAAA;;AAElB;AACA,MAAA,IAAI,IAAI,CAACT,MAAM,CAACzB,QAAQ,KAAK,KAAK,EAAE;AAChC,QAAA,IAAI,CAACmC,WAAW,GAAG,IAAI,CAACC,IAAI,EAAE,CAAA;AAClC,OAAA;AACJ,KAAA;;AAEA;AACR;AACA;IAFQ,OAAAC,YAAA,CAAAb,MAAA,EAAA,CAAA;MAAAc,GAAA,EAAA,MAAA;MAAAC,KAAA,GAAA,YAAA;QAAA,IAAAC,KAAA,GAAAC,iBAAA,cAAAC,YAAA,EAAAC,CAAAA,CAAA,CAGA,SAAAC,OAAA,GAAA;AAAA,UAAA,IAAAC,EAAA,CAAA;AAAA,UAAA,OAAAH,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAAC,QAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,QAAA,CAAAC,CAAA,GAAAD,QAAA,CAAAE,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAF,gBAAAA,QAAA,CAAAC,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,IAAA,CAGY,IAAI,CAACE,cAAc,EAAE,EAAA;AAAAH,kBAAAA,QAAA,CAAAE,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AACrBE,gBAAAA,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC,CAAA;gBAAC,OAAAL,QAAA,CAAAM,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;AAAA,gBAAA,IAAA,CAK1D,IAAI,CAAC5B,MAAM,CAAChB,UAAU,EAAA;AAAAsC,kBAAAA,QAAA,CAAAE,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAAAF,gBAAAA,QAAA,CAAAE,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OAChB,IAAI,CAACxC,UAAU,EAAE,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAsC,gBAAAA,QAAA,CAAAE,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;AAEvB;AACA,gBAAA,IAAI,IAAI,CAACxB,MAAM,CAACnB,cAAc,EAAE;kBAC5B,IAAI,CAACgD,sBAAsB,EAAE,CAAA;AACjC,iBAAA;AAAC,cAAA,KAAA,CAAA;AAGL;AACA,gBAAA,IAAI,CAACC,gBAAgB,CAAC,gBAAgB,EAAE;AACpCjE,kBAAAA,MAAM,EAAE,IAAI,CAACmC,MAAM,CAACnC,MAAM;AAC1BI,kBAAAA,IAAI,EAAE,IAAI,CAAC+B,MAAM,CAAC/B,IAAI;AACtBe,kBAAAA,UAAU,EAAE,IAAI,CAACgB,MAAM,CAAChB,UAAAA;AAC5B,iBAAC,CAAC,CAAA;;AAEF;AAAAsC,gBAAAA,QAAA,CAAAE,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OACM,IAAI,CAACO,gBAAgB,EAAE,CAAA;AAAA,cAAA,KAAA,CAAA;AAE7B;gBACA,IAAI,CAACC,oBAAoB,EAAE,CAAA;gBAE3B,IAAI,CAACxB,aAAa,GAAG,IAAI,CAAA;AACzBkB,gBAAAA,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC,CAAA;AAChDD,gBAAAA,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE;AACjC9D,kBAAAA,MAAM,EAAE,IAAI,CAACmC,MAAM,CAACnC,MAAM;AAC1BI,kBAAAA,IAAI,EAAE,IAAI,CAAC+B,MAAM,CAAC/B,IAAI;AACtBC,kBAAAA,WAAW,EAAE,IAAI,CAAC8B,MAAM,CAAC9B,WAAW;kBACpCH,QAAQ,EAAE,IAAI,CAACiC,MAAM,CAACjC,QAAQ,GAAG,KAAK,GAAG,IAAI,CAACiC,MAAM,CAACjC,QAAQ,CAACkE,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM;kBAChFjE,QAAQ,EAAE,IAAI,CAACgC,MAAM,CAAChC,QAAQ,GAAG,KAAK,GAAG,IAAI,CAACgC,MAAM,CAAChC,QAAQ,CAACiE,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM;AAChFjD,kBAAAA,UAAU,EAAE,IAAI,CAACgB,MAAM,CAAChB,UAAU;AAClCb,kBAAAA,KAAK,EAAE,IAAI,CAAC6B,MAAM,CAAC7B,KAAAA;AACvB,iBAAC,CAAC,CAAA;AAEF,gBAAA,IAAI,CAAC2D,gBAAgB,CAAC,kBAAkB,CAAC,CAAA;;AAEzC;gBACA,IAAI,CAACI,aAAa,EAAE,CAAA;AAACZ,gBAAAA,QAAA,CAAAE,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;AAAAF,gBAAAA,QAAA,CAAAC,CAAA,GAAA,CAAA,CAAA;gBAAAH,EAAA,GAAAE,QAAA,CAAAa,CAAA,CAAA;AAGrB,gBAAA,IAAI,CAACL,gBAAgB,CAAC,gBAAgB,EAAE;kBAAEM,KAAK,EAAEhB,EAAA,CAAMiB,OAAAA;AAAQ,iBAAC,CAAC,CAAA;AAAC,gBAAA,MAAAjB,EAAA,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,OAAAE,QAAA,CAAAM,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAT,OAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;SAGzE,CAAA,CAAA,CAAA;AAAA,QAAA,SApDKR,IAAIA,GAAA;AAAA,UAAA,OAAAI,KAAA,CAAAuB,KAAA,CAAA,IAAA,EAAArC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAJU,IAAI,CAAA;AAAA,OAAA,EAAA;AAsDV;AACR;AACA;AAFQ,OAAA;AAAA,KAAA,EAAA;MAAAE,GAAA,EAAA,YAAA;MAAAC,KAAA,GAAA,YAAA;QAAA,IAAAyB,WAAA,GAAAvB,iBAAA,cAAAC,YAAA,EAAAC,CAAAA,CAAA,CAGA,SAAAsB,QAAA,GAAA;UAAA,IAAAC,QAAA,EAAAC,QAAA,EAAAC,MAAA,EAAAC,YAAA,EAAAC,GAAA,CAAA;AAAA,UAAA,OAAA5B,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAAyB,SAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,SAAA,CAAAvB,CAAA,GAAAuB,SAAA,CAAAtB,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAsB,gBAAAA,SAAA,CAAAvB,CAAA,GAAA,CAAA,CAAA;AAEQ,gBAAA,IAAI,CAACO,gBAAgB,CAAC,mBAAmB,CAAC,CAAA;AAEpCW,gBAAAA,QAAQ,GAAG;AACbxE,kBAAAA,IAAI,EAAE,IAAI,CAAC+B,MAAM,CAAC/B,IAAI;AACtBC,kBAAAA,WAAW,EAAE,IAAI,CAAC8B,MAAM,CAAC9B,WAAW;AACpCC,kBAAAA,KAAK,EAAE,IAAI,CAAC6B,MAAM,CAAC7B,KAAAA;iBACtB,CAAA;AAAA2E,gBAAAA,SAAA,CAAAtB,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OAEsBuB,KAAK,CAAC,IAAI,CAAC/C,MAAM,CAACf,aAAa,EAAE;AACpD+D,kBAAAA,MAAM,EAAE,MAAM;AACdC,kBAAAA,OAAO,EAAE;AACL,oBAAA,cAAc,EAAE,kBAAkB;AAClC,oBAAA,QAAQ,EAAE,kBAAA;mBACb;AACDC,kBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACX,QAAQ,CAAA;AACjC,iBAAC,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBAPIC,QAAQ,GAAAI,SAAA,CAAAX,CAAA,CAAA;gBAAA,IASTO,QAAQ,CAACW,EAAE,EAAA;AAAAP,kBAAAA,SAAA,CAAAtB,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;gBAAA,MACN,IAAI8B,KAAK,CAAAC,eAAAA,CAAAA,MAAA,CAAiBb,QAAQ,CAACc,MAAM,CAAE,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAV,gBAAAA,SAAA,CAAAtB,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OAGjCkB,QAAQ,CAACe,IAAI,EAAE,CAAA;AAAA,cAAA,KAAA,CAAA;gBAA9Bd,MAAM,GAAAG,SAAA,CAAAX,CAAA,CAAA;AAEZT,gBAAAA,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEgB,MAAM,CAAC,CAAA;gBAAC,IAEvDA,MAAM,CAACe,OAAO,EAAA;AAAAZ,kBAAAA,SAAA,CAAAtB,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;gBAAA,MACT,IAAI8B,KAAK,CAACX,MAAM,CAACP,KAAK,IAAI,4CAA4C,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAGjF;gBACA,IAAI,CAACpC,MAAM,CAACV,KAAK,GAAGqD,MAAM,CAACgB,IAAI,CAACrE,KAAK,CAAA;gBACrC,IAAI,CAACU,MAAM,CAACnC,MAAM,GAAG8E,MAAM,CAACgB,IAAI,CAACC,OAAO,CAAA;;AAExC;gBACMhB,YAAY,GAAG,IAAI,CAACiB,iBAAiB,CAAClB,MAAM,CAACgB,IAAI,CAACrE,KAAK,CAAC,CAAA;AAAA,gBAAA,IAAA,CAC1DsD,YAAY,EAAA;AAAAE,kBAAAA,SAAA,CAAAtB,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AACZ,gBAAA,IAAI,CAACxB,MAAM,CAACjC,QAAQ,GAAG6E,YAAY,CAACkB,SAAS,CAAA;AAC7C,gBAAA,IAAI,CAAC9D,MAAM,CAAChC,QAAQ,GAAG4E,YAAY,CAACmB,SAAS,CAAA;AAACjB,gBAAAA,SAAA,CAAAtB,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;AAAA,gBAAA,MAExC,IAAI8B,KAAK,CAAC,yCAAyC,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBAG9D,IAAI,CAACtD,MAAM,CAACgE,SAAS,GAAGrB,MAAM,CAACgB,IAAI,CAACM,UAAU,CAAA;gBAC9C,IAAI,CAACjE,MAAM,CAACkE,WAAW,GAAGvB,MAAM,CAACgB,IAAI,CAACQ,YAAY,CAAA;AAClD,gBAAA,IAAI,CAACnE,MAAM,CAACoE,YAAY,GAAG,CAAC,CAAA;AAE5B,gBAAA,IAAI,CAACtC,gBAAgB,CAAC,qBAAqB,EAAE;AACzCkC,kBAAAA,SAAS,EAAErB,MAAM,CAACgB,IAAI,CAACM,UAAU;AACjCC,kBAAAA,WAAW,EAAEvB,MAAM,CAACgB,IAAI,CAACQ,YAAAA;AAC7B,iBAAC,CAAC,CAAA;AAEFzC,gBAAAA,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC,CAAA;AAACmB,gBAAAA,SAAA,CAAAtB,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;AAAAsB,gBAAAA,SAAA,CAAAvB,CAAA,GAAA,CAAA,CAAA;gBAAAsB,GAAA,GAAAC,SAAA,CAAAX,CAAA,CAAA;AAGlD,gBAAA,IAAI,CAACL,gBAAgB,CAAC,mBAAmB,EAAE;kBAAEM,KAAK,EAAES,GAAA,CAAMR,OAAAA;AAAQ,iBAAC,CAAC,CAAA;gBAAC,MAC/D,IAAIiB,KAAK,CAAAC,gDAAAA,CAAAA,MAAA,CAAyCV,GAAA,CAAMR,OAAO,CAAE,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,OAAAS,SAAA,CAAAlB,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAY,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;SAE/E,CAAA,CAAA,CAAA;AAAA,QAAA,SA3DKxD,UAAUA,GAAA;AAAA,UAAA,OAAAuD,WAAA,CAAAD,KAAA,CAAA,IAAA,EAAArC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAVjB,UAAU,CAAA;AAAA,OAAA,EAAA;AA6DhB;AACR;AACA;AAFQ,OAAA;AAAA,KAAA,EAAA;MAAA6B,GAAA,EAAA,mBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAA+C,iBAAiBA,CAACvE,KAAK,EAAE;QACrB,IAAI;AACA,UAAA,IAAM+E,KAAK,GAAG/E,KAAK,CAACgF,KAAK,CAAC,GAAG,CAAC,CAAA;AAC9B,UAAA,IAAID,KAAK,CAACnE,MAAM,KAAK,CAAC,EAAE;AACpBwB,YAAAA,OAAO,CAACU,KAAK,CAAC,4BAA4B,CAAC,CAAA;AAC3C,YAAA,OAAO,IAAI,CAAA;AACf,WAAA;AAEA,UAAA,IAAAmC,MAAA,GAAAC,cAAA,CAA6BH,KAAK,EAAA,CAAA,CAAA;AAA3BI,YAAAA,OAAO,GAAAF,MAAA,CAAA,CAAA,CAAA;AAAEG,YAAAA,SAAS,GAAAH,MAAA,CAAA,CAAA,CAAA,CAAA;;AAEzB;AACA,UAAA,IAAMI,cAAc,GAAGC,IAAI,CAACH,OAAO,CAAC,CAAA;AACpC,UAAA,IAAMI,SAAS,GAAG1B,IAAI,CAAC2B,KAAK,CAACH,cAAc,CAAC,CAAA;;AAE5C;AACA,UAAA,IAAIE,SAAS,CAACE,GAAG,IAAIF,SAAS,CAACE,GAAG,GAAGC,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,EAAE;AACpDvD,YAAAA,OAAO,CAACU,KAAK,CAAC,gBAAgB,CAAC,CAAA;AAC/B,YAAA,OAAO,IAAI,CAAA;AACf,WAAA;AAEAV,UAAAA,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC,CAAA;AACzC,UAAA,OAAOkD,SAAS,CAAA;SAEnB,CAAC,OAAOzC,KAAK,EAAE;AACZV,UAAAA,OAAO,CAACU,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC,CAAA;AAChD,UAAA,OAAO,IAAI,CAAA;AACf,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAvB,GAAA,EAAA,eAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAoB,aAAaA,GAAG;AAAA,QAAA,IAAAgD,KAAA,GAAA,IAAA,CAAA;QACZ,IAAI;AACA;AACA,UAAA,IAAI,OAAOC,EAAE,KAAK,WAAW,EAAE;AAC3BzD,YAAAA,OAAO,CAAC0D,IAAI,CAAC,kEAAkE,CAAC,CAAA;AAChF;AACAC,YAAAA,UAAU,CAAC,YAAA;AAAA,cAAA,OAAMH,KAAI,CAAChD,aAAa,EAAE,CAAA;AAAA,aAAA,EAAE,IAAI,CAAC,CAAA;AAC5C,YAAA,OAAA;AACJ,WAAA;;AAEA;AACA,UAAA,IAAMoD,EAAE,GAAG,IAAI,CAACC,WAAW,EAAE,CAAA;;AAE7B;AACA,UAAA,IAAI,CAAC,IAAI,CAAC9E,MAAM,EAAE;AACdiB,YAAAA,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC,CAAA;AAE7C,YAAA,IAAI,CAAClB,MAAM,GAAG0E,EAAE,CAAC,gCAAgC,EAAE;AAC/CK,cAAAA,KAAK,EAAE;AACHlG,gBAAAA,KAAK,EAAE,IAAI,CAACU,MAAM,CAACjC,QAAQ;AAC3BE,gBAAAA,IAAI,EAAE,KAAK;AACXwH,gBAAAA,MAAM,EAAE,IAAI,CAACzF,MAAM,CAACjC,QAAQ;AAC5B2H,gBAAAA,QAAQ,EAAEJ,EAAAA;eACb;AACDK,cAAAA,UAAU,EAAE,CAAC,WAAW,EAAE,SAAS,CAAA;AACvC,aAAC,CAAC,CAAA;;AAEF;AACA,YAAA,IAAI,CAAClF,MAAM,CAACmF,EAAE,CAAC,SAAS,EAAE,YAAM;AAC5BlE,cAAAA,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC,CAAA;cAChDD,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEuD,KAAI,CAACzE,MAAM,CAACoF,EAAE,CAAC,CAAA;AAC5CX,cAAAA,KAAI,CAACzE,MAAM,CAACqF,SAAS,GAAG,IAAI,CAAA;AAChC,aAAC,CAAC,CAAA;YAEF,IAAI,CAACrF,MAAM,CAACmF,EAAE,CAAC,YAAY,EAAE,UAACG,MAAM,EAAK;AACrCrE,cAAAA,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEoE,MAAM,CAAC,CAAA;AAC9Cb,cAAAA,KAAI,CAACzE,MAAM,CAACqF,SAAS,GAAG,KAAK,CAAA;AACjC,aAAC,CAAC,CAAA;YAEF,IAAI,CAACrF,MAAM,CAACmF,EAAE,CAAC,eAAe,EAAE,UAACxD,KAAK,EAAK;AACvCV,cAAAA,OAAO,CAACU,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC,CAAA;AACrD8C,cAAAA,KAAI,CAACzE,MAAM,CAACqF,SAAS,GAAG,KAAK,CAAA;AACjC,aAAC,CAAC,CAAA;;AAEF;YACA,IAAI,CAACrF,MAAM,CAACmF,EAAE,CAAC,kBAAkB,EAAE,UAACjC,IAAI,EAAK;AACzCjC,cAAAA,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEgC,IAAI,CAAC,CAAA;AACpDuB,cAAAA,KAAI,CAACc,oBAAoB,CAACrC,IAAI,CAAC,CAAA;AACnC,aAAC,CAAC,CAAA;YAEF,IAAI,CAAClD,MAAM,CAACmF,EAAE,CAAC,iBAAiB,EAAE,UAACjC,IAAI,EAAK;AACxCjC,cAAAA,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEgC,IAAI,CAAC,CAAA;AAC3CuB,cAAAA,KAAI,CAACe,mBAAmB,CAACtC,IAAI,CAAC,CAAA;AAClC,aAAC,CAAC,CAAA;YAEF,IAAI,CAAClD,MAAM,CAACmF,EAAE,CAAC,YAAY,EAAE,UAACjC,IAAI,EAAK;AACnCjC,cAAAA,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEgC,IAAI,CAAC,CAAA;AACtCuB,cAAAA,KAAI,CAACgB,eAAe,CAACvC,IAAI,CAAC,CAAA;AAC9B,aAAC,CAAC,CAAA;;AAEF;YACA,IAAI,CAAClD,MAAM,CAACmF,EAAE,CAAC,mBAAmB,EAAE,UAACjC,IAAI,EAAK;AAC1CjC,cAAAA,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEgC,IAAI,CAAC,CAAA;cAC/CuB,KAAI,CAACiB,YAAY,EAAE,CAAA;AACvB,aAAC,CAAC,CAAA;;AAEF;YACA,IAAI,CAAC1F,MAAM,CAACmF,EAAE,CAAC,SAAS,EAAE,UAACjC,IAAI,EAAK;AAChCjC,cAAAA,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEgC,IAAI,CAAC,CAAA;AAC5C,cAAA,IAAIA,IAAI,IAAIA,IAAI,CAAC1F,IAAI,KAAK,mBAAmB,EAAE;AAC3CyD,gBAAAA,OAAO,CAACC,GAAG,CAAC,4CAA4C,EAAEgC,IAAI,CAAC,CAAA;gBAC/DuB,KAAI,CAACiB,YAAY,EAAE,CAAA;AACvB,eAAA;AACJ,aAAC,CAAC,CAAA;;AAEF;AACA,YAAA,IAAI,CAAC1F,MAAM,CAAC2F,KAAK,GAAG,IAAI,CAAC3F,MAAM,CAAC2F,KAAK,IAAI,UAASC,SAAS,EAAEC,QAAQ,EAAE;AACnE;cACA5E,OAAO,CAACC,GAAG,CAAA4B,6BAAAA,CAAAA,MAAA,CAAqB8C,SAAS,EAAA,IAAA,CAAA,EAAMC,QAAQ,CAAC,CAAA;aAC3D,CAAA;;AAED;AACA,YAAA,IAAI,CAAC7F,MAAM,CAAC2F,KAAK,CAAC,UAACC,SAAS,EAAc;cAAA,KAAAE,IAAAA,IAAA,GAAAtG,SAAA,CAAAC,MAAA,EAATsG,IAAI,OAAAC,KAAA,CAAAF,IAAA,GAAAA,CAAAA,GAAAA,IAAA,WAAAG,IAAA,GAAA,CAAA,EAAAA,IAAA,GAAAH,IAAA,EAAAG,IAAA,EAAA,EAAA;AAAJF,gBAAAA,IAAI,CAAAE,IAAA,GAAAzG,CAAAA,CAAAA,GAAAA,SAAA,CAAAyG,IAAA,CAAA,CAAA;AAAA,eAAA;cACjChF,OAAO,CAACC,GAAG,CAAA4B,6BAAAA,CAAAA,MAAA,CAAqB8C,SAAS,EAAA,IAAA,CAAA,EAAMG,IAAI,CAAC,CAAA;AACxD,aAAC,CAAC,CAAA;AACN,WAAC,MAAM;AACH9E,YAAAA,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC,CAAA;AAC7C,WAAA;SACH,CAAC,OAAOS,KAAK,EAAE;AACZV,UAAAA,OAAO,CAACU,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC,CAAA;AAC9D,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAvB,GAAA,EAAA,aAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAyE,WAAWA,GAAG;AACV;AACA,QAAA,OAAO,WAAW,CAAA;AACtB,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAA1E,GAAA,EAAA,aAAA;AAAAC,MAAAA,KAAA,EAGA,SAAA6F,WAAWA,CAAC1I,IAAI,EAAE;AACd,QAAA,QAAOA,IAAI;AACP,UAAA,KAAK,CAAC;AAAE,YAAA,OAAO,KAAK,CAAA;AACpB,UAAA,KAAK,CAAC;AAAE,YAAA,OAAO,MAAM,CAAA;AACrB,UAAA,KAAK,CAAC;AAAE,YAAA,OAAO,WAAW,CAAA;AAC1B,UAAA;YAAS,OAAAsF,OAAAA,CAAAA,MAAA,CAAetF,IAAI,CAAA,CAAA;AAChC,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAA4C,GAAA,EAAA,wBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAe,sBAAsBA,GAAG;QACrB,IAAM+E,MAAM,GAAG,EAAE,CAAA;;AAEjB;AACA,QAAA,IAAI,CAAC,IAAI,CAAC5G,MAAM,CAACjC,QAAQ,IAAI,OAAO,IAAI,CAACiC,MAAM,CAACjC,QAAQ,KAAK,QAAQ,EAAE;AACnE6I,UAAAA,MAAM,CAACC,IAAI,CAAC,+BAA+B,CAAC,CAAA;SAC/C,MAAM,IAAI,IAAI,CAAC7G,MAAM,CAACjC,QAAQ,CAACmC,MAAM,GAAG,EAAE,EAAE;AACzC0G,UAAAA,MAAM,CAACC,IAAI,CAAC,qBAAqB,CAAC,CAAA;AACtC,SAAA;;AAEA;AACA,QAAA,IAAI,CAAC,IAAI,CAAC7G,MAAM,CAAChC,QAAQ,IAAI,OAAO,IAAI,CAACgC,MAAM,CAAChC,QAAQ,KAAK,QAAQ,EAAE;AACnE4I,UAAAA,MAAM,CAACC,IAAI,CAAC,+BAA+B,CAAC,CAAA;SAC/C,MAAM,IAAI,IAAI,CAAC7G,MAAM,CAAChC,QAAQ,CAACkC,MAAM,GAAG,EAAE,EAAE;AACzC0G,UAAAA,MAAM,CAACC,IAAI,CAAC,6CAA6C,CAAC,CAAA;AAC9D,SAAA;;AAEA;AACA,QAAA,IAAI,CAAC,IAAI,CAAC7G,MAAM,CAACnC,MAAM,IAAI,CAAC,IAAI,CAACiJ,UAAU,CAAC,IAAI,CAAC9G,MAAM,CAACnC,MAAM,CAAC,EAAE;AAC7D+I,UAAAA,MAAM,CAACC,IAAI,CAAC,iBAAiB,CAAC,CAAA;AAClC,SAAA;;AAEA;AACA,QAAA,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAACzH,QAAQ,CAAC,IAAI,CAACY,MAAM,CAAC/B,IAAI,CAAC,EAAE;AACvC2I,UAAAA,MAAM,CAACC,IAAI,CAAC,qCAAqC,CAAC,CAAA;AACtD,SAAA;AAEA,QAAA,IAAID,MAAM,CAAC1G,MAAM,GAAG,CAAC,EAAE;AACnB,UAAA,IAAI,CAAC4B,gBAAgB,CAAC,kBAAkB,EAAE;AAAE8E,YAAAA,MAAM,EAANA,MAAAA;AAAO,WAAC,CAAC,CAAA;AACrD,UAAA,MAAM,IAAItD,KAAK,CAAAC,6CAAAA,CAAAA,MAAA,CAAsCqD,MAAM,CAACG,IAAI,CAAC,IAAI,CAAC,CAAE,CAAC,CAAA;AAC7E,SAAA;AAEA,QAAA,IAAI,CAACjF,gBAAgB,CAAC,oBAAoB,CAAC,CAAA;AAC/C,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAjB,GAAA,EAAA,YAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAgG,UAAUA,CAACE,MAAM,EAAE;QACf,IAAI;AACA,UAAA,IAAMC,GAAG,GAAG,IAAIC,GAAG,CAACF,MAAM,CAAC,CAAA;UAC3B,OAAOC,GAAG,CAACE,QAAQ,KAAK,QAAQ,IAAIF,GAAG,CAACE,QAAQ,KAAK,OAAO,CAAA;SAC/D,CAAC,OAAOC,CAAC,EAAE;AACR,UAAA,OAAO,KAAK,CAAA;AAChB,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAvG,GAAA,EAAA,kBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAgB,gBAAgBA,CAACuF,KAAK,EAAa;AAAA,QAAA,IAAX1D,IAAI,GAAA1D,SAAA,CAAAC,MAAA,GAAA,CAAA,IAAAD,SAAA,CAAA,CAAA,CAAA,KAAAE,SAAA,GAAAF,SAAA,CAAA,CAAA,CAAA,GAAG,EAAE,CAAA;AAC7B,QAAA,IAAI,CAAC,IAAI,CAACD,MAAM,CAACpB,kBAAkB,EAAE,OAAA;AAErC,QAAA,IAAM0I,WAAW,GAAG;UAChBC,SAAS,EAAE,IAAIvC,IAAI,EAAE,CAACwC,WAAW,EAAE;AACnCH,UAAAA,KAAK,EAAEA,KAAK;AACZ1D,UAAAA,IAAI,EAAEA,IAAI;UACV8D,SAAS,EAAEC,SAAS,CAACD,SAAS;AAC9BR,UAAAA,GAAG,EAAEvJ,MAAM,CAACiK,QAAQ,CAACC,IAAAA;SACxB,CAAA;AAEDlG,QAAAA,OAAO,CAAC0D,IAAI,CAAC,eAAe,EAAEkC,WAAW,CAAC,CAAA;;AAE1C;AACA,QAAA,IAAI,CAAC5J,MAAM,CAACmK,kBAAkB,EAAE;UAC5BnK,MAAM,CAACmK,kBAAkB,GAAG,EAAE,CAAA;AAClC,SAAA;AACAnK,QAAAA,MAAM,CAACmK,kBAAkB,CAAChB,IAAI,CAACS,WAAW,CAAC,CAAA;AAC/C,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAzG,GAAA,EAAA,sBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAkB,oBAAoBA,GAAG;AACnB;QACA,IAAI,CAAChC,MAAM,CAAC8H,gBAAgB,GAAG,IAAI,CAAC9H,MAAM,CAACjC,QAAQ,CAAA;QACnD,IAAI,CAACiC,MAAM,CAAC+H,gBAAgB,GAAG,IAAI,CAAC/H,MAAM,CAAChC,QAAQ,CAAA;;AAEnD;AACA,QAAA,IAAI,IAAI,CAACgC,MAAM,CAACjC,QAAQ,EAAE;AACtB,UAAA,IAAI,CAACiC,MAAM,CAACgI,eAAe,GAAG,IAAI,CAAChI,MAAM,CAACjC,QAAQ,CAACsB,OAAO,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAA;AAC3F,SAAA;AACA,QAAA,IAAI,IAAI,CAACW,MAAM,CAAChC,QAAQ,EAAE;AACtB,UAAA,IAAI,CAACgC,MAAM,CAACiI,eAAe,GAAG,IAAI,CAACjI,MAAM,CAAChC,QAAQ,CAACqB,OAAO,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAA;AAC3F,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAwB,GAAA,EAAA,eAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAoH,aAAaA,CAACC,KAAK,EAAE;AACjB,QAAA,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE,OAAOA,KAAK,CAAA;;AAE3C;QACA,OAAOA,KAAK,CACP9I,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;AAAC,SACrBA,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC;SAC5B+I,IAAI,EAAE,CAAA;AACf,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAvH,GAAA,EAAA,sBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAkF,oBAAoBA,CAACrC,IAAI,EAAE;AACvBjC,QAAAA,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEgC,IAAI,CAAC,CAAA;AACzC,QAAA,IAAI,IAAI,CAAC3D,MAAM,CAACtB,cAAc,EAAE;AAC5B,UAAA,IAAI,CAACsB,MAAM,CAACtB,cAAc,CAACiF,IAAI,CAAC,CAAA;AACpC,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAA9C,GAAA,EAAA,qBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAmF,mBAAmBA,CAACtC,IAAI,EAAE;AACtBjC,QAAAA,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEgC,IAAI,CAAC,CAAA;AACvC,QAAA,IAAI,IAAI,CAAC3D,MAAM,CAACxB,SAAS,EAAE;AACvB,UAAA,IAAI,CAACwB,MAAM,CAACxB,SAAS,CAACmF,IAAI,CAAC,CAAA;AAC/B,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAA9C,GAAA,EAAA,iBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAoF,eAAeA,CAACvC,IAAI,EAAE;AAClBjC,QAAAA,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEgC,IAAI,CAAC,CAAA;AAClC,QAAA,IAAI,IAAI,CAAC3D,MAAM,CAACrB,SAAS,EAAE;AACvB,UAAA,IAAI,CAACqB,MAAM,CAACrB,SAAS,CAACgF,IAAI,CAAC,CAAA;AAC/B,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAA9C,GAAA,EAAA,oBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAuH,kBAAkBA,CAAChB,KAAK,EAAE1D,IAAI,EAAE;QAC5B,IAAI,IAAI,CAAClD,MAAM,IAAI,IAAI,CAACA,MAAM,CAACqF,SAAS,EAAE;UACtC,IAAI,CAACrF,MAAM,CAAC6H,IAAI,CAACjB,KAAK,EAAE1D,IAAI,CAAC,CAAA;UAC7BjC,OAAO,CAACC,GAAG,CAAA4B,kDAAAA,CAAAA,MAAA,CAAiC8D,KAAK,CAAA,EAAI1D,IAAI,CAAC,CAAA;AAC9D,SAAC,MAAM;AACHjC,UAAAA,OAAO,CAAC0D,IAAI,CAAC,gEAAgE,EAAEiC,KAAK,CAAC,CAAA;AACzF,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAxG,GAAA,EAAA,oBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAyH,kBAAkBA,GAAG;AACjB,QAAA,IAAI,CAAC,IAAI,CAAC9H,MAAM,EAAE;AACd,UAAA,OAAO,iBAAiB,CAAA;AAC5B,SAAA;QACA,OAAO,IAAI,CAACA,MAAM,CAACqF,SAAS,GAAG,WAAW,GAAG,cAAc,CAAA;AAC/D,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAjF,GAAA,EAAA,oBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAA0H,kBAAkBA,GAAG;QACjB,IAAI,OAAOrD,EAAE,KAAK,WAAW,IAAI,CAAC,IAAI,CAAC1E,MAAM,EAAE;AAC3CiB,UAAAA,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC,CAAA;UAC3D,IAAI,CAACO,aAAa,EAAE,CAAA;AACxB,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAArB,GAAA,EAAA,YAAA;MAAAC,KAAA,GAAA,YAAA;QAAA,IAAA2H,WAAA,GAAAzH,iBAAA,cAAAC,YAAA,EAAAC,CAAAA,CAAA,CAGA,SAAAwH,QAAA,GAAA;AAAA,UAAA,IAAAC,WAAA;YAAAC,OAAA;YAAAC,gBAAA;YAAAC,QAAA;YAAAC,SAAA;YAAA7K,WAAA;YAAAwE,QAAA;YAAAsG,UAAA;YAAAC,OAAA;AAAAC,YAAAA,MAAA,GAAAjJ,SAAA;YAAAkJ,GAAA;YAAAC,GAAA,CAAA;AAAA,UAAA,OAAAnI,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAAgI,SAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,SAAA,CAAA9H,CAAA,GAAA8H,SAAA,CAAA7H,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAiBmH,WAAW,GAAAO,MAAA,CAAAhJ,MAAA,GAAA,CAAA,IAAAgJ,MAAA,CAAA,CAAA,CAAA,KAAA/I,SAAA,GAAA+I,MAAA,CAAA,CAAA,CAAA,GAAG,qBAAqB,CAAA;AAAEN,gBAAAA,OAAO,GAAAM,MAAA,CAAAhJ,MAAA,GAAAgJ,CAAAA,IAAAA,MAAA,CAAA/I,CAAAA,CAAAA,KAAAA,SAAA,GAAA+I,MAAA,CAAG,CAAA,CAAA,GAAA,EAAE,CAAA;gBAAA,IAE1D,CAAA,IAAI,CAACxI,WAAW,EAAA;AAAA2I,kBAAAA,SAAA,CAAA7H,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAAA6H,gBAAAA,SAAA,CAAA7H,CAAA,GAAA,CAAA,CAAA;gBAAA,OACV,IAAI,CAACd,WAAW,CAAA;AAAA,cAAA,KAAA,CAAA;gBACtB,IAAI,CAACA,WAAW,GAAG,IAAI,CAAA;AAAC,cAAA,KAAA,CAAA;gBAAA,IAGvB,IAAI,CAACF,aAAa,EAAA;AAAA6I,kBAAAA,SAAA,CAAA7H,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAAA,gBAAA,MACb,IAAI8B,KAAK,CAAC,4BAA4B,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAGjD5B,gBAAAA,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEgH,WAAW,CAAC,CAAA;;AAElE;AACAjH,gBAAAA,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC,CAAA;AAAC0H,gBAAAA,SAAA,CAAA9H,CAAA,GAAA,CAAA,CAAA;AAAA8H,gBAAAA,SAAA,CAAA7H,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OAEtB,IAAI,CAAC8H,kBAAkB,CAAC,IAAI,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAtDT,gBAAgB,GAAAQ,SAAA,CAAAlH,CAAA,CAAA;AAAwC;AAC9DT,gBAAAA,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEkH,gBAAgB,CAAC,CAAA;AAACQ,gBAAAA,SAAA,CAAA7H,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;AAAA6H,gBAAAA,SAAA,CAAA9H,CAAA,GAAA,CAAA,CAAA;gBAAA4H,GAAA,GAAAE,SAAA,CAAAlH,CAAA,CAAA;gBAEtDT,OAAO,CAACU,KAAK,CAAC,sBAAsB,EAAE+G,GAAA,CAAgB9G,OAAO,CAAC,CAAA;AAAC,gBAAA,MACzD,IAAIiB,KAAK,CAAC,+DAA+D,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAAA+F,gBAAAA,SAAA,CAAA9H,CAAA,GAAA,CAAA,CAAA;AAIhF;gBACMuH,QAAQ,GAAG,IAAI,CAACrI,MAAM,GAAG,IAAI,CAACA,MAAM,CAACoF,EAAE,GAAG,mBAAmB,CAAA;AAC7DkD,gBAAAA,SAAS,GAAGD,QAAQ,CAAA;AAE1BpH,gBAAAA,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEoH,SAAS,CAAC,CAAA;AAChDrH,gBAAAA,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEmH,QAAQ,CAAC,CAAA;;AAElB;AACV5K,gBAAAA,WAAW,GAAG,IAAI,CAAC8B,MAAM,CAAC9B,WAAW,IAAI,iBAAiB,CAAA;AAAAmL,gBAAAA,SAAA,CAAA7H,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OACzC,IAAI,CAAC+H,WAAW,CAAC,cAAc,EAAAlJ,cAAA,CAAA;AAClDpC,kBAAAA,IAAI,EAAE,IAAI,CAAC+B,MAAM,CAAC/B,IAAI;AACtB0F,kBAAAA,IAAI,EAAEoF,SAAS;AAAE;AACjBS,kBAAAA,KAAK,KAAAjG,MAAA,CAAK,IAAI,CAACoD,WAAW,CAAC,IAAI,CAAC3G,MAAM,CAAC/B,IAAI,CAAC,EAAAsF,GAAAA,CAAAA,CAAAA,MAAA,CAAIrF,WAAW,CAAA;iBACxD0K,EAAAA,OAAO,CACb,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBALIlG,QAAQ,GAAA2G,SAAA,CAAAlH,CAAA,CAAA;gBAAA,IAOdO,CAAAA,QAAQ,CAACgB,OAAO,EAAA;AAAA2F,kBAAAA,SAAA,CAAA7H,CAAA,GAAA,EAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAChB;AACAE,gBAAAA,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEe,QAAQ,CAAC,CAAA;gBACpDhB,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEe,QAAQ,CAACiB,IAAI,CAAC,CAAA;;AAEzD;AACIqF,gBAAAA,UAAU,GAAGtG,QAAQ,CAACiB,IAAI,CAAC8F,SAAS,CAExC;gBACA,IAAIT,UAAU,IAAIA,UAAU,CAACU,UAAU,CAAC,GAAG,CAAC,EAAE;AAC1CV,kBAAAA,UAAU,GAAAzF,EAAAA,CAAAA,MAAA,CAAM,IAAI,CAACvD,MAAM,CAACnC,MAAM,CAAA0F,CAAAA,MAAA,CAAGyF,UAAU,CAAE,CAAA;AACrD,iBAAA;;AAEA;AAAA,gBAAA,IACKA,UAAU,EAAA;AAAAK,kBAAAA,SAAA,CAAA7H,CAAA,GAAA,EAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AACXE,gBAAAA,OAAO,CAAC0D,IAAI,CAAC,uEAAuE,CAAC,CAAA;;AAErF;AACA4D,gBAAAA,UAAU,GAAGtG,QAAQ,CAACiB,IAAI,CAACgG,MAAM,IACrBjH,QAAQ,CAACiB,IAAI,CAACiG,KAAK,IACnBlH,QAAQ,CAACiB,IAAI,CAACsD,GAAG,IACjBvE,QAAQ,CAACiB,IAAI,CAACkG,SAAS,IACvBnH,QAAQ,CAACiB,IAAI,CAACmG,QAAQ,CAAA;AAAC,gBAAA,IAAA,CAE/Bd,UAAU,EAAA;AAAAK,kBAAAA,SAAA,CAAA7H,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AACVE,gBAAAA,OAAO,CAACC,GAAG,CAAC,4CAA4C,EAAEqH,UAAU,CAAC,CAAA;AAACK,gBAAAA,SAAA,CAAA7H,CAAA,GAAA,EAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;AAEtEE,gBAAAA,OAAO,CAACU,KAAK,CAAC,yCAAyC,CAAC,CAAA;AAAC,gBAAA,MACnD,IAAIkB,KAAK,CAAC,gDAAgD,CAAC,CAAA;AAAA,cAAA,KAAA,EAAA;gBAIzE,IAAI,CAACyG,YAAY,GAAGf,UAAU,CAAA;AAE9BtH,gBAAAA,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEqH,UAAU,CAAC,CAAA;AAC/DtH,gBAAAA,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEoH,SAAS,CAAC,CAAA;AAC9CrH,gBAAAA,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEe,QAAQ,CAACiB,IAAI,CAAC6F,KAAK,IAAI,KAAK,CAAC,CAAA;AAC1D9H,gBAAAA,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEe,QAAQ,CAACiB,IAAI,CAACqG,SAAS,IAAI,KAAK,CAAC,CAAA;;AAE/D;AACA,gBAAA,IAAI,CAACC,aAAa,CAACtB,WAAW,EAAEK,UAAU,EAAE,IAAI,CAAChJ,MAAM,CAAC/B,IAAI,EAAE2K,OAAO,CAAC,CAAA;AAEtE,gBAAA,IAAI,CAACsB,gBAAgB,CAACvB,WAAW,EAAE,IAAI,CAAC3I,MAAM,CAAC/B,IAAI,EAAE2K,OAAO,CAAC,CAAA;;AAE7D;AACA,gBAAA,IAAI,CAACP,kBAAkB,CAAC,cAAc,EAAE;AACpCpK,kBAAAA,IAAI,EAAE,IAAI,CAAC+B,MAAM,CAAC/B,IAAI;AACtBwL,kBAAAA,SAAS,EAAET,UAAU;AACrBF,kBAAAA,QAAQ,EAAEA,QAAQ;AAClBC,kBAAAA,SAAS,EAAEA,SAAS;AACpBS,kBAAAA,KAAK,EAAE9G,QAAQ,CAACiB,IAAI,CAAC6F,KAAK;AAC1BQ,kBAAAA,SAAS,EAAEtH,QAAQ,CAACiB,IAAI,CAACqG,SAAS;AAClCzC,kBAAAA,SAAS,EAAEvC,IAAI,CAACC,GAAG,EAAC;AACxB,iBAAC,CAAC,CAAA;gBAAC,OAAAoE,SAAA,CAAAzH,CAAA,CAAAvB,CAAAA,EAAAA,cAAA,CAAAA,cAAA,CAAA,EAAA,EAGIqC,QAAQ,CAACiB,IAAI,CAAA,EAAA,EAAA,EAAA;AAChB8F,kBAAAA,SAAS,EAAET,UAAU;AACrBD,kBAAAA,SAAS,EAAEA,SAAS;AACpBS,kBAAAA,KAAK,EAAE9G,QAAQ,CAACiB,IAAI,CAAC6F,KAAK;AAC1BQ,kBAAAA,SAAS,EAAEtH,QAAQ,CAACiB,IAAI,CAACqG,SAAAA;AAAS,iBAAA,CAAA,CAAA,CAAA;AAAA,cAAA,KAAA,EAAA;gBAAA,MAGhC,IAAI1G,KAAK,CAACZ,QAAQ,CAACL,OAAO,IAAI,yCAAyC,CAAC,CAAA;AAAA,cAAA,KAAA,EAAA;AAAAgH,gBAAAA,SAAA,CAAA7H,CAAA,GAAA,EAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,EAAA;AAAA6H,gBAAAA,SAAA,CAAA9H,CAAA,GAAA,EAAA,CAAA;gBAAA6H,GAAA,GAAAC,SAAA,CAAAlH,CAAA,CAAA;gBAGlFT,OAAO,CAACU,KAAK,CAAC,sBAAsB,EAAEgH,GAAA,CAAM/G,OAAO,CAAC,CAAA;gBACpDX,OAAO,CAACU,KAAK,CAAC,sBAAsB,EAAEgH,GAAA,CAAMe,KAAK,CAAC,CAAA;AAClDzI,gBAAAA,OAAO,CAACU,KAAK,CAAC,oBAAoB,EAAE;AAChCvE,kBAAAA,MAAM,EAAE,IAAI,CAACmC,MAAM,CAACnC,MAAM;AAC1BI,kBAAAA,IAAI,EAAE,IAAI,CAAC+B,MAAM,CAAC/B,IAAI;AACtBe,kBAAAA,UAAU,EAAE,IAAI,CAACgB,MAAM,CAAChB,UAAU;kBAClCjB,QAAQ,EAAE,IAAI,CAACiC,MAAM,CAACjC,QAAQ,GAAG,KAAK,GAAG,IAAI,CAACiC,MAAM,CAACjC,QAAQ,CAACkE,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM;kBAChFjE,QAAQ,EAAE,IAAI,CAACgC,MAAM,CAAChC,QAAQ,GAAG,KAAK,GAAG,IAAI,CAACgC,MAAM,CAAChC,QAAQ,CAACiE,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,MAAA;AAC9E,iBAAC,CAAC,CAAA;;AAEF;AACA,gBAAA,IAAI,IAAI,CAACjC,MAAM,CAACR,gBAAgB,EAAE;AAC9BkC,kBAAAA,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC,CAAA;kBAChDD,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEjE,MAAM,CAACiK,QAAQ,CAACyC,QAAQ,CAAC,CAAA;kBACrD1I,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEjE,MAAM,CAACiK,QAAQ,CAACR,QAAQ,CAAC,CAAA;kBACrDzF,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEjE,MAAM,CAACiK,QAAQ,CAACC,IAAI,CAAC,CAAA;kBAE/CqB,OAAO,GAAGvL,MAAM,CAACiK,QAAQ,CAACyC,QAAQ,KAAK,WAAW,IACzC1M,MAAM,CAACiK,QAAQ,CAACyC,QAAQ,KAAK,WAAW,IACxC1M,MAAM,CAACiK,QAAQ,CAACR,QAAQ,KAAK,OAAO,CAAA;AAEnDzF,kBAAAA,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEsH,OAAO,CAAC,CAAA;AAErC,kBAAA,IAAIA,OAAO,EAAE;AACTvH,oBAAAA,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC,CAAA;AAC7DD,oBAAAA,OAAO,CAACC,GAAG,CAAC,0EAA0E,CAAC,CAAA;AAC3F,mBAAC,MAAM;AACHD,oBAAAA,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC,CAAA;AAClD,mBAAA;AACJ,iBAAC,MAAM;AACHD,kBAAAA,OAAO,CAACC,GAAG,CAAC,qEAAqE,CAAC,CAAA;AACtF,iBAAA;gBAEAD,OAAO,CAACC,GAAG,CAAC,0DAA0D,GAAG,IAAI,CAAC3B,MAAM,CAAC/B,IAAI,CAAC,CAAA;gBAC1F,IAAI,CAACoM,yBAAyB,CAAC1B,WAAW,EAAE,IAAI,CAAC3I,MAAM,CAAC/B,IAAI,CAAC,CAAA;AAAC,gBAAA,MACxD,IAAIqF,KAAK,CAAC,wBAAwB,CAAC,CAAA;AAAA,cAAA,KAAA,EAAA;gBAAA,OAAA+F,SAAA,CAAAzH,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAA8G,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;SAEhD,CAAA,CAAA,CAAA;AAAA,QAAA,SA/IK4B,UAAUA,GAAA;AAAA,UAAA,OAAA7B,WAAA,CAAAnG,KAAA,CAAA,IAAA,EAAArC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAVqK,UAAU,CAAA;AAAA,OAAA,EAAA;AAmJhB;AACR;AACA;AAFQ,OAAA;AAAA,KAAA,EAAA;MAAAzJ,GAAA,EAAA,kBAAA;MAAAC,KAAA,GAAA,YAAA;AAAA,QAAA,IAAAyJ,iBAAA,GAAAvJ,iBAAA,cAAAC,YAAA,EAAA,CAAAC,CAAA,CAGA,SAAAsJ,QAAAA,CAAuB7B,WAAW,EAAE1K,IAAI,EAAA;AAAA,UAAA,IAAA2K,OAAA;YAAAlG,QAAA;YAAA+H,YAAA;YAAAzB,UAAA;AAAA0B,YAAAA,MAAA,GAAAzK,SAAA;YAAA0K,GAAA,CAAA;AAAA,UAAA,OAAA1J,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAAuJ,SAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,SAAA,CAAArJ,CAAA,GAAAqJ,SAAA,CAAApJ,CAAA;AAAA,cAAA,KAAA,CAAA;AAAEoH,gBAAAA,OAAO,GAAA8B,MAAA,CAAAxK,MAAA,GAAAwK,CAAAA,IAAAA,MAAA,CAAAvK,CAAAA,CAAAA,KAAAA,SAAA,GAAAuK,MAAA,CAAG,CAAA,CAAA,GAAA,EAAE,CAAA;gBAAA,IAE9C,CAAA,IAAI,CAAChK,WAAW,EAAA;AAAAkK,kBAAAA,SAAA,CAAApJ,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAAAoJ,gBAAAA,SAAA,CAAApJ,CAAA,GAAA,CAAA,CAAA;gBAAA,OACV,IAAI,CAACd,WAAW,CAAA;AAAA,cAAA,KAAA,CAAA;gBACtB,IAAI,CAACA,WAAW,GAAG,IAAI,CAAA;AAAC,cAAA,KAAA,CAAA;gBAAA,IAGvB,IAAI,CAACF,aAAa,EAAA;AAAAoK,kBAAAA,SAAA,CAAApJ,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAAA,gBAAA,MACb,IAAI8B,KAAK,CAAC,4BAA4B,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAsH,gBAAAA,SAAA,CAAArJ,CAAA,GAAA,CAAA,CAAA;AAAAqJ,gBAAAA,SAAA,CAAApJ,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OAItB,IAAI,CAAC+H,WAAW,CAAC,cAAc,EAAAlJ,cAAA,CAAA;AAClDpC,kBAAAA,IAAI,EAAEA,IAAAA;iBACH2K,EAAAA,OAAO,CACb,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBAHIlG,QAAQ,GAAAkI,SAAA,CAAAzI,CAAA,CAAA;gBAAA,IAKVO,CAAAA,QAAQ,CAACgB,OAAO,EAAA;AAAAkH,kBAAAA,SAAA,CAAApJ,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAChB;AACMiJ,gBAAAA,YAAY,GAAG,yBAAyB,CAAA;gBACxCzB,UAAU,GAAA,EAAA,CAAAzF,MAAA,CAAMkH,YAAY,CAAA,CAAAlH,MAAA,CAAGb,QAAQ,CAACiB,IAAI,CAACkH,MAAM,CAAA,CAAA;gBACzD,IAAI,CAACZ,aAAa,CAACtB,WAAW,EAAEK,UAAU,EAAE/K,IAAI,EAAE2K,OAAO,CAAC,CAAA;;AAE1D;AACAlH,gBAAAA,OAAO,CAACC,GAAG,CAAC,mDAAmD,EAAEqH,UAAU,CAAC,CAAA;gBAC5EtH,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEe,QAAQ,CAACiB,IAAI,CAACmH,IAAI,CAAC,CAAA;gBACtDpJ,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEe,QAAQ,CAACiB,IAAI,CAACoH,UAAU,CAAC,CAAA;gBAEvD,IAAI,CAACb,gBAAgB,CAACvB,WAAW,EAAE1K,IAAI,EAAE2K,OAAO,CAAC,CAAA;gBAAC,OAAAgC,SAAA,CAAAhJ,CAAA,CAAAvB,CAAAA,EAAAA,cAAA,CAAAA,cAAA,CAAA,EAAA,EAE3CqC,QAAQ,CAACiB,IAAI,CAAA,EAAA,EAAA,EAAA;AAChB8F,kBAAAA,SAAS,EAAET,UAAU;AACrBgB,kBAAAA,SAAS,EAAEtH,QAAQ,CAACiB,IAAI,CAACoH,UAAAA;AAAU,iBAAA,CAAA,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,MAGjC,IAAIzH,KAAK,CAACZ,QAAQ,CAACL,OAAO,IAAI,yCAAyC,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAuI,gBAAAA,SAAA,CAAApJ,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;AAAAoJ,gBAAAA,SAAA,CAAArJ,CAAA,GAAA,CAAA,CAAA;gBAAAoJ,GAAA,GAAAC,SAAA,CAAAzI,CAAA,CAAA;gBAGlFT,OAAO,CAACU,KAAK,CAAC,sBAAsB,EAAEuI,GAAA,CAAMtI,OAAO,CAAC,CAAA;gBACpDX,OAAO,CAACU,KAAK,CAAC,sBAAsB,EAAEuI,GAAA,CAAMR,KAAK,CAAC,CAAA;AAClDzI,gBAAAA,OAAO,CAACU,KAAK,CAAC,6BAA6B,EAAE;AACzCvE,kBAAAA,MAAM,EAAE,IAAI,CAACmC,MAAM,CAACnC,MAAM;AAC1BI,kBAAAA,IAAI,EAAEA,IAAI;AACVe,kBAAAA,UAAU,EAAE,IAAI,CAACgB,MAAM,CAAChB,UAAU;kBAClCjB,QAAQ,EAAE,IAAI,CAACiC,MAAM,CAACjC,QAAQ,GAAG,KAAK,GAAG,IAAI,CAACiC,MAAM,CAACjC,QAAQ,CAACkE,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM;kBAChFjE,QAAQ,EAAE,IAAI,CAACgC,MAAM,CAAChC,QAAQ,GAAG,KAAK,GAAG,IAAI,CAACgC,MAAM,CAAChC,QAAQ,CAACiE,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,MAAA;AAC9E,iBAAC,CAAC,CAAA;AACFP,gBAAAA,OAAO,CAACC,GAAG,CAAC,0DAA0D,GAAG1D,IAAI,CAAC,CAAA;AAC9E,gBAAA,IAAI,CAACoM,yBAAyB,CAAC1B,WAAW,EAAE1K,IAAI,CAAC,CAAA;AAAC,gBAAA,MAC5C,IAAIqF,KAAK,CAAC,wBAAwB,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,OAAAsH,SAAA,CAAAhJ,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAA4I,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;SAEhD,CAAA,CAAA,CAAA;AAAA,QAAA,SAnDKQ,gBAAgBA,CAAAC,EAAA,EAAAC,GAAA,EAAA;AAAA,UAAA,OAAAX,iBAAA,CAAAjI,KAAA,CAAA,IAAA,EAAArC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAhB+K,gBAAgB,CAAA;OAqDtB,EAAA;AAAA,OAAA;AAAA,KAAA,EAAA;MAAAnK,GAAA,EAAA,gBAAA;MAAAC,KAAA,EAAA,YAAA;QAAA,IAAAqK,eAAA,GAAAnK,iBAAA,cAAAC,YAAA,GAAAC,CAAA,CACA,SAAAkK,QAAAA,CAAqBzC,WAAW,EAAA;AAAA,UAAA,IAAAC,OAAA;AAAAyC,YAAAA,MAAA,GAAApL,SAAA,CAAA;AAAA,UAAA,OAAAgB,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAAiK,SAAA,EAAA;YAAA,OAAAA,CAAAA,EAAAA,QAAAA,SAAA,CAAA9J,CAAA;AAAA,cAAA,KAAA,CAAA;AAAEoH,gBAAAA,OAAO,GAAAyC,MAAA,CAAAnL,MAAA,GAAAmL,CAAAA,IAAAA,MAAA,CAAAlL,CAAAA,CAAAA,KAAAA,SAAA,GAAAkL,MAAA,CAAG,CAAA,CAAA,GAAA,EAAE,CAAA;gBAAA,OAAAC,SAAA,CAAA1J,CAAA,CACnC,CAAA,EAAA,IAAI,CAAC0I,UAAU,CAAC3B,WAAW,EAAEC,OAAO,CAAC,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAwC,QAAA,EAAA,IAAA,CAAA,CAAA;SAC/C,CAAA,CAAA,CAAA;QAAA,SAFKG,cAAcA,CAAAC,GAAA,EAAA;AAAA,UAAA,OAAAL,eAAA,CAAA7I,KAAA,CAAA,IAAA,EAAArC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAdsL,cAAc,CAAA;AAAA,OAAA,EAAA;AAAA,KAAA,EAAA;MAAA1K,GAAA,EAAA,eAAA;MAAAC,KAAA,EAAA,YAAA;QAAA,IAAA2K,cAAA,GAAAzK,iBAAA,cAAAC,YAAA,GAAAC,CAAA,CAIpB,SAAAwK,QAAAA,CAAoB/C,WAAW,EAAA;AAAA,UAAA,IAAAC,OAAA;YAAA+C,YAAA;AAAAC,YAAAA,MAAA,GAAA3L,SAAA,CAAA;AAAA,UAAA,OAAAgB,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAAwK,SAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,SAAA,CAAAtK,CAAA,GAAAsK,SAAA,CAAArK,CAAA;AAAA,cAAA,KAAA,CAAA;AAAEoH,gBAAAA,OAAO,GAAAgD,MAAA,CAAA1L,MAAA,GAAA0L,CAAAA,IAAAA,MAAA,CAAAzL,CAAAA,CAAAA,KAAAA,SAAA,GAAAyL,MAAA,CAAG,CAAA,CAAA,GAAA,EAAE,CAAA;AACzC;AACMD,gBAAAA,YAAY,GAAG,IAAI,CAAC3L,MAAM,CAAC/B,IAAI,CACrC;AACA,gBAAA,IAAI,CAAC+B,MAAM,CAAC/B,IAAI,GAAG,CAAC,CAAA;AAAC4N,gBAAAA,SAAA,CAAAtK,CAAA,GAAA,CAAA,CAAA;AAAAsK,gBAAAA,SAAA,CAAArK,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OAEJ,IAAI,CAAC8I,UAAU,CAAC3B,WAAW,EAAEC,OAAO,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAAA,gBAAA,OAAAiD,SAAA,CAAAjK,CAAA,CAAAiK,CAAAA,EAAAA,SAAA,CAAA1J,CAAA,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;AAAA0J,gBAAAA,SAAA,CAAAtK,CAAA,GAAA,CAAA,CAAA;AAElD;AACA,gBAAA,IAAI,CAACvB,MAAM,CAAC/B,IAAI,GAAG0N,YAAY,CAAA;gBAAC,OAAAE,SAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,OAAAD,SAAA,CAAAjK,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAA8J,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;SAEvC,CAAA,CAAA,CAAA;QAAA,SAXKK,aAAaA,CAAAC,GAAA,EAAA;AAAA,UAAA,OAAAP,cAAA,CAAAnJ,KAAA,CAAA,IAAA,EAAArC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAb8L,aAAa,CAAA;AAAA,OAAA,EAAA;AAAA,KAAA,EAAA;MAAAlL,GAAA,EAAA,qBAAA;MAAAC,KAAA,EAAA,YAAA;QAAA,IAAAmL,oBAAA,GAAAjL,iBAAA,cAAAC,YAAA,GAAAC,CAAA,CAanB,SAAAgL,QAAAA,CAA0BvD,WAAW,EAAA;AAAA,UAAA,IAAAC,OAAA;YAAA+C,YAAA;AAAAQ,YAAAA,MAAA,GAAAlM,SAAA,CAAA;AAAA,UAAA,OAAAgB,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAA+K,SAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,SAAA,CAAA7K,CAAA,GAAA6K,SAAA,CAAA5K,CAAA;AAAA,cAAA,KAAA,CAAA;AAAEoH,gBAAAA,OAAO,GAAAuD,MAAA,CAAAjM,MAAA,GAAAiM,CAAAA,IAAAA,MAAA,CAAAhM,CAAAA,CAAAA,KAAAA,SAAA,GAAAgM,MAAA,CAAG,CAAA,CAAA,GAAA,EAAE,CAAA;AAC/C;AACMR,gBAAAA,YAAY,GAAG,IAAI,CAAC3L,MAAM,CAAC/B,IAAI,CACrC;AACA,gBAAA,IAAI,CAAC+B,MAAM,CAAC/B,IAAI,GAAG,CAAC,CAAA;AAACmO,gBAAAA,SAAA,CAAA7K,CAAA,GAAA,CAAA,CAAA;AAAA6K,gBAAAA,SAAA,CAAA5K,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OAEJ,IAAI,CAAC8I,UAAU,CAAC3B,WAAW,EAAEC,OAAO,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAAA,gBAAA,OAAAwD,SAAA,CAAAxK,CAAA,CAAAwK,CAAAA,EAAAA,SAAA,CAAAjK,CAAA,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAiK,gBAAAA,SAAA,CAAA7K,CAAA,GAAA,CAAA,CAAA;AAElD;AACA,gBAAA,IAAI,CAACvB,MAAM,CAAC/B,IAAI,GAAG0N,YAAY,CAAA;gBAAC,OAAAS,SAAA,CAAAN,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,OAAAM,SAAA,CAAAxK,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAsK,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;SAEvC,CAAA,CAAA,CAAA;QAAA,SAXKG,mBAAmBA,CAAAC,GAAA,EAAA;AAAA,UAAA,OAAAL,oBAAA,CAAA3J,KAAA,CAAA,IAAA,EAAArC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAnBoM,mBAAmB,CAAA;AAAA,OAAA,EAAA;AAazB;AACR;AACA;AAFQ,KAAA,EAAA;MAAAxL,GAAA,EAAA,eAAA;MAAAC,KAAA,GAAA,YAAA;QAAA,IAAAyL,cAAA,GAAAvL,iBAAA,cAAAC,YAAA,GAAAC,CAAA,CAGA,SAAAsL,QAAAA,CAAoBxC,SAAS,EAAA;UAAA,IAAAtH,QAAA,EAAA+J,GAAA,CAAA;AAAA,UAAA,OAAAxL,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAAqL,SAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,SAAA,CAAAnL,CAAA,GAAAmL,SAAA,CAAAlL,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,IACpB,IAAI,CAAChB,aAAa,EAAA;AAAAkM,kBAAAA,SAAA,CAAAlL,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAAA,gBAAA,MACb,IAAI8B,KAAK,CAAC,4BAA4B,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAoJ,gBAAAA,SAAA,CAAAnL,CAAA,GAAA,CAAA,CAAA;AAAAmL,gBAAAA,SAAA,CAAAlL,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OAItB,IAAI,CAAC+H,WAAW,CAAC,YAAY,EAAE;AAClDoD,kBAAAA,SAAS,EAAE3C,SAAAA;AACf,iBAAC,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBAFItH,QAAQ,GAAAgK,SAAA,CAAAvK,CAAA,CAAA;gBAAA,IAIVO,CAAAA,QAAQ,CAACgB,OAAO,EAAA;AAAAgJ,kBAAAA,SAAA,CAAAlL,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAAA,gBAAA,OAAAkL,SAAA,CAAA9K,CAAA,CACTc,CAAAA,EAAAA,QAAQ,CAACiB,IAAI,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,MAEd,IAAIL,KAAK,CAACZ,QAAQ,CAACL,OAAO,IAAI,0CAA0C,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAqK,gBAAAA,SAAA,CAAAlL,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;AAAAkL,gBAAAA,SAAA,CAAAnL,CAAA,GAAA,CAAA,CAAA;gBAAAkL,GAAA,GAAAC,SAAA,CAAAvK,CAAA,CAAA;AAGnF,gBAAA,IAAI,CAACyK,WAAW,CAAAH,GAAM,CAAC,CAAA;AAAC,gBAAA,MAAAA,GAAA,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,OAAAC,SAAA,CAAA9K,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAA4K,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;SAG/B,CAAA,CAAA,CAAA;QAAA,SAnBKK,aAAaA,CAAAC,GAAA,EAAA;AAAA,UAAA,OAAAP,cAAA,CAAAjK,KAAA,CAAA,IAAA,EAAArC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAb4M,aAAa,CAAA;AAAA,OAAA,EAAA;AAqBnB;AACR;AACA;AAFQ,OAAA;AAAA,KAAA,EAAA;MAAAhM,GAAA,EAAA,uBAAA;MAAAC,KAAA,GAAA,YAAA;AAAA,QAAA,IAAAiM,sBAAA,GAAA/L,iBAAA,cAAAC,YAAA,EAAAC,CAAAA,CAAA,CAGA,SAAA8L,QAA4BC,CAAAA,OAAO,EAAEtE,WAAW,EAAE1K,IAAI,EAAA;AAAA,UAAA,IAAA2K,OAAA;YAAAsE,UAAA;AAAAC,YAAAA,MAAA,GAAAlN,SAAA;YAAAmN,GAAA,CAAA;AAAA,UAAA,OAAAnM,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAAgM,SAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,SAAA,CAAA9L,CAAA,GAAA8L,SAAA,CAAA7L,CAAA;AAAA,cAAA,KAAA,CAAA;AAAEoH,gBAAAA,OAAO,GAAAuE,MAAA,CAAAjN,MAAA,GAAAiN,CAAAA,IAAAA,MAAA,CAAAhN,CAAAA,CAAAA,KAAAA,SAAA,GAAAgN,MAAA,CAAG,CAAA,CAAA,GAAA,EAAE,CAAA;AAChEzL,gBAAAA,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEsL,OAAO,CAAC,CAAA;AAACI,gBAAAA,SAAA,CAAA9L,CAAA,GAAA,CAAA,CAAA;gBAAA,IAI/C7D,EAAAA,MAAM,CAACiK,QAAQ,CAACyC,QAAQ,KAAK,WAAW,IACxC1M,MAAM,CAACiK,QAAQ,CAACyC,QAAQ,KAAK,WAAW,IACxC1M,MAAM,CAACiK,QAAQ,CAACR,QAAQ,KAAK,OAAO,CAAA,EAAA;AAAAkG,kBAAAA,SAAA,CAAA7L,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAEpCE,gBAAAA,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC,CAAA;AAAC0L,gBAAAA,SAAA,CAAA7L,CAAA,GAAA,CAAA,CAAA;gBAAA,OACzB,IAAI,CAAC8L,eAAe,CAACL,OAAO,EAAEtE,WAAW,EAAE1K,IAAI,EAAE2K,OAAO,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBAA5EsE,UAAU,GAAAG,SAAA,CAAAlL,CAAA,CAAA;AAAA,gBAAA,IAAA,CACZ+K,UAAU,EAAA;AAAAG,kBAAAA,SAAA,CAAA7L,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAAA,gBAAA,OAAA6L,SAAA,CAAAzL,CAAA,CAAA,CAAA,EACHsL,UAAU,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;AAIzB;AACAxL,gBAAAA,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC,CAAA;AAAC0L,gBAAAA,SAAA,CAAA7L,CAAA,GAAA,CAAA,CAAA;gBAAA,OACvC,IAAI,CAAC+L,gBAAgB,CAACN,OAAO,EAAEtE,WAAW,EAAE1K,IAAI,EAAE2K,OAAO,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAAA,gBAAA,OAAAyE,SAAA,CAAAzL,CAAA,CAAAyL,CAAAA,EAAAA,SAAA,CAAAlL,CAAA,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAkL,gBAAAA,SAAA,CAAA9L,CAAA,GAAA,CAAA,CAAA;gBAAA6L,GAAA,GAAAC,SAAA,CAAAlL,CAAA,CAAA;AAGvET,gBAAAA,OAAO,CAACU,KAAK,CAAC,yBAAyB,EAAAgL,GAAO,CAAC,CAAA;AAC/C;gBACA,IAAI,CAACI,gBAAgB,CAAC7E,WAAW,EAAEsE,OAAO,EAAEhP,IAAI,EAAE2K,OAAO,CAAC,CAAA;AAAC,gBAAA,OAAAyE,SAAA,CAAAzL,CAAA,CAAA,CAAA,EACpD,IAAI,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAoL,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;SAElB,CAAA,CAAA,CAAA;AAAA,QAAA,SA1BKS,qBAAqBA,CAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAA;AAAA,UAAA,OAAAb,sBAAA,CAAAzK,KAAA,CAAA,IAAA,EAAArC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAArBwN,qBAAqB,CAAA;AAAA,OAAA,EAAA;AA4B3B;AACR;AACA;AAFQ,OAAA;AAAA,KAAA,EAAA;MAAA5M,GAAA,EAAA,iBAAA;MAAAC,KAAA,GAAA,YAAA;AAAA,QAAA,IAAA+M,gBAAA,GAAA7M,iBAAA,cAAAC,YAAA,EAAAC,CAAAA,CAAA,CAGA,SAAA4M,QAAsBb,CAAAA,OAAO,EAAEtE,WAAW,EAAE1K,IAAI,EAAA;AAAA,UAAA,IAAA2K,OAAA;YAAAlG,QAAA;YAAAiB,IAAA;YAAAiG,KAAA;AAAAmE,YAAAA,MAAA,GAAA9N,SAAA;YAAA+N,GAAA,CAAA;AAAA,UAAA,OAAA/M,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAA4M,SAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,SAAA,CAAA1M,CAAA,GAAA0M,SAAA,CAAAzM,CAAA;AAAA,cAAA,KAAA,CAAA;AAAEoH,gBAAAA,OAAO,GAAAmF,MAAA,CAAA7N,MAAA,GAAA6N,CAAAA,IAAAA,MAAA,CAAA5N,CAAAA,CAAAA,KAAAA,SAAA,GAAA4N,MAAA,CAAG,CAAA,CAAA,GAAA,EAAE,CAAA;AAAAE,gBAAAA,SAAA,CAAA1M,CAAA,GAAA,CAAA,CAAA;AAAA0M,gBAAAA,SAAA,CAAAzM,CAAA,GAAA,CAAA,CAAA;gBAAA,OAE/BuB,KAAK,CAAC,yCAAyC,EAAE;AACpEC,kBAAAA,MAAM,EAAE,MAAM;AACdC,kBAAAA,OAAO,EAAE;AACL,oBAAA,cAAc,EAAE,mCAAA;mBACnB;AACDC,kBAAAA,IAAI,UAAAK,MAAA,CAAU2K,kBAAkB,CAACjB,OAAO,CAAC,EAAA,WAAA,CAAA;AAC7C,iBAAC,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBANIvK,QAAQ,GAAAuL,SAAA,CAAA9L,CAAA,CAAA;gBAAA,IAQVO,CAAAA,QAAQ,CAACW,EAAE,EAAA;AAAA4K,kBAAAA,SAAA,CAAAzM,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAAAyM,gBAAAA,SAAA,CAAAzM,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OACQkB,QAAQ,CAACe,IAAI,EAAE,CAAA;AAAA,cAAA,KAAA,CAAA;gBAA5BE,IAAI,GAAAsK,SAAA,CAAA9L,CAAA,CAAA;AACJyH,gBAAAA,KAAK,GAAArG,wBAAAA,CAAAA,MAAA,CAA4BI,IAAI,CAACkH,MAAM,CAAA,CAAA;gBAClD,IAAI,CAACZ,aAAa,CAACtB,WAAW,EAAEiB,KAAK,EAAE3L,IAAI,EAAE2K,OAAO,CAAC,CAAA;AAAC,gBAAA,OAAAqF,SAAA,CAAArM,CAAA,CAAA,CAAA,EAC/CgI,KAAK,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAqE,gBAAAA,SAAA,CAAAzM,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;AAAAyM,gBAAAA,SAAA,CAAA1M,CAAA,GAAA,CAAA,CAAA;gBAAAyM,GAAA,GAAAC,SAAA,CAAA9L,CAAA,CAAA;gBAGhBT,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEqM,GAAA,CAAM3L,OAAO,CAAC,CAAA;AAAC,cAAA,KAAA,CAAA;AAAA,gBAAA,OAAA4L,SAAA,CAAArM,CAAA,CAAA,CAAA,EAE9D,IAAI,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAkM,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;SACd,CAAA,CAAA,CAAA;AAAA,QAAA,SApBKR,eAAeA,CAAAa,GAAA,EAAAC,GAAA,EAAAC,IAAA,EAAA;AAAA,UAAA,OAAAR,gBAAA,CAAAvL,KAAA,CAAA,IAAA,EAAArC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAfqN,eAAe,CAAA;AAAA,OAAA,EAAA;AAsBrB;AACR;AACA;AAFQ,OAAA;AAAA,KAAA,EAAA;MAAAzM,GAAA,EAAA,kBAAA;MAAAC,KAAA,GAAA,YAAA;AAAA,QAAA,IAAAwN,iBAAA,GAAAtN,iBAAA,cAAAC,YAAA,EAAAC,CAAAA,CAAA,CAGA,SAAAqN,QAAuBtB,CAAAA,OAAO,EAAEtE,WAAW,EAAE1K,IAAI,EAAA;AAAA,UAAA,IAAA2K,OAAA;YAAAlG,QAAA;YAAAiB,IAAA;YAAAiG,KAAA;AAAA4E,YAAAA,MAAA,GAAAvO,SAAA;YAAAwO,GAAA,CAAA;AAAA,UAAA,OAAAxN,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAAqN,SAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,SAAA,CAAAnN,CAAA,GAAAmN,SAAA,CAAAlN,CAAA;AAAA,cAAA,KAAA,CAAA;AAAEoH,gBAAAA,OAAO,GAAA4F,MAAA,CAAAtO,MAAA,GAAAsO,CAAAA,IAAAA,MAAA,CAAArO,CAAAA,CAAAA,KAAAA,SAAA,GAAAqO,MAAA,CAAG,CAAA,CAAA,GAAA,EAAE,CAAA;AAAAE,gBAAAA,SAAA,CAAAnN,CAAA,GAAA,CAAA,CAAA;AAAAmN,gBAAAA,SAAA,CAAAlN,CAAA,GAAA,CAAA,CAAA;gBAAA,OAEhCuB,KAAK,CAAC,yCAAyC,EAAE;AACpEC,kBAAAA,MAAM,EAAE,MAAM;AACdC,kBAAAA,OAAO,EAAE;AACL,oBAAA,cAAc,EAAE,kBAAA;mBACnB;AACDC,kBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;AACjBuL,oBAAAA,IAAI,EAAE1B,OAAO;AACb2B,oBAAAA,IAAI,EAAE,GAAG;AACT3Q,oBAAAA,IAAI,EAAEA,IAAAA;mBACT,CAAA;AACL,iBAAC,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBAVIyE,QAAQ,GAAAgM,SAAA,CAAAvM,CAAA,CAAA;gBAAA,IAYVO,CAAAA,QAAQ,CAACW,EAAE,EAAA;AAAAqL,kBAAAA,SAAA,CAAAlN,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAAAkN,gBAAAA,SAAA,CAAAlN,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OACQkB,QAAQ,CAACe,IAAI,EAAE,CAAA;AAAA,cAAA,KAAA,CAAA;gBAA5BE,IAAI,GAAA+K,SAAA,CAAAvM,CAAA,CAAA;AACJyH,gBAAAA,KAAK,GAAArG,wBAAAA,CAAAA,MAAA,CAA4BI,IAAI,CAACkH,MAAM,CAAA,CAAA;gBAClD,IAAI,CAACZ,aAAa,CAACtB,WAAW,EAAEiB,KAAK,EAAE3L,IAAI,EAAE2K,OAAO,CAAC,CAAA;AAAC,gBAAA,OAAA8F,SAAA,CAAA9M,CAAA,CAAA,CAAA,EAC/CgI,KAAK,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;AAAA8E,gBAAAA,SAAA,CAAAlN,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;AAAAkN,gBAAAA,SAAA,CAAAnN,CAAA,GAAA,CAAA,CAAA;gBAAAkN,GAAA,GAAAC,SAAA,CAAAvM,CAAA,CAAA;AAGhBT,gBAAAA,OAAO,CAACU,KAAK,CAAC,8BAA8B,EAAAqM,GAAO,CAAC,CAAA;AAAC,cAAA,KAAA,CAAA;AAGzD;gBACA,IAAI,CAACjB,gBAAgB,CAAC7E,WAAW,EAAEsE,OAAO,EAAEhP,IAAI,EAAE2K,OAAO,CAAC,CAAA;AAAC,gBAAA,OAAA8F,SAAA,CAAA9M,CAAA,CAAA,CAAA,EACpD,IAAI,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAA2M,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;SACd,CAAA,CAAA,CAAA;AAAA,QAAA,SA3BKhB,gBAAgBA,CAAAsB,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAA;AAAA,UAAA,OAAAT,iBAAA,CAAAhM,KAAA,CAAA,IAAA,EAAArC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAhBsN,gBAAgB,CAAA;AAAA,OAAA,EAAA;AA6BtB;AACR;AACA;AAFQ,OAAA;AAAA,KAAA,EAAA;MAAA1M,GAAA,EAAA,kBAAA;MAAAC,KAAA,EAGA,SAAA0M,gBAAgBA,CAAC7E,WAAW,EAAEsE,OAAO,EAAEhP,IAAI,EAAgB;AACvD,QAAA,IAAM+Q,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAACvG,WAAW,CAAC,CAAA;QACtD,IAAI,CAACqG,SAAS,EAAE;AACZ,UAAA,MAAM,IAAI1L,KAAK,CAAA,wBAAA,CAAAC,MAAA,CAAyBoF,WAAW,qBAAc,CAAC,CAAA;AACtE,SAAA;AAEA,QAAA,IAAMwG,QAAQ,GAAG,IAAI,CAACxI,WAAW,CAAC1I,IAAI,CAAC,CAAA;QACvC+Q,SAAS,CAACI,SAAS,GAAA,sIAAA,CAAA7L,MAAA,CAGD4L,QAAQ,EAAA5L,oYAAAA,CAAAA,CAAAA,MAAA,CAI+D0J,OAAO,EAM/F,oQAAA,CAAA,CAAA;AAEDvL,QAAAA,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEsL,OAAO,CAAC,CAAA;AACjD,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAApM,GAAA,EAAA,eAAA;MAAAC,KAAA,EAGA,SAAAmJ,aAAaA,CAACtB,WAAW,EAAEiB,KAAK,EAAE3L,IAAI,EAAgB;AAAA,QAAA,IAAd2K,OAAO,GAAA3I,SAAA,CAAAC,MAAA,GAAA,CAAA,IAAAD,SAAA,CAAA,CAAA,CAAA,KAAAE,SAAA,GAAAF,SAAA,CAAA,CAAA,CAAA,GAAG,EAAE,CAAA;AAChD,QAAA,IAAM+O,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAACvG,WAAW,CAAC,CAAA;QACtD,IAAI,CAACqG,SAAS,EAAE;AACZ,UAAA,MAAM,IAAI1L,KAAK,CAAA,wBAAA,CAAAC,MAAA,CAAyBoF,WAAW,qBAAc,CAAC,CAAA;AACtE,SAAA;;AAEA;QACAqG,SAAS,CAACI,SAAS,GAAG,EAAE,CAAA;;AAExB;AACA,QAAA,IAAMC,SAAS,GAAGJ,QAAQ,CAACK,aAAa,CAAC,KAAK,CAAC,CAAA;QAC/CD,SAAS,CAACE,SAAS,GAAG,gBAAgB,CAAA;;AAEtC;AACA,QAAA,IAAMJ,QAAQ,GAAG,IAAI,CAACxI,WAAW,CAAC1I,IAAI,CAAC,CAAA;AACvCoR,QAAAA,SAAS,CAACD,SAAS,GAAA7L,8EAAAA,CAAAA,MAAA,CAELtF,IAAI,KAAK,CAAC,GAAG,kBAAkB,GAAGA,IAAI,KAAK,CAAC,GAAG,kBAAkB,GAAGA,IAAI,KAAK,CAAC,GAAG,WAAW,GAAG,eAAe,GAAGA,IAAI,EAAAsF,iHAAAA,CAAAA,CAAAA,MAAA,CAG/GqG,KAAK,EAAA,mBAAA,CAAA,CAAArG,MAAA,CAAkB4L,QAAQ,EAGlD,sIAAA,CAAA,CAAA;AAEDH,QAAAA,SAAS,CAACQ,WAAW,CAACH,SAAS,CAAC,CAAA;;AAEhC;AACA,QAAA,IAAI,CAACI,UAAU,CAAC7G,OAAO,CAACzK,KAAK,IAAI,IAAI,CAAC6B,MAAM,CAAC7B,KAAK,CAAC,CAAA;AAEnDuD,QAAAA,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEiI,KAAK,CAAC,CAAA;AAC5C,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAA/I,GAAA,EAAA,sBAAA;MAAAC,KAAA,GAAA,YAAA;AAAA,QAAA,IAAA4O,qBAAA,GAAA1O,iBAAA,cAAAC,YAAA,EAAA,CAAAC,CAAA,CAGA,SAAAyO,SAAAA,CAA2B1C,OAAO,EAAEzD,KAAK,EAAA;AAAA,UAAA,IAAAoG,WAAA,CAAA;AAAAC,YAAAC,IAAA;AAAA,UAAA,OAAA7O,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAA0O,UAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,UAAA,CAAAxO,CAAA,GAAAwO,UAAA,CAAAvO,CAAA;AAAA,cAAA,KAAA,CAAA;AACrCE,gBAAAA,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC,CAAA;AACrDD,gBAAAA,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEsL,OAAO,CAAC,CAAA;AACnCvL,gBAAAA,OAAO,CAACC,GAAG,CAAC,YAAY,EAAE6H,KAAK,CAAC,CAAA;;AAEhC;AACIoG,gBAAAA,WAAW,GAAGX,QAAQ,CAACC,cAAc,CAAC,qBAAqB,CAAC,CAAA;gBAChE,IAAI,CAACU,WAAW,EAAE;AACdA,kBAAAA,WAAW,GAAGX,QAAQ,CAACC,cAAc,CAAC,cAAc,CAAC,CAAA;AACzD,iBAAA;AAAC,gBAAA,IACIU,WAAW,EAAA;AAAAG,kBAAAA,UAAA,CAAAvO,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AACZE,gBAAAA,OAAO,CAACU,KAAK,CAAC,0BAA0B,CAAC,CAAA;gBAAC,OAAA2N,UAAA,CAAAnO,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;AAI9CF,gBAAAA,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC,CAAA;;AAEpC;gBACAiO,WAAW,CAACR,SAAS,GAAG,oFAAoF,CAAA;AAACW,gBAAAA,UAAA,CAAAxO,CAAA,GAAA,CAAA,CAAA;AAGxG;AACAG,gBAAAA,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC,CAAA;AAACoO,gBAAAA,UAAA,CAAAvO,CAAA,GAAA,CAAA,CAAA;gBAAA,OACvD,IAAI,CAACwO,aAAa,CAAC/C,OAAO,EAAEzD,KAAK,EAAEoG,WAAW,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AACrDlO,gBAAAA,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC,CAAA;AAACoO,gBAAAA,UAAA,CAAAvO,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;AAAAuO,gBAAAA,UAAA,CAAAxO,CAAA,GAAA,CAAA,CAAA;gBAAAuO,GAAA,GAAAC,UAAA,CAAA5N,CAAA,CAAA;AAG5CT,gBAAAA,OAAO,CAACU,KAAK,CAAC,0BAA0B,EAAA0N,GAAO,CAAC,CAAA;;AAEhD;AACApO,gBAAAA,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC,CAAA;gBAC5C,IAAI,CAACsO,gBAAgB,CAACL,WAAW,EAAE3C,OAAO,EAAEzD,KAAK,CAAC,CAAA;AAAC,cAAA,KAAA,CAAA;gBAAA,OAAAuG,UAAA,CAAAnO,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAA+N,SAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;SAE3D,CAAA,CAAA,CAAA;AAAA,QAAA,SAjCKO,oBAAoBA,CAAAC,IAAA,EAAAC,IAAA,EAAA;AAAA,UAAA,OAAAV,qBAAA,CAAApN,KAAA,CAAA,IAAA,EAAArC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAApBiQ,oBAAoB,CAAA;AAAA,OAAA,EAAA;AAmC1B;AACR;AACA;AAFQ,OAAA;AAAA,KAAA,EAAA;MAAArP,GAAA,EAAA,sBAAA;MAAAC,KAAA,GAAA,YAAA;AAAA,QAAA,IAAAuP,qBAAA,GAAArP,iBAAA,cAAAC,YAAA,EAAAC,CAAAA,CAAA,CAGA,SAAAoP,SAA2BrD,CAAAA,OAAO,EAAEzD,KAAK,EAAEoG,WAAW,EAAA;AAAA,UAAA,IAAAW,MAAA,GAAA,IAAA,CAAA;UAAA,IAAAC,MAAA,EAAAC,GAAA,CAAA;AAAA,UAAA,OAAAxP,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAAqP,UAAA,EAAA;YAAA,OAAAA,CAAAA,EAAAA,QAAAA,UAAA,CAAAlP,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAkP,gBAAAA,UAAA,CAAAlP,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OAE5C,IAAI,CAACmP,mBAAmB,EAAE,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,IAE5B,EAAA,OAAOC,MAAM,KAAK,WAAW,CAAA,EAAA;AAAAF,kBAAAA,UAAA,CAAAlP,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAAA,gBAAA,MACvB,IAAI8B,KAAK,CAAC,+BAA+B,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAGpD;AACMkN,gBAAAA,MAAM,GAAGvB,QAAQ,CAACK,aAAa,CAAC,QAAQ,CAAC,CAAA;gBAC/CkB,MAAM,CAACK,KAAK,GAAG,GAAG,CAAA;gBAClBL,MAAM,CAACM,MAAM,GAAG,GAAG,CAAA;AACbL,gBAAAA,GAAG,GAAGD,MAAM,CAACO,UAAU,CAAC,IAAI,CAAC,CAEnC;gBACAN,GAAG,CAACO,SAAS,GAAG,SAAS,CAAA;gBACzBP,GAAG,CAACQ,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAA;;AAE5B;gBAAA,OAAAP,UAAA,CAAA9O,CAAA,CACO,CAAA,EAAA,IAAIsP,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;AACpCR,kBAAAA,MAAM,CAACS,QAAQ,CAACb,MAAM,EAAEvD,OAAO,EAAE;AAC7B4D,oBAAAA,KAAK,EAAE,GAAG;AACVS,oBAAAA,MAAM,EAAE,EAAE;AACVC,oBAAAA,KAAK,EAAE;AACHC,sBAAAA,IAAI,EAAE,SAAS;AACfC,sBAAAA,KAAK,EAAE,SAAA;AACX,qBAAA;mBACH,EAAE,UAACrP,KAAK,EAAK;AACV,oBAAA,IAAIA,KAAK,EAAE;sBACPgP,MAAM,CAAChP,KAAK,CAAC,CAAA;AACb,sBAAA,OAAA;AACJ,qBAAA;;AAEA;oBACAqO,GAAG,CAACO,SAAS,GAAG,SAAS,CAAA;oBACzBP,GAAG,CAACiB,IAAI,GAAG,iBAAiB,CAAA;oBAC5BjB,GAAG,CAACkB,SAAS,GAAG,QAAQ,CAAA;oBACxBlB,GAAG,CAACmB,QAAQ,CAACpI,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC,CAAA;;AAE7B;AACA,oBAAA,IAAMqI,OAAO,GAAGrB,MAAM,CAACsB,SAAS,CAAC,WAAW,CAAC,CAAA;;AAE7C;oBACAvB,MAAI,CAACxG,YAAY,GAAG8H,OAAO,CAAA;;AAE3B;AACAjC,oBAAAA,WAAW,CAACR,SAAS,GAAA,uHAAA,CAAA7L,MAAA,CAEDsO,OAAO,EAE1B,oJAAA,CAAA,CAAA;;AAED;AACAtB,oBAAAA,MAAI,CAACwB,kBAAkB,CAACnC,WAAW,CAAC,CAAA;AAEpCuB,oBAAAA,OAAO,EAAE,CAAA;AACb,mBAAC,CAAC,CAAA;AACN,iBAAC,CAAC,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAb,SAAA,EAAA,IAAA,CAAA,CAAA;SACL,CAAA,CAAA,CAAA;AAAA,QAAA,SA1DK0B,oBAAoBA,CAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAA;AAAA,UAAA,OAAA9B,qBAAA,CAAA/N,KAAA,CAAA,IAAA,EAAArC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAApB+R,oBAAoB,CAAA;AAAA,OAAA,EAAA;AA4D1B;AACR;AACA;AAFQ,OAAA;AAAA,KAAA,EAAA;MAAAnR,GAAA,EAAA,eAAA;MAAAC,KAAA,GAAA,YAAA;AAAA,QAAA,IAAAsR,cAAA,GAAApR,iBAAA,cAAAC,YAAA,EAAAC,CAAAA,CAAA,CAGA,SAAAmR,SAAoBpF,CAAAA,OAAO,EAAEzD,KAAK,EAAEoG,WAAW,EAAA;AAAA,UAAA,IAAA0C,cAAA,EAAAC,WAAA,EAAAC,WAAA,EAAA9P,QAAA,EAAA+P,YAAA,EAAAzJ,UAAA,EAAAyB,YAAA,CAAA;AAAA,UAAA,OAAAxJ,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAAqR,UAAA,EAAA;YAAA,OAAAA,CAAAA,EAAAA,QAAAA,UAAA,CAAAlR,CAAA;AAAA,cAAA,KAAA,CAAA;AAC9B;;AAEZ,gBAAA,IAAI,IAAI,CAACxB,MAAM,CAACT,iBAAiB,EAAE;AAC/B+S,kBAAAA,cAAc,GAAG,yCAAyC,CAAA;AAC9D,iBAAC,MAAM,IAAI,IAAI,CAACtS,MAAM,CAACnC,MAAM,CAACuB,QAAQ,CAAC,qBAAqB,CAAC,EAAE;AAC3DkT,kBAAAA,cAAc,GAAG,yCAAyC,CAAA;iBAC7D,MAAM,IAAI,IAAI,CAACtS,MAAM,CAACnC,MAAM,CAACuB,QAAQ,CAAC,WAAW,CAAC,IAAI,IAAI,CAACY,MAAM,CAACnC,MAAM,CAACuB,QAAQ,CAAC,WAAW,CAAC,EAAE;AAC7FkT,kBAAAA,cAAc,GAAG,yCAAyC,CAAA;AAC9D,iBAAC,MAAM;AACHA,kBAAAA,cAAc,GAAG,IAAI,CAACtS,MAAM,CAACnC,MAAM,GAAG,cAAc,CAAA;AACxD,iBAAA;AAED6D,gBAAAA,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAE2Q,cAAc,CAAC,CAAA;;AAEtC;;AAIZ,gBAAA,IAAIA,cAAc,CAAClT,QAAQ,CAAC,gBAAgB,CAAC,EAAE;AAC3C;AACAoT,kBAAAA,WAAW,GAAG,mCAAmC,CAAA;kBACjDD,WAAW,GAAG,IAAII,eAAe,CAAC;AAC9BhE,oBAAAA,IAAI,EAAE1B,OAAO;AACb2B,oBAAAA,IAAI,EAAE,GAAG;AACT0C,oBAAAA,MAAM,EAAE,EAAE;AACVsB,oBAAAA,gBAAgB,EAAE,QAAQ;AAC1BC,oBAAAA,gBAAgB,EAAE,QAAA;AACtB,mBAAC,CAAC,CAAA;AACN,iBAAC,MAAM;AACH;AACAL,kBAAAA,WAAW,GAAG,kBAAkB,CAAA;AAChCD,kBAAAA,WAAW,GAAGpP,IAAI,CAACC,SAAS,CAAC;AACzBnF,oBAAAA,IAAI,EAAE,IAAI,CAAC+B,MAAM,CAAC/B,IAAI;AACtB6F,oBAAAA,SAAS,EAAE,IAAI,CAAC9D,MAAM,CAACjC,QAAQ;AAC/BgG,oBAAAA,SAAS,EAAE,IAAI,CAAC/D,MAAM,CAAChC,QAAQ;AAC/BiP,oBAAAA,OAAO,EAAEA,OAAO;AAChBzD,oBAAAA,KAAK,EAAEA,KAAAA;AACX,mBAAC,CAAC,CAAA;AACN,iBAAA;AAACkJ,gBAAAA,UAAA,CAAAlR,CAAA,GAAA,CAAA,CAAA;gBAAA,OAEsBuB,KAAK,CAACuP,cAAc,EAAE;AACzCtP,kBAAAA,MAAM,EAAE,MAAM;AACdC,kBAAAA,OAAO,EAAE;AACL,oBAAA,cAAc,EAAEuP,WAAW;AAC3B,oBAAA,QAAQ,EAAE,kBAAA;mBACb;AACDtP,kBAAAA,IAAI,EAAEqP,WAAAA;AACV,iBAAC,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBAPI7P,QAAQ,GAAAgQ,UAAA,CAAAvQ,CAAA,CAAA;gBAAA,IASVO,QAAQ,CAACW,EAAE,EAAA;AAAAqP,kBAAAA,UAAA,CAAAlR,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;gBAAA,MACN,IAAI8B,KAAK,CAAAC,eAAAA,CAAAA,MAAA,CAAiBb,QAAQ,CAACc,MAAM,CAAE,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAkP,gBAAAA,UAAA,CAAAlR,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OAG3BkB,QAAQ,CAACe,IAAI,EAAE,CAAA;AAAA,cAAA,KAAA,CAAA;gBAApCgP,YAAY,GAAAC,UAAA,CAAAvQ,CAAA,CAAA;gBAAA,IAEAsQ,YAAY,CAAC/O,OAAO,EAAA;AAAAgP,kBAAAA,UAAA,CAAAlR,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;gBAAA,MAC3B,IAAI8B,KAAK,CAAAC,aAAAA,CAAAA,MAAA,CAAekP,YAAY,CAACrQ,KAAK,CAAE,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAKvD,gBAAA,IAAIkQ,cAAc,CAAClT,QAAQ,CAAC,gBAAgB,CAAC,EAAE;AAC3C;kBACA4J,UAAU,GAAGyJ,YAAY,CAACK,QAAQ,CAAA;AACtC,iBAAC,MAAM;AACH;AACMrI,kBAAAA,YAAY,GAAG,yBAAyB,CAAA;AAC9CzB,kBAAAA,UAAU,GAAAzF,EAAAA,CAAAA,MAAA,CAAMkH,YAAY,CAAAlH,CAAAA,MAAA,CAAGkP,YAAY,CAAC9O,IAAI,CAACkH,MAAM,CAAE,CAAA;AAC7D,iBAAA;;AAEA;gBACA,IAAI,CAACd,YAAY,GAAGf,UAAU,CAAA;;AAE9B;AACA4G,gBAAAA,WAAW,CAACR,SAAS,GAAA,yGAAA,CAAA7L,MAAA,CAEDyF,UAAU,EAE7B,sIAAA,CAAA,CAAA;;AAEF;AACA,gBAAA,IAAI,CAAC+I,kBAAkB,CAACnC,WAAW,CAAC,CAAA;AAAC,cAAA,KAAA,CAAA;gBAAA,OAAA8C,UAAA,CAAA9Q,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAyQ,SAAA,EAAA,IAAA,CAAA,CAAA;SACxC,CAAA,CAAA,CAAA;AAAA,QAAA,SAnFKrC,aAAaA,CAAA+C,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAA;AAAA,UAAA,OAAAb,cAAA,CAAA9P,KAAA,CAAA,IAAA,EAAArC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAb+P,aAAa,CAAA;AAAA,OAAA,EAAA;AAqFnB;AACR;AACA;AAFQ,OAAA;AAAA,KAAA,EAAA;MAAAnP,GAAA,EAAA,kBAAA;MAAAC,KAAA,EAGA,SAAAmP,gBAAgBA,CAACL,WAAW,EAAE3C,OAAO,EAAEzD,KAAK,EAAE;QAC1CoG,WAAW,CAACR,SAAS,GAAA,unBAAA,CAAA7L,MAAA,CAQmCiG,KAAK,EAAAjG,iGAAAA,CAAAA,CAAAA,MAAA,CACgB0J,OAAO,EAEnF,4CAAA,CAAA,CAAA;AACL,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAApM,GAAA,EAAA,qBAAA;MAAAC,KAAA,GAAA,YAAA;QAAA,IAAAoS,oBAAA,GAAAlS,iBAAA,cAAAC,YAAA,EAAAC,CAAAA,CAAA,CAGA,SAAAiS,SAAA,GAAA;AAAA,UAAA,OAAAlS,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAA+R,UAAA,EAAA;YAAA,OAAAA,CAAAA,EAAAA,QAAAA,UAAA,CAAA5R,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,IACQ,EAAA,OAAOoP,MAAM,KAAK,WAAW,CAAA,EAAA;AAAAwC,kBAAAA,UAAA,CAAA5R,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAC7BE,gBAAAA,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC,CAAA;AAAC,gBAAA,OAAAyR,UAAA,CAAAxR,CAAA,CAAA,CAAA,EACzC,IAAI,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;AAGfF,gBAAAA,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC,CAAA;gBAAC,OAAAyR,UAAA,CAAAxR,CAAA,CAExC,CAAA,EAAA,IAAIsP,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;AACpC,kBAAA,IAAMiC,MAAM,GAAGpE,QAAQ,CAACK,aAAa,CAAC,QAAQ,CAAC,CAAA;kBAC/C+D,MAAM,CAACC,GAAG,GAAG,8DAA8D,CAAA;kBAC3ED,MAAM,CAACE,MAAM,GAAG,YAAM;AAClBlO,oBAAAA,UAAU,CAAC,YAAM;AACb,sBAAA,IAAI,OAAOuL,MAAM,KAAK,WAAW,EAAE;AAC/BlP,wBAAAA,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC,CAAA;wBACvCwP,OAAO,CAAC,IAAI,CAAC,CAAA;AACjB,uBAAC,MAAM;AACHzP,wBAAAA,OAAO,CAACU,KAAK,CAAC,0CAA0C,CAAC,CAAA;AACzDgP,wBAAAA,MAAM,CAAC,IAAI9N,KAAK,CAAC,gDAAgD,CAAC,CAAC,CAAA;AACvE,uBAAA;qBACH,EAAE,GAAG,CAAC,CAAA;mBACV,CAAA;kBACD+P,MAAM,CAACG,OAAO,GAAG,YAAM;AACnB9R,oBAAAA,OAAO,CAACU,KAAK,CAAC,oCAAoC,CAAC,CAAA;AACnDgP,oBAAAA,MAAM,CAAC,IAAI9N,KAAK,CAAC,kCAAkC,CAAC,CAAC,CAAA;mBACxD,CAAA;AACD2L,kBAAAA,QAAQ,CAACwE,IAAI,CAACjE,WAAW,CAAC6D,MAAM,CAAC,CAAA;AACrC,iBAAC,CAAC,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAF,SAAA,CAAA,CAAA;SACL,CAAA,CAAA,CAAA;AAAA,QAAA,SA5BKxC,mBAAmBA,GAAA;AAAA,UAAA,OAAAuC,oBAAA,CAAA5Q,KAAA,CAAA,IAAA,EAAArC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAnB0Q,mBAAmB,CAAA;AAAA,OAAA,EAAA;AA8BzB;AACR;AACA;AAFQ,OAAA;AAAA,KAAA,EAAA;MAAA9P,GAAA,EAAA,oBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAiR,kBAAkBA,CAACnC,WAAW,EAAE;QAC5B,IAAM8D,mBAAmB,GAAG9D,WAAW,CAAC+D,aAAa,CAACC,aAAa,CAAC,yBAAyB,CAAC,CAAA;QAC9F,IAAMC,aAAa,GAAGjE,WAAW,CAAC+D,aAAa,CAACC,aAAa,CAAC,mBAAmB,CAAC,CAAA;AAElF,QAAA,IAAIF,mBAAmB,EAAE;AACrBA,UAAAA,mBAAmB,CAACI,KAAK,CAACC,OAAO,GAAG,OAAO,CAAA;AAC3CL,UAAAA,mBAAmB,CAACM,SAAS,CAACC,GAAG,CAAC,iBAAiB,CAAC,CAAA;AACxD,SAAA;AACA,QAAA,IAAIJ,aAAa,EAAE;AACfA,UAAAA,aAAa,CAACC,KAAK,CAACC,OAAO,GAAG,OAAO,CAAA;AACrCF,UAAAA,aAAa,CAACG,SAAS,CAACC,GAAG,CAAC,iBAAiB,CAAC,CAAA;AAClD,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAApT,GAAA,EAAA,iBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAoT,eAAeA,CAACzD,GAAG,EAAE0D,CAAC,EAAEC,CAAC,EAAEvD,KAAK,EAAEC,MAAM,EAAE;QACtC,IAAI;AACA;AACA,UAAA,IAAMuD,IAAI,GAAG,IAAIC,KAAK,EAAE,CAAA;UACxBD,IAAI,CAACd,MAAM,GAAG,YAAM;YAChB,IAAMgB,QAAQ,GAAG,EAAE,CAAA;YACnB,IAAMC,KAAK,GAAGL,CAAC,GAAG,CAACtD,KAAK,GAAG0D,QAAQ,IAAI,CAAC,CAAA;YACxC,IAAME,KAAK,GAAGL,CAAC,GAAG,CAACvD,KAAK,GAAG0D,QAAQ,IAAI,CAAC,CAAA;;AAExC;YACA9D,GAAG,CAACO,SAAS,GAAG,OAAO,CAAA;AACvBP,YAAAA,GAAG,CAACQ,QAAQ,CAACuD,KAAK,GAAG,CAAC,EAAEC,KAAK,GAAG,CAAC,EAAEF,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAG,CAAC,CAAC,CAAA;;AAE9D;AACA9D,YAAAA,GAAG,CAACiE,SAAS,CAACL,IAAI,EAAEG,KAAK,EAAEC,KAAK,EAAEF,QAAQ,EAAEA,QAAQ,CAAC,CAAA;WACxD,CAAA;UACDF,IAAI,CAACf,GAAG,GAAG,gBAAgB,CAAA;SAC9B,CAAC,OAAOlR,KAAK,EAAE;AACZV,UAAAA,OAAO,CAAC0D,IAAI,CAAC,sBAAsB,EAAEhD,KAAK,CAAC,CAAA;AAC/C,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAvB,GAAA,EAAA,sBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAA6T,oBAAoBA,GAAG;AACnBjT,QAAAA,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC,CAAA;AACnD,QAAA,IAAMiO,WAAW,GAAGX,QAAQ,CAACC,cAAc,CAAC,qBAAqB,CAAC,CAAA;AAClE,QAAA,IAAIU,WAAW,EAAE;AACbA,UAAAA,WAAW,CAACR,SAAS,GAAA7L,oUAAAA,CAAAA,MAAA,CAImC,OAAOqN,MAAM,KAAK,WAAW,oFAAArN,MAAA,CAC9BqM,WAAW,KAAK,IAAI,EAE1E,oDAAA,CAAA,CAAA;AACL,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAA/O,GAAA,EAAA,2BAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAuJ,yBAAyBA,CAAC1B,WAAW,EAAE1K,IAAI,EAAE;QACzCyD,OAAO,CAACC,GAAG,CAAA,4CAAA,CAAA4B,MAAA,CAA2CoF,WAAW,EAAA,UAAA,CAAA,CAAApF,MAAA,CAAWtF,IAAI,CAAE,CAAC,CAAA;AACnF,QAAA,IAAM+Q,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAACvG,WAAW,CAAC,CAAA;QACtD,IAAI,CAACqG,SAAS,EAAE;AACZtN,UAAAA,OAAO,CAACU,KAAK,CAAA,YAAA,CAAAmB,MAAA,CAAcoF,WAAW,mBAAa,CAAC,CAAA;AACpD,UAAA,OAAA;AACJ,SAAA;AAEAqG,QAAAA,SAAS,CAACI,SAAS,GAAA7L,m7BAAAA,CAAAA,MAAA,CAiBCqR,MAAM,CAAC3W,IAAI,CAAC,CAAC4W,WAAW,EAAE,EAG7C,oEAAA,CAAA,CAAA;AACL,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAhU,GAAA,EAAA,WAAA;MAAAC,KAAA,GAAA,YAAA;QAAA,IAAAgU,UAAA,GAAA9T,iBAAA,cAAAC,YAAA,GAAAC,CAAA,CAGA,SAAA6T,SAAAA,CAAgBpM,WAAW,EAAA;AAAA,UAAA,IAAAC,OAAA;YAAAjG,MAAA;YAAAqS,OAAA;AAAAC,YAAAA,OAAA,GAAAhV,SAAA;YAAAiV,GAAA,CAAA;AAAA,UAAA,OAAAjU,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAA8T,UAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,UAAA,CAAA5T,CAAA,GAAA4T,UAAA,CAAA3T,CAAA;AAAA,cAAA,KAAA,CAAA;AAAEoH,gBAAAA,OAAO,GAAAqM,OAAA,CAAA/U,MAAA,GAAA+U,CAAAA,IAAAA,OAAA,CAAA9U,CAAAA,CAAAA,KAAAA,SAAA,GAAA8U,OAAA,CAAG,CAAA,CAAA,GAAA,EAAE,CAAA;AAAAE,gBAAAA,UAAA,CAAA5T,CAAA,GAAA,CAAA,CAAA;gBAAA,IAG7B,CAAA,IAAI,CAACwI,YAAY,EAAA;AAAAoL,kBAAAA,UAAA,CAAA3T,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AACjBE,gBAAAA,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC,CAAA;;AAE/D;AACA;;AAEA;AACA;AAAAwT,gBAAAA,UAAA,CAAA3T,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OACqB,IAAI,CAAC8I,UAAU,CAAC3B,WAAW,EAAEC,OAAO,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBAApDjG,MAAM,GAAAwS,UAAA,CAAAhT,CAAA,CAAA;AAAA,gBAAA,OAAAgT,UAAA,CAAAvT,CAAA,CAAA,CAAA,EACLe,MAAM,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;AAEbjB,gBAAAA,OAAO,CAACC,GAAG,CAAC,yDAAyD,CAAC,CAAA;AAACwT,gBAAAA,UAAA,CAAA3T,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OAClD,IAAI,CAAC8I,UAAU,CAAC3B,WAAW,EAAEC,OAAO,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBAApDjG,OAAM,GAAAwS,UAAA,CAAAhT,CAAA,CAAA;AAAA,gBAAA,OAAAgT,UAAA,CAAAvT,CAAA,CAAA,CAAA,EACLe,OAAM,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAwS,gBAAAA,UAAA,CAAA3T,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;AAAA2T,gBAAAA,UAAA,CAAA5T,CAAA,GAAA,CAAA,CAAA;gBAAA2T,GAAA,GAAAC,UAAA,CAAAhT,CAAA,CAAA;gBAGjBT,OAAO,CAACU,KAAK,CAAC,kCAAkC,EAAE8S,GAAA,CAAM7S,OAAO,CAAC,CAAA;gBAChE,IAAI,CAACgI,yBAAyB,CAAC1B,WAAW,EAAE,IAAI,CAAC3I,MAAM,CAAC/B,IAAI,CAAC,CAAA;AAAC,gBAAA,MAAAiX,GAAA,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,OAAAC,UAAA,CAAAvT,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAmT,SAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;SAGrE,CAAA,CAAA,CAAA;QAAA,SAvBKK,SAASA,CAAAC,IAAA,EAAA;AAAA,UAAA,OAAAP,UAAA,CAAAxS,KAAA,CAAA,IAAA,EAAArC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAATmV,SAAS,CAAA;AAAA,OAAA,EAAA;AAyBf;AACR;AACA;AAFQ,OAAA;AAAA,KAAA,EAAA;MAAAvU,GAAA,EAAA,kBAAA;MAAAC,KAAA,EAGA,SAAAoJ,gBAAgBA,CAACvB,WAAW,EAAE1K,IAAI,EAAE2K,OAAO,EAAE;AAAA,QAAA,IAAA0M,MAAA,GAAA,IAAA,CAAA;AACzC,QAAA,IAAI,CAAC,IAAI,CAACtV,MAAM,CAAC3B,WAAW,EAAE,OAAA;;AAE9B;QACA,IAAI,IAAI,CAACkC,YAAY,EAAE;AACnBgV,UAAAA,aAAa,CAAC,IAAI,CAAChV,YAAY,CAAC,CAAA;AAChCmB,UAAAA,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC,CAAA;AAChE,SAAA;AAEA,QAAA,IAAI,CAACpB,YAAY,GAAGiV,WAAW,cAAAxU,iBAAA,cAAAC,YAAA,EAAAC,CAAAA,CAAA,CAAC,SAAAuU,SAAA,GAAA;AAAA,UAAA,IAAAC,IAAA,CAAA;AAAA,UAAA,OAAAzU,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAAsU,UAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,UAAA,CAAApU,CAAA,GAAAoU,UAAA,CAAAnU,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAmU,gBAAAA,UAAA,CAAApU,CAAA,GAAA,CAAA,CAAA;AAExBG,gBAAAA,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC,CAAA;AAACgU,gBAAAA,UAAA,CAAAnU,CAAA,GAAA,CAAA,CAAA;gBAAA,OACvD8T,MAAI,CAACF,SAAS,CAACzM,WAAW,EAAE1K,IAAI,EAAE2K,OAAO,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAAA+M,gBAAAA,UAAA,CAAAnU,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;AAAAmU,gBAAAA,UAAA,CAAApU,CAAA,GAAA,CAAA,CAAA;gBAAAmU,IAAA,GAAAC,UAAA,CAAAxT,CAAA,CAAA;AAEhDT,gBAAAA,OAAO,CAAC0D,IAAI,CAAC,8CAA8C,EAAAsQ,IAAO,CAAC,CAAA;AAAC,cAAA,KAAA,CAAA;gBAAA,OAAAC,UAAA,CAAA/T,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAA6T,SAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,SAE3E,IAAE,IAAI,CAACzV,MAAM,CAAC1B,eAAe,CAAC,CAAA;QAE/BoD,OAAO,CAACC,GAAG,CAAA,2DAAA,CAAA4B,MAAA,CAA0C,IAAI,CAACvD,MAAM,CAAC1B,eAAe,EAAA,KAAA,CAAK,CAAC,CAAA;AAC1F,OAAA;;AAEA;AACR;AACA;;AAGQ;AACR;AACA;AAFQ,KAAA,EAAA;MAAAuC,GAAA,EAAA,aAAA;MAAAC,KAAA,GAAA,YAAA;AAAA,QAAA,IAAA8U,YAAA,GAAA5U,iBAAA,cAAAC,YAAA,EAAA,CAAAC,CAAA,CAGA,SAAA2U,SAAAA,CAAkBC,QAAQ,EAAEnS,IAAI,EAAA;AAAA,UAAA,IAAAoS,qBAAA;YAAAC,qBAAA;YAAAC,MAAA,GAAA,IAAA,CAAA;AAAA,UAAA,IAAAC,aAAA,EAAAC,YAAA,EAAAlP,GAAA,EAAAmP,UAAA,EAAAtX,UAAA,EAAAuX,KAAA,EAAAC,IAAA,CAAA;AAAA,UAAA,OAAArV,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAAkV,UAAA,EAAA;YAAA,OAAAA,CAAAA,EAAAA,QAAAA,UAAA,CAAA/U,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,IAEvB,IAAI,CAAChB,aAAa,EAAA;AAAA+V,kBAAAA,UAAA,CAAA/U,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AACnB,gBAAA,IAAI,CAACM,gBAAgB,CAAC,qBAAqB,EAAE;AAAEgU,kBAAAA,QAAQ,EAARA,QAAAA;AAAS,iBAAC,CAAC,CAAA;AAAC,gBAAA,MACrD,IAAIxS,KAAK,CAAC,oBAAoB,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAAA,gBAAA,IAAA,CAIrC,IAAI,CAACtD,MAAM,CAAChB,UAAU,EAAA;AAAAuX,kBAAAA,UAAA,CAAA/U,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AACtB,gBAAA,IAAI,CAACxB,MAAM,CAACoE,YAAY,EAAE,CAAA;gBAAC,IACvB,EAAA,IAAI,CAACpE,MAAM,CAACoE,YAAY,GAAG,IAAI,CAACpE,MAAM,CAACkE,WAAW,CAAA,EAAA;AAAAqS,kBAAAA,UAAA,CAAA/U,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAClD,gBAAA,IAAI,CAACM,gBAAgB,CAAC,4BAA4B,EAAE;AAChDsC,kBAAAA,YAAY,EAAE,IAAI,CAACpE,MAAM,CAACoE,YAAY;AACtCF,kBAAAA,WAAW,EAAE,IAAI,CAAClE,MAAM,CAACkE,WAAAA;AAC7B,iBAAC,CAAC,CAAA;AAAC,gBAAA,MACG,IAAIZ,KAAK,CAAC,6BAA6B,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAItD;AACM4S,gBAAAA,aAAa,GAAG,IAAI,CAACM,mBAAmB,CAAC7S,IAAI,CAAC,CAEpD;AACAjC,gBAAAA,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEmU,QAAQ,CAAC,CAAA;gBACzDpU,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAE,IAAI,CAAC3B,MAAM,CAACnC,MAAM,CAAC,CAAA;AACjE6D,gBAAAA,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAA,EAAA,CAAA4B,MAAA,CAAK,IAAI,CAACvD,MAAM,CAACnC,MAAM,CAAA,CAAA0F,MAAA,CAAGuS,QAAQ,CAAE,CAAC,CAAA;AAC9EpU,gBAAAA,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEwB,IAAI,CAACC,SAAS,CAAC8S,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAA;gBACnFxU,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAE,IAAI,CAAC3B,MAAM,CAAChB,UAAU,CAAC,CAAA;gBACzE0C,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAE,IAAI,CAACnB,aAAa,CAAC,CAAA;;AAExE;AACM2V,gBAAAA,YAAY,GAAG,CAAA,CAAAJ,qBAAA,GAAArY,MAAM,CAACI,YAAY,MAAA,IAAA,IAAAiY,qBAAA,KAAA,KAAA,CAAA,IAAA,CAAAA,qBAAA,GAAnBA,qBAAA,CAAqBU,SAAS,MAAAV,IAAAA,IAAAA,qBAAA,KAA9BA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,qBAAA,CAAiCD,QAAQ,CAACzW,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,KAAIyW,QAAQ,CAAA;AACtF7O,gBAAAA,GAAG,GAAA1D,EAAAA,CAAAA,MAAA,CAAM,IAAI,CAACvD,MAAM,CAACnC,MAAM,CAAA0F,CAAAA,MAAA,CAAG4S,YAAY,CAEhD,CAAA;AACAzU,gBAAAA,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEsF,GAAG,CAAC,CAAA;AAC7CvF,gBAAAA,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEwU,YAAY,CAAC,CAAA;gBAC7CzU,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEwB,IAAI,CAACC,SAAS,CAAA4S,CAAAA,qBAAA,GAACtY,MAAM,CAACI,YAAY,MAAAkY,IAAAA,IAAAA,qBAAA,uBAAnBA,qBAAA,CAAqBS,SAAS,CAAC,CAAC,CAAA;;AAEzF;AACA,gBAAA,IAAI,CAAC3U,gBAAgB,CAAC,mBAAmB,EAAE;AACvCgU,kBAAAA,QAAQ,EAAEK,YAAY;AACtBlP,kBAAAA,GAAG,EAAEA,GAAG;AACRyP,kBAAAA,QAAQ,EAAEC,MAAM,CAACC,IAAI,CAACV,aAAa,CAAC;AACpClX,kBAAAA,UAAU,EAAE,IAAI,CAACgB,MAAM,CAAChB,UAAAA;AAC5B,iBAAC,CAAC,CAAA;AAEEoX,gBAAAA,UAAU,GAAG,CAAC,CAAA;AACZtX,gBAAAA,UAAU,GAAG,IAAI,CAACkB,MAAM,CAAClB,UAAU,CAAA;AAAAuX,gBAAAA,KAAA,gBAAApV,YAAA,EAAAC,CAAAA,CAAA,UAAAmV,KAAA,GAAA;AAAA,kBAAA,IAAAQ,UAAA,EAAAC,SAAA,EAAA7T,OAAA,EAAAP,QAAA,EAAAqU,SAAA,EAAAC,SAAA,EAAArU,MAAA,EAAAsU,IAAA,CAAA;AAAA,kBAAA,OAAAhW,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAA6V,UAAA,EAAA;AAAA,oBAAA,OAAA,CAAA,EAAA,QAAAA,UAAA,CAAA3V,CAAA,GAAA2V,UAAA,CAAA1V,CAAA;AAAA,sBAAA,KAAA,CAAA;AAAA0V,wBAAAA,UAAA,CAAA3V,CAAA,GAAA,CAAA,CAAA;AAI3BsV,wBAAAA,UAAU,GAAG,IAAIM,eAAe,EAAE,CAAA;wBAClCL,SAAS,GAAGzR,UAAU,CAAC,YAAA;AAAA,0BAAA,OAAMwR,UAAU,CAACO,KAAK,EAAE,CAAA;AAAA,yBAAA,EAAEnB,MAAI,CAACjW,MAAM,CAACjB,cAAc,CAAC,CAElF;AACMkE,wBAAAA,OAAO,GAAG;AACZ,0BAAA,cAAc,EAAE,kBAAA;AACpB,yBAAC,CAED;AACA;AACA;AACA;AACA;AAAAiU,wBAAAA,UAAA,CAAA1V,CAAA,GAAA,CAAA,CAAA;wBAAA,OAEuBuB,KAAK,CAACkE,GAAG,EAAE;AAC9BjE,0BAAAA,MAAM,EAAE,MAAM;AACdC,0BAAAA,OAAO,EAAEA,OAAO;AAChBC,0BAAAA,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC8S,aAAa,CAAC;0BACnCmB,MAAM,EAAER,UAAU,CAACQ,MAAAA;AACvB,yBAAC,CAAC,CAAA;AAAA,sBAAA,KAAA,CAAA;wBALI3U,QAAQ,GAAAwU,UAAA,CAAA/U,CAAA,CAAA;wBAOdmV,YAAY,CAACR,SAAS,CAAC,CAAA;wBAAC,IAEnBpU,QAAQ,CAACW,EAAE,EAAA;AAAA6T,0BAAAA,UAAA,CAAA1V,CAAA,GAAA,CAAA,CAAA;AAAA,0BAAA,MAAA;AAAA,yBAAA;AAAA0V,wBAAAA,UAAA,CAAA1V,CAAA,GAAA,CAAA,CAAA;AAAA,wBAAA,OACYkB,QAAQ,CAACiM,IAAI,EAAE,CAAA;AAAA,sBAAA,KAAA,CAAA;wBAAjCoI,SAAS,GAAAG,UAAA,CAAA/U,CAAA,CAAA;wBAEf,IAAI;AACA6U,0BAAAA,SAAS,GAAG7T,IAAI,CAAC2B,KAAK,CAACiS,SAAS,CAAC,CAAA;yBACpC,CAAC,OAAOQ,CAAC,EAAE;AACRP,0BAAAA,SAAS,GAAG;AAAE3U,4BAAAA,OAAO,EAAE0U,SAAAA;2BAAW,CAAA;AACtC,yBAAA;AAEAd,wBAAAA,MAAI,CAACnU,gBAAgB,CAAC,mBAAmB,EAAE;0BACvC0B,MAAM,EAAEd,QAAQ,CAACc,MAAM;0BACvBgU,UAAU,EAAE9U,QAAQ,CAAC8U,UAAU;0BAC/BpV,KAAK,EAAE4U,SAAS,CAAC3U,OAAAA;AACrB,yBAAC,CAAC,CAAA;AAAC,wBAAA,MAEG,IAAIiB,KAAK,CAAC0T,SAAS,CAAC3U,OAAO,IAAAkB,eAAAA,CAAAA,MAAA,CAAoBb,QAAQ,CAACc,MAAM,CAAE,CAAC,CAAA;AAAA,sBAAA,KAAA,CAAA;AAAA0T,wBAAAA,UAAA,CAAA1V,CAAA,GAAA,CAAA,CAAA;AAAA,wBAAA,OAGtDkB,QAAQ,CAACe,IAAI,EAAE,CAAA;AAAA,sBAAA,KAAA,CAAA;wBAA9Bd,MAAM,GAAAuU,UAAA,CAAA/U,CAAA,CAAA;AAEZ8T,wBAAAA,MAAI,CAACnU,gBAAgB,CAAC,qBAAqB,EAAE;AACzCgU,0BAAAA,QAAQ,EAAEK,YAAY;AACtBsB,0BAAAA,YAAY,EAAEd,MAAM,CAACC,IAAI,CAACjU,MAAM,CAAA;AACpC,yBAAC,CAAC,CAAA;wBAAC,OAAAuU,UAAA,CAAAtV,CAAA,CAAA,CAAA,EAAA;AAAAO,0BAAAA,CAAA,EAEIQ,MAAAA;AAAM,yBAAA,CAAA,CAAA;AAAA,sBAAA,KAAA,CAAA;AAAAuU,wBAAAA,UAAA,CAAA3V,CAAA,GAAA,CAAA,CAAA;wBAAA0V,IAAA,GAAAC,UAAA,CAAA/U,CAAA,CAAA;AAGbiU,wBAAAA,UAAU,EAAE,CAAA;AAAC,wBAAA,IAAA,EAETa,IAAA,CAAMS,IAAI,KAAK,YAAY,CAAA,EAAA;AAAAR,0BAAAA,UAAA,CAAA1V,CAAA,GAAA,CAAA,CAAA;AAAA,0BAAA,MAAA;AAAA,yBAAA;AAC3ByU,wBAAAA,MAAI,CAACnU,gBAAgB,CAAC,qBAAqB,EAAE;AAAEsU,0BAAAA,UAAU,EAAVA,UAAAA;AAAW,yBAAC,CAAC,CAAA;wBAAC,IACzDA,EAAAA,UAAU,GAAGtX,UAAU,CAAA,EAAA;AAAAoY,0BAAAA,UAAA,CAAA1V,CAAA,GAAA,CAAA,CAAA;AAAA,0BAAA,MAAA;AAAA,yBAAA;AAAA,wBAAA,MACjB,IAAI8B,KAAK,CAAC,2BAA2B,CAAC,CAAA;AAAA,sBAAA,KAAA,CAAA;wBAAA,OAAA4T,UAAA,CAAAtV,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AAAA,sBAAA,KAAA,CAAA;wBAAA,IAKhDwU,EAAAA,UAAU,GAAGtX,UAAU,CAAA,EAAA;AAAAoY,0BAAAA,UAAA,CAAA1V,CAAA,GAAA,CAAA,CAAA;AAAA,0BAAA,MAAA;AAAA,yBAAA;AACvByU,wBAAAA,MAAI,CAACnU,gBAAgB,CAAC,yBAAyB,EAAE;AAC7CsU,0BAAAA,UAAU,EAAVA,UAAU;0BACVhU,KAAK,EAAE6U,IAAA,CAAM5U,OAAAA;AACjB,yBAAC,CAAC,CAAA;AAAC,wBAAA,MAAA4U,IAAA,CAAA;AAAA,sBAAA,KAAA,CAAA;AAAAC,wBAAAA,UAAA,CAAA1V,CAAA,GAAA,CAAA,CAAA;AAAA,wBAAA,OAKD,IAAI0P,OAAO,CAAC,UAAAC,OAAO,EAAA;AAAA,0BAAA,OAAI9L,UAAU,CAAC8L,OAAO,EAAE,IAAI,GAAGiF,UAAU,CAAC,CAAA;yBAAC,CAAA,CAAA;AAAA,sBAAA,KAAA,CAAA;wBAAA,OAAAc,UAAA,CAAAtV,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,qBAAA;AAAA,mBAAA,EAAAyU,KAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,iBAAA,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,IAxErED,EAAAA,UAAU,IAAItX,UAAU,CAAA,EAAA;AAAAyX,kBAAAA,UAAA,CAAA/U,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAAA,gBAAA,OAAA+U,UAAA,CAAAoB,CAAA,CAAAC,kBAAA,CAAAvB,KAAA,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAAC,IAAA,GAAAC,UAAA,CAAApU,CAAA,CAAA;AAAA,gBAAA,IAAA,EAAAmU,IAAA,KAAA,CAAA,CAAA,EAAA;AAAAC,kBAAAA,UAAA,CAAA/U,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;gBAAA,OAAA+U,UAAA,CAAA3U,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;AAAA,gBAAA,IAAA,CAAA0U,IAAA,EAAA;AAAAC,kBAAAA,UAAA,CAAA/U,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAAA,gBAAA,OAAA+U,UAAA,CAAA3U,CAAA,CAAA0U,CAAAA,EAAAA,IAAA,CAAAnU,CAAA,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAoU,gBAAAA,UAAA,CAAA/U,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,OAAA+U,UAAA,CAAA3U,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAiU,SAAA,EAAA,IAAA,CAAA,CAAA;SA2ElC,CAAA,CAAA,CAAA;AAAA,QAAA,SA7HKtM,WAAWA,CAAAsO,IAAA,EAAAC,IAAA,EAAA;AAAA,UAAA,OAAAlC,YAAA,CAAAtT,KAAA,CAAA,IAAA,EAAArC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAXsJ,WAAW,CAAA;AAAA,OAAA,EAAA;AA+HjB;AACR;AACA;AAFQ,OAAA;AAAA,KAAA,EAAA;MAAA1I,GAAA,EAAA,qBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAA0V,mBAAmBA,CAAC7S,IAAI,EAAE;QACtB,IAAMoU,SAAS,GAAG,EAAE,CAAA;;AAEpB;AACA,QAAA,KAAA,IAAAC,EAAA,GAAAC,CAAAA,EAAAA,eAAA,GAA2BtB,MAAM,CAACuB,OAAO,CAACvU,IAAI,CAAC,EAAAqU,EAAA,GAAAC,eAAA,CAAA/X,MAAA,EAAA8X,EAAA,EAAE,EAAA;AAA5C,UAAA,IAAAG,kBAAA,GAAA3T,cAAA,CAAAyT,eAAA,CAAAD,EAAA,CAAA,EAAA,CAAA,CAAA;AAAOnX,YAAAA,GAAG,GAAAsX,kBAAA,CAAA,CAAA,CAAA;AAAErX,YAAAA,KAAK,GAAAqX,kBAAA,CAAA,CAAA,CAAA,CAAA;AAClB,UAAA,IAAI,OAAOrX,KAAK,KAAK,QAAQ,EAAE;YAC3BiX,SAAS,CAAClX,GAAG,CAAC,GAAG,IAAI,CAACqH,aAAa,CAACpH,KAAK,CAAC,CAAA;WAC7C,MAAM,IAAIsX,OAAA,CAAOtX,KAAK,CAAK,KAAA,QAAQ,IAAIA,KAAK,KAAK,IAAI,EAAE;YACpDiX,SAAS,CAAClX,GAAG,CAAC,GAAG,IAAI,CAAC2V,mBAAmB,CAAC1V,KAAK,CAAC,CAAA;AACpD,WAAC,MAAM;AACHiX,YAAAA,SAAS,CAAClX,GAAG,CAAC,GAAGC,KAAK,CAAA;AAC1B,WAAA;AACJ,SAAA;;AAEA;AACA;AACAiX,QAAAA,SAAS,CAACjU,SAAS,GAAG,IAAI,CAAC9D,MAAM,CAAC8H,gBAAgB,IAAI,IAAI,CAAC9H,MAAM,CAACjC,QAAQ,CAAA;AAC1Ega,QAAAA,SAAS,CAAChU,SAAS,GAAG,IAAI,CAAC/D,MAAM,CAAC+H,gBAAgB,IAAI,IAAI,CAAC/H,MAAM,CAAChC,QAAQ,CAAA;;AAE1E;QACA0D,OAAO,CAACC,GAAG,CAAC,qDAAqD,EAAE,IAAI,CAAC3B,MAAM,CAACjC,QAAQ,CAAC,CAAA;QACxF2D,OAAO,CAACC,GAAG,CAAC,qDAAqD,EAAE,IAAI,CAAC3B,MAAM,CAAChC,QAAQ,GAAG,KAAK,GAAG,IAAI,CAACgC,MAAM,CAAChC,QAAQ,CAACiE,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAA;QAC1IP,OAAO,CAACC,GAAG,CAAC,8DAA8D,EAAEoW,SAAS,CAACjU,SAAS,CAAC,CAAA;QAChGpC,OAAO,CAACC,GAAG,CAAC,8DAA8D,EAAEoW,SAAS,CAAChU,SAAS,GAAG,KAAK,GAAGgU,SAAS,CAAChU,SAAS,CAAC9B,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAA;AACjJP,QAAAA,OAAO,CAACC,GAAG,CAAC,yDAAyD,EAAEwB,IAAI,CAACC,SAAS,CAAC2U,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAA;AAE1G,QAAA,OAAOA,SAAS,CAAA;AACpB,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAlX,GAAA,EAAA,mBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAuX,iBAAiBA,GAAG;QAChB,OAAO,MAAM,GAAGrT,IAAI,CAACC,GAAG,EAAE,GAAG,GAAG,GAAGqT,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;AAC9E,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAA5X,GAAA,EAAA,qBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAA4X,mBAAmBA,GAAG;AAClB,QAAA,IAAMnR,SAAS,GAAGvC,IAAI,CAACC,GAAG,EAAE,CAAA;AAC5B,QAAA,IAAMsT,MAAM,GAAGD,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;QACtD,IAAM3N,IAAI,MAAAvH,MAAA,CAAMgE,SAAS,EAAAhE,GAAAA,CAAAA,CAAAA,MAAA,CAAIgV,MAAM,CAAE,CAAA;AACrC,QAAA,OAAOI,IAAI,CAAC7N,IAAI,CAAC,CAAC;AACtB,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAjK,GAAA,EAAA,kBAAA;MAAAC,KAAA,GAAA,YAAA;QAAA,IAAA8X,iBAAA,GAAA5X,iBAAA,cAAAC,YAAA,EAAAC,CAAAA,CAAA,CAGA,SAAA2X,SAAA,GAAA;AAAA,UAAA,IAAAnW,QAAA,EAAAiB,IAAA,EAAAmV,SAAA,EAAAC,IAAA,CAAA;AAAA,UAAA,OAAA9X,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAA2X,UAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,UAAA,CAAAzX,CAAA,GAAAyX,UAAA,CAAAxX,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAwX,gBAAAA,UAAA,CAAAzX,CAAA,GAAA,CAAA,CAAA;AAAAyX,gBAAAA,UAAA,CAAAxX,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OAE+B,IAAI,CAAC+H,WAAW,CAAC,QAAQ,EAAE;AAC9CtL,kBAAAA,IAAI,EAAE,IAAI,CAAC+B,MAAM,CAAC/B,IAAI;AACtB6F,kBAAAA,SAAS,EAAE,IAAI,CAAC9D,MAAM,CAACjC,QAAQ;AAC/BgG,kBAAAA,SAAS,EAAE,IAAI,CAAC/D,MAAM,CAAChC,QAAAA;AAC3B,iBAAC,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBAJI0E,QAAQ,GAAAsW,UAAA,CAAA7W,CAAA,CAAA;AAMdT,gBAAAA,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEe,QAAQ,CAAC,CAAA;;AAE9C;AACA,gBAAA,IAAIA,QAAQ,CAACgB,OAAO,IAAIhB,QAAQ,CAACiB,IAAI,EAAE;AAC7BA,kBAAAA,IAAI,GAAGjB,QAAQ,CAACiB,IAAI,CAE1B;AACImV,kBAAAA,SAAS,GAAG,IAAI,CAAA;kBAEpB,IAAInV,IAAI,CAACsV,UAAU,EAAE;oBACjBH,SAAS,GAAGnV,IAAI,CAACsV,UAAU,CAAA;AAC/B,mBAAC,MAAM,IAAItV,IAAI,CAACuV,cAAc,IAAIvV,IAAI,CAACuV,cAAc,CAACC,SAAS,IAAIxV,IAAI,CAACuV,cAAc,CAACC,SAAS,CAACF,UAAU,EAAE;AACzGH,oBAAAA,SAAS,GAAGnV,IAAI,CAACuV,cAAc,CAACC,SAAS,CAACF,UAAU,CAAA;mBACvD,MAAM,IAAItV,IAAI,CAACwV,SAAS,IAAIxV,IAAI,CAACwV,SAAS,CAACF,UAAU,EAAE;AACpDH,oBAAAA,SAAS,GAAGnV,IAAI,CAACwV,SAAS,CAACF,UAAU,CAAA;AACzC,mBAAA;AAEA,kBAAA,IAAIH,SAAS,EAAE;AACX,oBAAA,IAAI,CAAC9Y,MAAM,CAAC8Y,SAAS,GAAGA,SAAS,CAAA;;AAEjC;oBACA,IAAInV,IAAI,CAACoH,UAAU,EAAE;AACjB,sBAAA,IAAI,CAAC/K,MAAM,CAAC2M,SAAS,GAAGhJ,IAAI,CAACoH,UAAU,CAAA;AAC3C,qBAAC,MAAM;AACH;AACA,sBAAA,IAAI,CAAC/K,MAAM,CAAC2M,SAAS,GAAGmM,SAAS,CAAA;AACrC,qBAAA;;AAEA;oBACA,IAAIA,SAAS,KAAK,EAAE,EAAE;AAClB,sBAAA,IAAI,CAAC9Y,MAAM,CAAC9B,WAAW,GAAG,OAAO,CAAA;AACrC,qBAAC,MAAM;sBACH,IAAI,CAAC8B,MAAM,CAAC9B,WAAW,cAAAqF,MAAA,CAAcuV,SAAS,CAAE,CAAA;AACpD,qBAAA;AAEApX,oBAAAA,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAE;AACjDzD,sBAAAA,WAAW,EAAE,IAAI,CAAC8B,MAAM,CAAC9B,WAAW;AACpC4a,sBAAAA,SAAS,EAAE,IAAI,CAAC9Y,MAAM,CAAC8Y,SAAS;AAChCnM,sBAAAA,SAAS,EAAE,IAAI,CAAC3M,MAAM,CAAC2M,SAAAA;AAC3B,qBAAC,CAAC,CAAA;AACN,mBAAC,MAAM;AACHjL,oBAAAA,OAAO,CAAC0D,IAAI,CAAC,gFAAgF,CAAC,CAAA;AAC9F,oBAAA,IAAI,CAACpF,MAAM,CAAC9B,WAAW,cAAAqF,MAAA,CAAc,IAAI,CAACvD,MAAM,CAAC8Y,SAAS,IAAI,SAAS,CAAE,CAAA;AAC7E,mBAAA;AACJ,iBAAC,MAAM;AACHpX,kBAAAA,OAAO,CAAC0D,IAAI,CAAC,wEAAwE,CAAC,CAAA;AACtF,kBAAA,IAAI,CAACpF,MAAM,CAAC9B,WAAW,cAAAqF,MAAA,CAAc,IAAI,CAACvD,MAAM,CAAC8Y,SAAS,IAAI,SAAS,CAAE,CAAA;AAC7E,iBAAA;AAACE,gBAAAA,UAAA,CAAAxX,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;AAAAwX,gBAAAA,UAAA,CAAAzX,CAAA,GAAA,CAAA,CAAA;gBAAAwX,IAAA,GAAAC,UAAA,CAAA7W,CAAA,CAAA;gBAEDT,OAAO,CAAC0D,IAAI,CAAC,mEAAmE,EAAE2T,IAAA,CAAM1W,OAAO,CAAC,CAAA;AAChG,gBAAA,IAAI,CAACrC,MAAM,CAAC9B,WAAW,GAAG,iBAAiB,CAAA;AAAC,cAAA,KAAA,CAAA;gBAAA,OAAA8a,UAAA,CAAApX,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAiX,SAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;SAEnD,CAAA,CAAA,CAAA;AAAA,QAAA,SA5DK9W,gBAAgBA,GAAA;AAAA,UAAA,OAAA6W,iBAAA,CAAAtW,KAAA,CAAA,IAAA,EAAArC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAhB8B,gBAAgB,CAAA;AAAA,OAAA,EAAA;AA8DtB;AACR;AACA;AAFQ,OAAA;AAAA,KAAA,EAAA;MAAAlB,GAAA,EAAA,YAAA;AAAAC,MAAAA,KAAA,EAGA,SAAA2O,UAAUA,CAACtR,KAAK,EAAE;AACd,QAAA,IAAM6Q,SAAS,GAAGC,QAAQ,CAAC2E,aAAa,CAAC,iBAAiB,CAAC,CAAA;AAC3D,QAAA,IAAI5E,SAAS,EAAE;AACXA,UAAAA,SAAS,CAACO,SAAS,GAAA,8BAAA,CAAAhM,MAAA,CAAkCpF,KAAK,CAAE,CAAA;AAChE,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAA0C,GAAA,EAAA,aAAA;AAAAC,MAAAA,KAAA,EAGA,SAAA8L,WAAWA,CAACxK,KAAK,EAAE;AACfV,QAAAA,OAAO,CAACU,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC,CAAA;AAEzC,QAAA,IAAI,IAAI,CAACpC,MAAM,CAACvB,OAAO,EAAE;AACrB,UAAA,IAAI,CAACuB,MAAM,CAACvB,OAAO,CAAC2D,KAAK,CAAC,CAAA;AAC9B,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAvB,GAAA,EAAA,kBAAA;MAAAC,KAAA,GAAA,YAAA;QAAA,IAAAsY,iBAAA,GAAApY,iBAAA,cAAAC,YAAA,EAAAC,CAAAA,CAAA,CAGA,SAAAmY,SAAA,GAAA;AAAA,UAAA,IAAA7V,MAAA,EAAA8V,YAAA,EAAAC,SAAA,EAAAC,IAAA,CAAA;AAAA,UAAA,OAAAvY,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAAoY,UAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,UAAA,CAAAlY,CAAA,GAAAkY,UAAA,CAAAjY,CAAA;AAAA,cAAA,KAAA,CAAA;AACUgC,gBAAAA,MAAM,GAAG;AACXkW,kBAAAA,GAAG,EAAE,KAAK;AACVC,kBAAAA,SAAS,EAAE,KAAK;AAChBC,kBAAAA,KAAK,EAAE,KAAA;AACX,iBAAC,CAED;AAAAH,gBAAAA,UAAA,CAAAlY,CAAA,GAAA,CAAA,CAAA;AAAAkY,gBAAAA,UAAA,CAAAjY,CAAA,GAAA,CAAA,CAAA;gBAAA,OAE+BuB,KAAK,CAAC,IAAI,CAAC/C,MAAM,CAACnC,MAAM,GAAG,QAAQ,EAAE;AAC5DmF,kBAAAA,MAAM,EAAE,MAAM;AACdC,kBAAAA,OAAO,EAAE;AACL,oBAAA,cAAc,EAAE,kBAAA;mBACnB;AACDC,kBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;AACjBnF,oBAAAA,IAAI,EAAE,IAAI,CAAC+B,MAAM,CAAC/B,IAAI;AACtB6F,oBAAAA,SAAS,EAAE,IAAI,CAAC9D,MAAM,CAACjC,QAAQ;AAC/BgG,oBAAAA,SAAS,EAAE,IAAI,CAAC/D,MAAM,CAAChC,QAAAA;mBAC1B,CAAA;AACL,iBAAC,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBAVIsb,YAAY,GAAAG,UAAA,CAAAtX,CAAA,CAAA;gBAAA,IAYdmX,CAAAA,YAAY,CAACjW,EAAE,EAAA;AAAAoW,kBAAAA,UAAA,CAAAjY,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAAAiY,gBAAAA,UAAA,CAAAjY,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OACS8X,YAAY,CAAC7V,IAAI,EAAE,CAAA;AAAA,cAAA,KAAA,CAAA;gBAArC8V,SAAS,GAAAE,UAAA,CAAAtX,CAAA,CAAA;AACf;AACAqB,gBAAAA,MAAM,CAACkW,GAAG,GAAGH,SAAS,CAAC7V,OAAO,KAAK,IAAI,CAAA;AACvChC,gBAAAA,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE6B,MAAM,CAACkW,GAAG,GAAG,YAAY,GAAG,cAAc,CAAC,CAAA;AAACD,gBAAAA,UAAA,CAAAjY,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;gBAE1EgC,MAAM,CAACkW,GAAG,GAAG,KAAK,CAAA;gBAClBhY,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE2X,YAAY,CAAC9V,MAAM,CAAC,CAAA;AAAC,cAAA,KAAA,CAAA;AAAAiW,gBAAAA,UAAA,CAAAjY,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;AAAAiY,gBAAAA,UAAA,CAAAlY,CAAA,GAAA,CAAA,CAAA;gBAAAiY,IAAA,GAAAC,UAAA,CAAAtX,CAAA,CAAA;gBAG5DT,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE6X,IAAA,CAAMnX,OAAO,CAAC,CAAA;gBACjDmB,MAAM,CAACkW,GAAG,GAAG,KAAK,CAAA;AAAC,cAAA,KAAA,CAAA;AAGvB;gBACAlW,MAAM,CAACmW,SAAS,GAAG,IAAI,CAAClZ,MAAM,IAAI,IAAI,CAACA,MAAM,CAACqF,SAAS,CAAA;;AAEvD;AACAtC,gBAAAA,MAAM,CAACoW,KAAK,GAAGpW,MAAM,CAACkW,GAAG,CAAA;AAAC,gBAAA,OAAAD,UAAA,CAAA7X,CAAA,CAAA,CAAA,EAEnB4B,MAAM,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAA6V,SAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;SAChB,CAAA,CAAA,CAAA;AAAA,QAAA,SA1CKQ,gBAAgBA,GAAA;AAAA,UAAA,OAAAT,iBAAA,CAAA9W,KAAA,CAAA,IAAA,EAAArC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAhB4Z,gBAAgB,CAAA;AAAA,OAAA,EAAA;AA4CtB;AACR;AACA;AAFQ,OAAA;AAAA,KAAA,EAAA;MAAAhZ,GAAA,EAAA,oBAAA;MAAAC,KAAA,GAAA,YAAA;QAAA,IAAAgZ,mBAAA,GAAA9Y,iBAAA,cAAAC,YAAA,EAAAC,CAAAA,CAAA,CAGA,SAAA6Y,SAAA,GAAA;AAAA,UAAA,IAAAC,OAAA;YAAAC,SAAA;YAAAzW,MAAA;AAAA0W,YAAAA,OAAA,GAAAja,SAAA,CAAA;AAAA,UAAA,OAAAgB,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAA8Y,UAAA,EAAA;YAAA,OAAAA,CAAAA,EAAAA,QAAAA,UAAA,CAAA3Y,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAyBwY,OAAO,GAAAE,OAAA,CAAAha,MAAA,GAAA,CAAA,IAAAga,OAAA,CAAA,CAAA,CAAA,KAAA/Z,SAAA,GAAA+Z,OAAA,CAAA,CAAA,CAAA,GAAG,IAAI,CAAA;AAC7BD,gBAAAA,SAAS,GAAGjV,IAAI,CAACC,GAAG,EAAE,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,IAErBD,EAAAA,IAAI,CAACC,GAAG,EAAE,GAAGgV,SAAS,GAAGD,OAAO,CAAA,EAAA;AAAAG,kBAAAA,UAAA,CAAA3Y,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAAA2Y,gBAAAA,UAAA,CAAA3Y,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OACd,IAAI,CAACqY,gBAAgB,EAAE,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAtCrW,MAAM,GAAA2W,UAAA,CAAAhY,CAAA,CAAA;gBAAA,IAERqB,CAAAA,MAAM,CAACoW,KAAK,EAAA;AAAAO,kBAAAA,UAAA,CAAA3Y,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AACZE,gBAAAA,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC,CAAA;AAAC,gBAAA,OAAAwY,UAAA,CAAAvY,CAAA,CAAA,CAAA,EAC5B4B,MAAM,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;AAGjB9B,gBAAAA,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAE6B,MAAM,CAAC,CAAA;AAAC2W,gBAAAA,UAAA,CAAA3Y,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OACzC,IAAI0P,OAAO,CAAC,UAAAC,OAAO,EAAA;AAAA,kBAAA,OAAI9L,UAAU,CAAC8L,OAAO,EAAE,IAAI,CAAC,CAAA;iBAAC,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAgJ,gBAAAA,UAAA,CAAA3Y,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;AAAA,gBAAA,MAGrD,IAAI8B,KAAK,CAAC,uDAAuD,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,OAAA6W,UAAA,CAAAvY,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAmY,SAAA,EAAA,IAAA,CAAA,CAAA;SAC3E,CAAA,CAAA,CAAA;AAAA,QAAA,SAhBKzQ,kBAAkBA,GAAA;AAAA,UAAA,OAAAwQ,mBAAA,CAAAxX,KAAA,CAAA,IAAA,EAAArC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAlBqJ,kBAAkB,CAAA;AAAA,OAAA,EAAA;AAkBxB;AACR;AACA;AAFQ,OAAA;AAAA,KAAA,EAAA;MAAAzI,GAAA,EAAA,WAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAsZ,SAASA,GAAG;AACR;QACA,IAAI,IAAI,CAACrQ,YAAY,EAAE;UACnB,OAAO,IAAI,CAACA,YAAY,CAAA;AAC5B,SAAA;;AAEA;AACA,QAAA,OAAO,IAAI,CAAA;AACf,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAlJ,GAAA,EAAA,SAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAuZ,OAAOA,GAAG;QACN,IAAI,CAACC,eAAe,EAAE,CAAA;;AAEtB;QACA,IAAI,IAAI,CAAC7Z,MAAM,EAAE;AACb,UAAA,IAAI,CAACA,MAAM,CAAC8Z,UAAU,EAAE,CAAA;UACxB,IAAI,CAAC9Z,MAAM,GAAG,IAAI,CAAA;AAClBiB,UAAAA,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC,CAAA;AAC1C,SAAA;QAEA,IAAI,CAACnB,aAAa,GAAG,KAAK,CAAA;AAC1B,QAAA,IAAI,CAACsB,gBAAgB,CAAC,aAAa,CAAC,CAAA;AACpCJ,QAAAA,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC,CAAA;AACrC,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAd,GAAA,EAAA,iBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAwZ,eAAeA,GAAG;QACd,IAAI,IAAI,CAAC/Z,YAAY,EAAE;AACnBgV,UAAAA,aAAa,CAAC,IAAI,CAAChV,YAAY,CAAC,CAAA;UAChC,IAAI,CAACA,YAAY,GAAG,IAAI,CAAA;AACxBmB,UAAAA,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC,CAAA;AACtD,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAd,GAAA,EAAA,iBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAA0Z,eAAeA,GAAG;AACd,QAAA,OAAO9c,MAAM,CAACmK,kBAAkB,IAAI,EAAE,CAAA;AAC1C,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAhH,GAAA,EAAA,mBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAA2Z,iBAAiBA,GAAG;QAChB/c,MAAM,CAACmK,kBAAkB,GAAG,EAAE,CAAA;AAC9B,QAAA,IAAI,CAAC/F,gBAAgB,CAAC,uBAAuB,CAAC,CAAA;AAClD,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAjB,GAAA,EAAA,cAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAqF,YAAYA,GAAG;AACXzE,QAAAA,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC,CAAA;;AAEtD;QACA,IAAM+Y,YAAY,GAAG,CAAC,SAAS,EAAE,cAAc,EAAE,qBAAqB,CAAC,CAAA;QACvE,IAAI1L,SAAS,GAAG,IAAI,CAAA;AAEpB,QAAA,KAAA,IAAA2L,GAAA,GAAA,CAAA,EAAAC,aAAA,GAAiBF,YAAY,EAAAC,GAAA,GAAAC,aAAA,CAAA1a,MAAA,EAAAya,GAAA,EAAE,EAAA;AAA1B,UAAA,IAAM9U,EAAE,GAAA+U,aAAA,CAAAD,GAAA,CAAA,CAAA;AACT3L,UAAAA,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAACrJ,EAAE,CAAC,CAAA;AACvC,UAAA,IAAImJ,SAAS,EAAE,MAAA;AACnB,SAAA;QAEA,IAAI,CAACA,SAAS,EAAE;AACZtN,UAAAA,OAAO,CAAC0D,IAAI,CAAC,oDAAoD,CAAC,CAAA;AAClE,UAAA,OAAA;AACJ,SAAA;;AAEA;QACA4J,SAAS,CAACI,SAAS,GAiClB,49CAAA,CAAA;AAED1N,QAAAA,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC,CAAA;AAC/C,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAd,GAAA,EAAA,gBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAW,cAAcA,GAAG;QACb,IAAMoZ,SAAS,GAAG,IAAIlI,eAAe,CAACjV,MAAM,CAACiK,QAAQ,CAACmT,MAAM,CAAC,CAAA;;AAE7D;AACA,QAAA,IAAID,SAAS,CAACE,GAAG,CAAC,OAAO,CAAC,IAAIF,SAAS,CAACE,GAAG,CAAC,YAAY,CAAC,EAAE;AACvDrZ,UAAAA,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC,CAAA;;AAEzC;AACA,UAAA,IAAMqZ,YAAY,GAAG;AACjB1b,YAAAA,KAAK,EAAEub,SAAS,CAACI,GAAG,CAAC,OAAO,CAAC;AAC7Bnb,YAAAA,KAAK,EAAE+a,SAAS,CAACI,GAAG,CAAC,OAAO,CAAC;AAC7BC,YAAAA,UAAU,EAAEL,SAAS,CAACI,GAAG,CAAC,YAAY,CAAC;AACvCE,YAAAA,OAAO,EAAEN,SAAS,CAACI,GAAG,CAAC,SAAS,CAAC;AACjChC,YAAAA,UAAU,EAAE4B,SAAS,CAACI,GAAG,CAAC,YAAY,CAAC;AACvChd,YAAAA,IAAI,EAAE4c,SAAS,CAACI,GAAG,CAAC,MAAM,CAAC;AAC3B1T,YAAAA,SAAS,EAAEsT,SAAS,CAACI,GAAG,CAAC,WAAW,CAAC;AACrCvW,YAAAA,SAAS,EAAEmW,SAAS,CAACI,GAAG,CAAC,WAAW,CAAA;WACvC,CAAA;AAEDvZ,UAAAA,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEqZ,YAAY,CAAC,CAAA;;AAEjD;AACA,UAAA,IAAI,CAACI,gBAAgB,CAACJ,YAAY,CAAC,CAAA;;AAEnC;AACA,UAAA,IAAI,CAACK,qBAAqB,CAACL,YAAY,CAAC,CAAA;AAExC,UAAA,OAAO,IAAI,CAAA;AACf,SAAA;AAEA,QAAA,OAAO,KAAK,CAAA;AAChB,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAna,GAAA,EAAA,kBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAsa,gBAAgBA,CAACzX,IAAI,EAAE;AACnBjC,QAAAA,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC,CAAA;;AAE3C;AACA,QAAA,IAAIgC,IAAI,CAAC7D,KAAK,IAAI6D,IAAI,CAAC7D,KAAK,KAAK,IAAI,CAACE,MAAM,CAACF,KAAK,EAAE;AAChD4B,UAAAA,OAAO,CAACU,KAAK,CAAC,6BAA6B,CAAC,CAAA;AAC5C,UAAA,MAAM,IAAIkB,KAAK,CAAC,2BAA2B,CAAC,CAAA;AAChD,SAAA;;AAEA;QACA,IAAIK,IAAI,CAACe,SAAS,IAAI,IAAI,CAAC1E,MAAM,CAACN,eAAe,EAAE;AAC/C,UAAA,IAAI,CAAC,IAAI,CAACA,eAAe,CAACiE,IAAI,CAAC,EAAE;AAC7BjC,YAAAA,OAAO,CAACU,KAAK,CAAC,sBAAsB,CAAC,CAAA;AACrC,YAAA,MAAM,IAAIkB,KAAK,CAAC,oBAAoB,CAAC,CAAA;AACzC,WAAA;AACJ,SAAA;;AAEA;AACA,QAAA,IAAIK,IAAI,CAAC4D,SAAS,IAAI,IAAI,CAAC+T,SAAS,CAAC3X,IAAI,CAAC4D,SAAS,CAAC,EAAE;AAClD7F,UAAAA,OAAO,CAACU,KAAK,CAAC,gBAAgB,CAAC,CAAA;AAC/B,UAAA,MAAM,IAAIkB,KAAK,CAAC,cAAc,CAAC,CAAA;AACnC,SAAA;AAEA5B,QAAAA,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC,CAAA;AAChD,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAd,GAAA,EAAA,uBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAua,qBAAqBA,CAAC1X,IAAI,EAAE;AACxBjC,QAAAA,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC,CAAA;QAEtD,IAAI;AACA;UACA,IAAMiB,YAAY,GAAG,IAAI,CAAC2Y,SAAS,CAAC5X,IAAI,CAACrE,KAAK,CAAC,CAAA;;AAE/C;AACA,UAAA,IAAMkc,QAAQ,GAAG;AACbL,YAAAA,OAAO,EAAEvY,YAAY,CAACuY,OAAO,IAAIxX,IAAI,CAACwX,OAAO;AAC7CD,YAAAA,UAAU,EAAEtY,YAAY,CAACsY,UAAU,IAAIvX,IAAI,CAACuX,UAAU;AACtDjC,YAAAA,UAAU,EAAErW,YAAY,CAACqW,UAAU,IAAItV,IAAI,CAACsV,UAAU;AACtDhb,YAAAA,IAAI,EAAE2E,YAAY,CAAC3E,IAAI,IAAI0F,IAAI,CAAC1F,IAAI;YACpCwd,GAAG,EAAE7Y,YAAY,CAAC6Y,GAAG;YACrB1W,GAAG,EAAEnC,YAAY,CAACmC,GAAAA;WACrB,CAAA;AAEDrD,UAAAA,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAE6Z,QAAQ,CAAC,CAAA;;AAEhD;AACA,UAAA,IAAI,CAACnT,kBAAkB,CAAC,wBAAwB,EAAE;AAC9CmT,YAAAA,QAAQ,EAAEA,QAAQ;AAClBR,YAAAA,YAAY,EAAErX,IAAI;AAClB4D,YAAAA,SAAS,EAAEvC,IAAI,CAACC,GAAG,EAAC;AACxB,WAAC,CAAC,CAAA;;AAEF;AACA,UAAA,IAAI,IAAI,CAACjF,MAAM,CAACJ,uBAAuB,EAAE;YACrC,IAAI,CAACI,MAAM,CAACJ,uBAAuB,CAAC4b,QAAQ,EAAE7X,IAAI,CAAC,CAAA;AACvD,WAAA;;AAEA;AACA,UAAA,IAAI,IAAI,CAAC3D,MAAM,CAACP,oBAAoB,EAAE;AAClC,YAAA,IAAI,CAACA,oBAAoB,CAAC+b,QAAQ,CAAC,CAAA;AACvC,WAAA;AAEA9Z,UAAAA,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC,CAAA;SAExD,CAAC,OAAOS,KAAK,EAAE;AACZV,UAAAA,OAAO,CAACU,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC,CAAA;;AAEpD;AACA,UAAA,IAAI,IAAI,CAACpC,MAAM,CAACH,qBAAqB,EAAE;YACnC,IAAI,CAACG,MAAM,CAACH,qBAAqB,CAACuC,KAAK,EAAEuB,IAAI,CAAC,CAAA;AAClD,WAAA;AAEA,UAAA,MAAMvB,KAAK,CAAA;AACf,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAvB,GAAA,EAAA,WAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAya,SAASA,CAACjc,KAAK,EAAE;QACb,IAAI;AACA;AACA,UAAA,IAAM+E,KAAK,GAAG/E,KAAK,CAACgF,KAAK,CAAC,GAAG,CAAC,CAAA;AAC9B,UAAA,IAAID,KAAK,CAACnE,MAAM,KAAK,CAAC,EAAE;AACpB,YAAA,MAAM,IAAIoD,KAAK,CAAC,qBAAqB,CAAC,CAAA;AAC1C,WAAA;AAEA,UAAA,IAAMmB,OAAO,GAAGJ,KAAK,CAAC,CAAC,CAAC,CAAA;UACxB,IAAMqX,OAAO,GAAGvY,IAAI,CAAC2B,KAAK,CAACF,IAAI,CAACH,OAAO,CAAC,CAAC,CAAA;AAEzC,UAAA,OAAOiX,OAAO,CAAA;SACjB,CAAC,OAAOtZ,KAAK,EAAE;AACZV,UAAAA,OAAO,CAACU,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC,CAAA;AAC9C,UAAA,MAAM,IAAIkB,KAAK,CAAC,oBAAoB,CAAC,CAAA;AACzC,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAzC,GAAA,EAAA,iBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAApB,eAAeA,CAACiE,IAAI,EAAE;AAClB;AACA,QAAA,IAAMgY,iBAAiB,GAAG,IAAI,CAACC,iBAAiB,CAACjY,IAAI,CAAC,CAAA;AACtD,QAAA,OAAOA,IAAI,CAACe,SAAS,KAAKiX,iBAAiB,CAAA;AAC/C,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAA9a,GAAA,EAAA,mBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAA8a,iBAAiBA,CAACjY,IAAI,EAAE;AACpB;QACA,IAAMc,OAAO,GAAAlB,EAAAA,CAAAA,MAAA,CAAMI,IAAI,CAACrE,KAAK,EAAA,GAAA,CAAA,CAAAiE,MAAA,CAAII,IAAI,CAAC7D,KAAK,EAAAyD,GAAAA,CAAAA,CAAAA,MAAA,CAAII,IAAI,CAACuX,UAAU,EAAA3X,GAAAA,CAAAA,CAAAA,MAAA,CAAII,IAAI,CAAC4D,SAAS,CAAE,CAAA;AAClF,QAAA,OAAOoR,IAAI,CAAClU,OAAO,CAAC,CAACxC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AACtC,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAApB,GAAA,EAAA,WAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAwa,SAASA,CAAC/T,SAAS,EAAE;AACjB,QAAA,IAAMsU,WAAW,GAAGvD,IAAI,CAACwD,KAAK,CAAC9W,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAA;AACjD,QAAA,IAAM8W,SAAS,GAAGC,QAAQ,CAACzU,SAAS,CAAC,CAAA;QACrC,IAAM0U,MAAM,GAAG,IAAI,CAACjc,MAAM,CAACL,WAAW,IAAI,GAAG,CAAC;;AAE9C,QAAA,OAAQkc,WAAW,GAAGE,SAAS,GAAIE,MAAM,CAAA;AAC7C,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAApb,GAAA,EAAA,sBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAArB,oBAAoBA,CAAC+b,QAAQ,EAAE;AAC3B,QAAA,IAAIU,WAAW,GAAG,IAAI,CAAClc,MAAM,CAACP,oBAAoB,CAAA;;AAElD;AACAyc,QAAAA,WAAW,GAAGA,WAAW,CACpB7c,OAAO,CAAC,WAAW,EAAEmc,QAAQ,CAACL,OAAO,CAAC,CACtC9b,OAAO,CAAC,cAAc,EAAEmc,QAAQ,CAACN,UAAU,CAAC,CAC5C7b,OAAO,CAAC,cAAc,EAAEmc,QAAQ,CAACvC,UAAU,CAAC,CAC5C5Z,OAAO,CAAC,QAAQ,EAAEmc,QAAQ,CAACvd,IAAI,CAAC,CAAA;AAErCyD,QAAAA,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEua,WAAW,CAAC,CAAA;;AAEhD;AACA7W,QAAAA,UAAU,CAAC,YAAM;AACb3H,UAAAA,MAAM,CAACiK,QAAQ,CAACC,IAAI,GAAGsU,WAAW,CAAA;SACrC,EAAE,GAAG,CAAC,CAAA;AACX,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAArb,GAAA,EAAA,eAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAqb,aAAaA,GAAG;AACZ,QAAA,IAAMrc,KAAK,GAAG,SAAS,GAAGkF,IAAI,CAACC,GAAG,EAAE,GAAG,GAAG,GAAGqT,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;AACpF,QAAA,IAAI,CAACzY,MAAM,CAACF,KAAK,GAAGA,KAAK,CAAA;AACzB,QAAA,OAAOA,KAAK,CAAA;AAChB,OAAA;AAAC,KAAA,CAAA,CAAA,CAAA;GAGL,EAAA,CAAA;EACApC,MAAM,CAACqC,MAAM,GAAGA,MAAM,CAAA;EACtBrC,MAAM,CAAC0e,cAAc,GAAG,IAAI,CAAA;;AAE5B;AACA1e,EAAAA,MAAM,CAAC2e,UAAU,GAAG,UAASrc,MAAM,EAAE;IACjC,IAAI;AACAtC,MAAAA,MAAM,CAAC0e,cAAc,GAAG,IAAIrc,MAAM,CAACC,MAAM,CAAC,CAAA;MAC1C,OAAOtC,MAAM,CAAC0e,cAAc,CAAA;KAC/B,CAAC,OAAOha,KAAK,EAAE;AACZV,MAAAA,OAAO,CAACU,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC,CAAA;AACnE,MAAA,MAAMA,KAAK,CAAA;AACf,KAAA;GACH,CAAA;AAEL,CAAC,EAAE1E,MAAM,CAAC"}