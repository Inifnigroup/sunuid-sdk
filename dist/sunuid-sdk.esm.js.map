{"version":3,"file":"sunuid-sdk.esm.js","sources":["../src/sunuid-sdk.js"],"sourcesContent":["/**\n * SunuID SDK - Package d'int√©gration pour partenaires\n * \n * @version 1.0.0\n * @author SunuID Team\n * @license MIT\n */\n\n(function(window) {\n    'use strict';\n\n    // Configuration par d√©faut\n    const DEFAULT_CONFIG = {\n        apiUrl: window.SunuIDConfig?.apiUrl || 'https://api.sunuid.fayma.sn',\n        clientId: null,\n        secretId: null,\n        type: 2, // Type par d√©faut (2 = authentification)\n        partnerName: null, // Nom du partenaire r√©cup√©r√© depuis l'API\n        theme: 'light',\n        language: 'fr',\n        autoRefresh: false, // D√©sactiv√© par d√©faut pour √©viter les appels r√©p√©titifs\n        refreshInterval: 30000, // 30 secondes\n        autoInit: true, // Initialisation automatique par d√©faut\n        onSuccess: null,\n        onError: null,\n        onStatusUpdate: null,\n        onExpired: null,\n        // Nouvelles options de s√©curit√©\n        enableSecurityLogs: true,\n        validateInputs: true,\n        maxRetries: 3,\n        requestTimeout: 10000, // 10 secondes\n        // Options d'initialisation s√©curis√©e\n        secureInit: false,\n        secureInitUrl: (() => {\n            if (window.SunuIDConfig?.apiUrl?.includes('api.sunuid.fayma.sn')) {\n                return 'https://api.sunuid.fayma.sn/secure-init.php';\n            }\n            return window.SunuIDConfig?.apiUrl?.replace('/api', '') + '/secure-init.php' || 'https://api.sunuid.fayma.sn/secure-init.php';\n        })(),\n        token: null,\n        // Configuration pour forcer l'utilisation du serveur distant\n        forceRemoteServer: true,\n        useLocalFallback: false\n    };\n\n    /**\n     * Classe principale SunuID\n     */\n    class SunuID {\n        constructor(config = {}) {\n            this.config = { ...DEFAULT_CONFIG, ...config };\n            this.qrCode = null;\n            this.refreshTimer = null;\n            this.isInitialized = false;\n            this.socket = null;\n            \n            // Initialisation asynchrone seulement si autoInit est activ√©\n            if (this.config.autoInit !== false) {\n                this.initPromise = this.init();\n            }\n        }\n\n        /**\n         * Initialisation du SDK\n         */\n        async init() {\n            try {\n                // Initialisation s√©curis√©e si activ√©e\n                if (this.config.secureInit) {\n                    await this.secureInit();\n                } else {\n                    // Validation s√©curis√©e des param√®tres\n                    if (this.config.validateInputs) {\n                        this.validateSecurityParams();\n                    }\n                }\n\n                // Log de s√©curit√© pour l'initialisation\n                this.logSecurityEvent('SDK_INIT_START', {\n                    apiUrl: this.config.apiUrl,\n                    type: this.config.type,\n                    secureInit: this.config.secureInit\n                });\n\n                // R√©cup√©rer les informations du partenaire depuis l'API\n                await this.fetchPartnerInfo();\n\n                // Obscurcir les credentials dans les logs\n                this.obfuscateCredentials();\n\n                this.isInitialized = true;\n                console.log('SunuID SDK initialis√© avec succ√®s');\n                console.log('üìã Configuration SDK:', {\n                    apiUrl: this.config.apiUrl,\n                    type: this.config.type,\n                    partnerName: this.config.partnerName,\n                    clientId: this.config.clientId ? '***' + this.config.clientId.slice(-4) : 'null',\n                    secretId: this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null',\n                    secureInit: this.config.secureInit,\n                    theme: this.config.theme\n                });\n                \n                this.logSecurityEvent('SDK_INIT_SUCCESS');\n                \n                // Initialiser la connexion WebSocket\n                this.initWebSocket();\n                \n            } catch (error) {\n                this.logSecurityEvent('SDK_INIT_ERROR', { error: error.message });\n                throw error;\n            }\n        }\n\n        /**\n         * Initialisation s√©curis√©e via PHP\n         */\n        async secureInit() {\n            try {\n                this.logSecurityEvent('SECURE_INIT_START');\n                \n                const initData = {\n                    type: this.config.type,\n                    partnerName: this.config.partnerName,\n                    theme: this.config.theme\n                };\n\n                const response = await fetch(this.config.secureInitUrl, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json'\n                    },\n                    body: JSON.stringify(initData)\n                });\n\n                if (!response.ok) {\n                    throw new Error(`Erreur HTTP: ${response.status}`);\n                }\n\n                const result = await response.json();\n                \n                console.log('üìã R√©ponse initialisation s√©curis√©e:', result);\n                \n                if (!result.success) {\n                    throw new Error(result.error || 'Erreur lors de l\\'initialisation s√©curis√©e');\n                }\n\n                // Stocker le token et les donn√©es s√©curis√©es\n                this.config.token = result.data.token;\n                this.config.apiUrl = result.data.api_url;\n                \n                // D√©coder le token pour r√©cup√©rer les credentials\n                const decodedToken = this.decodeSecureToken(result.data.token);\n                if (decodedToken) {\n                    this.config.clientId = decodedToken.client_id;\n                    this.config.secretId = decodedToken.secret_id;\n                } else {\n                    throw new Error('Impossible de d√©coder le token s√©curis√©');\n                }\n                \n                this.config.expiresIn = result.data.expires_in;\n                this.config.maxRequests = result.data.max_requests;\n                this.config.requestCount = 0;\n\n                this.logSecurityEvent('SECURE_INIT_SUCCESS', {\n                    expiresIn: result.data.expires_in,\n                    maxRequests: result.data.max_requests\n                });\n\n                console.log('‚úÖ Initialisation s√©curis√©e r√©ussie');\n                \n            } catch (error) {\n                this.logSecurityEvent('SECURE_INIT_ERROR', { error: error.message });\n                throw new Error(`√âchec de l'initialisation s√©curis√©e: ${error.message}`);\n            }\n        }\n\n        /**\n         * D√©coder le token s√©curis√©\n         */\n        decodeSecureToken(token) {\n            try {\n                const parts = token.split('.');\n                if (parts.length !== 2) {\n                    console.error('‚ùå Format de token invalide');\n                    return null;\n                }\n                \n                const [payload, signature] = parts;\n                \n                // D√©coder le payload (base64)\n                const decodedPayload = atob(payload);\n                const tokenData = JSON.parse(decodedPayload);\n                \n                // V√©rifier l'expiration\n                if (tokenData.exp && tokenData.exp < Date.now() / 1000) {\n                    console.error('‚ùå Token expir√©');\n                    return null;\n                }\n                \n                console.log('‚úÖ Token d√©cod√© avec succ√®s');\n                return tokenData;\n                \n            } catch (error) {\n                console.error('‚ùå Erreur d√©codage token:', error);\n                return null;\n            }\n        }\n\n        /**\n         * Initialiser la connexion WebSocket\n         */\n        initWebSocket() {\n            try {\n                // V√©rifier si Socket.IO est disponible\n                if (typeof io === 'undefined') {\n                    console.warn('‚ö†Ô∏è Socket.IO non disponible, WebSocket sera initialis√© plus tard');\n                    // R√©essayer apr√®s un d√©lai\n                    setTimeout(() => this.initWebSocket(), 1000);\n                    return;\n                }\n                \n                // Obtenir l'IP du client (simulation)\n                const ip = this.getClientIP();\n                \n                // Initialiser la connexion WebSocket si elle n'existe pas\n                if (!this.socket) {\n                    console.log('üåê Initialisation Socket.IO...');\n                    \n                    this.socket = io('wss://samasocket.fayma.sn:9443', {\n                        query: {\n                            token: this.config.clientId,\n                            type: 'web',\n                            userId: this.config.clientId,\n                            username: ip\n                        },\n                        transports: ['websocket', 'polling']\n                    });\n\n                    // Gestion des √©v√©nements WebSocket\n                    this.socket.on('connect', () => {\n                        console.log('üåê WebSocket connect√© avec succ√®s');\n                        console.log('üìä Socket ID:', this.socket.id);\n                        this.socket.connected = true;\n                    });\n\n                    this.socket.on('disconnect', (reason) => {\n                        console.log('‚ùå WebSocket d√©connect√©:', reason);\n                        this.socket.connected = false;\n                    });\n\n                    this.socket.on('connect_error', (error) => {\n                        console.error('‚ùå Erreur connexion WebSocket:', error);\n                        this.socket.connected = false;\n                    });\n\n                    // √âcouter les √©v√©nements sp√©cifiques\n                    this.socket.on('qr_status_update', (data) => {\n                        console.log('üì± Mise √† jour statut QR re√ßue:', data);\n                        this.handleQRStatusUpdate(data);\n                    });\n\n                    this.socket.on('qr_scan_success', (data) => {\n                        console.log('‚úÖ Scan QR r√©ussi re√ßu:', data);\n                        this.handleQRScanSuccess(data);\n                    });\n\n                    this.socket.on('qr_expired', (data) => {\n                        console.log('‚è∞ QR expir√© re√ßu:', data);\n                        this.handleQRExpired(data);\n                    });\n\n                    // √âcouter tous les √©v√©nements socket pour les logger\n                    this.socket.onAny((eventName, ...args) => {\n                        console.log(`üåê Socket Event [${eventName}]:`, args);\n                        \n                        // Si c'est un √©v√©nement qr_scan_initiated, afficher le loader\n                        if (eventName === 'qr_scan_initiated') {\n                            this.showQRLoader();\n                        }\n                    });\n                } else {\n                    console.log('üåê WebSocket d√©j√† connect√©');\n                }\n            } catch (error) {\n                console.error('‚ùå Erreur initialisation WebSocket:', error);\n            }\n        }\n\n        /**\n         * Obtenir l'IP du client (simulation)\n         */\n        getClientIP() {\n            // Simulation - en production, vous pourriez utiliser un service d'IP\n            return '127.0.0.1';\n        }\n\n        /**\n         * Obtenir le nom du type √† partir du num√©ro\n         */\n        getTypeName(type) {\n            switch(type) {\n                case 1: return 'KYC';\n                case 2: return 'AUTH';\n                case 3: return 'SIGNATURE';\n                default: return `TYPE-${type}`;\n            }\n        }\n\n        /**\n         * Validation s√©curis√©e des param√®tres\n         */\n        validateSecurityParams() {\n            const errors = [];\n            \n            // Validation du clientId\n            if (!this.config.clientId || typeof this.config.clientId !== 'string') {\n                errors.push('clientId invalide ou manquant');\n            } else if (this.config.clientId.length < 10) {\n                errors.push('clientId trop court');\n            }\n            \n            // Validation du secretId\n            if (!this.config.secretId || typeof this.config.secretId !== 'string') {\n                errors.push('secretId invalide ou manquant');\n            } else if (this.config.secretId.length < 32) {\n                errors.push('secretId trop court (minimum 32 caract√®res)');\n            }\n            \n            // Validation de l'URL API\n            if (!this.config.apiUrl || !this.isValidUrl(this.config.apiUrl)) {\n                errors.push('apiUrl invalide');\n            }\n            \n            // Validation du type\n            if (![1, 2, 3].includes(this.config.type)) {\n                errors.push('type invalide (doit √™tre 1, 2 ou 3)');\n            }\n            \n            if (errors.length > 0) {\n                this.logSecurityEvent('VALIDATION_ERROR', { errors });\n                throw new Error(`Param√®tres de s√©curit√© invalides: ${errors.join(', ')}`);\n            }\n            \n            this.logSecurityEvent('VALIDATION_SUCCESS');\n        }\n\n        /**\n         * Validation d'URL s√©curis√©e\n         */\n        isValidUrl(string) {\n            try {\n                const url = new URL(string);\n                return url.protocol === 'https:' || url.protocol === 'http:';\n            } catch (_) {\n                return false;\n            }\n        }\n\n        /**\n         * Logs de s√©curit√©\n         */\n        logSecurityEvent(event, data = {}) {\n            if (!this.config.enableSecurityLogs) return;\n            \n            const securityLog = {\n                timestamp: new Date().toISOString(),\n                event: event,\n                data: data,\n                userAgent: navigator.userAgent,\n                url: window.location.href\n            };\n            \n            console.warn('üîí [SECURITY]', securityLog);\n            \n            // Stocker les logs de s√©curit√© (optionnel)\n            if (!window.SunuIDSecurityLogs) {\n                window.SunuIDSecurityLogs = [];\n            }\n            window.SunuIDSecurityLogs.push(securityLog);\n        }\n\n        /**\n         * Chiffrement simple des credentials (pour √©viter l'exposition en clair)\n         */\n        obfuscateCredentials() {\n            // Stocker les vraies valeurs pour les logs de s√©curit√©\n            this.config.originalClientId = this.config.clientId;\n            this.config.originalSecretId = this.config.secretId;\n            \n            // Cr√©er des versions obfusqu√©es pour l'affichage uniquement\n            if (this.config.clientId) {\n                this.config.clientIdDisplay = this.config.clientId.replace(/(.{3}).*(.{3})/, '$1***$2');\n            }\n            if (this.config.secretId) {\n                this.config.secretIdDisplay = this.config.secretId.replace(/(.{4}).*(.{4})/, '$1***$2');\n            }\n        }\n\n        /**\n         * Validation des entr√©es utilisateur\n         */\n        sanitizeInput(input) {\n            if (typeof input !== 'string') return input;\n            \n            // Protection contre les injections XSS basiques\n            return input\n                .replace(/[<>]/g, '') // Supprimer les balises HTML\n                .replace(/javascript:/gi, '') // Supprimer les protocoles dangereux\n                .trim();\n        }\n\n        /**\n         * G√©rer la mise √† jour du statut QR\n         */\n        handleQRStatusUpdate(data) {\n            console.log('üì± QR Status Update:', data);\n            if (this.config.onStatusUpdate) {\n                this.config.onStatusUpdate(data);\n            }\n        }\n\n        /**\n         * G√©rer le succ√®s du scan QR\n         */\n        handleQRScanSuccess(data) {\n            console.log('‚úÖ QR Scan Success:', data);\n            if (this.config.onSuccess) {\n                this.config.onSuccess(data);\n            }\n        }\n\n        /**\n         * G√©rer l'expiration du QR\n         */\n        handleQRExpired(data) {\n            console.log('‚è∞ QR Expired:', data);\n            if (this.config.onExpired) {\n                this.config.onExpired(data);\n            }\n        }\n\n        /**\n         * √âmettre un √©v√©nement WebSocket\n         */\n        emitWebSocketEvent(event, data) {\n            if (this.socket && this.socket.connected) {\n                this.socket.emit(event, data);\n                console.log(`üì§ √âv√©nement WebSocket √©mis: ${event}`, data);\n            } else {\n                console.warn('‚ö†Ô∏è WebSocket non connect√©, impossible d\\'√©mettre l\\'√©v√©nement:', event);\n            }\n        }\n\n        /**\n         * Obtenir le statut de la connexion WebSocket\n         */\n        getWebSocketStatus() {\n            if (!this.socket) {\n                return 'not_initialized';\n            }\n            return this.socket.connected ? 'connected' : 'disconnected';\n        }\n\n        /**\n         * Forcer l'initialisation WebSocket (si Socket.IO devient disponible plus tard)\n         */\n        forceWebSocketInit() {\n            if (typeof io !== 'undefined' && !this.socket) {\n                console.log('üîÑ For√ßage de l\\'initialisation WebSocket...');\n                this.initWebSocket();\n            }\n        }\n\n        /**\n         * G√©n√©rer un QR code avec le type configur√©\n         */\n        async generateQR(containerId = 'sunuid-qr-container', options = {}) {\n            // Attendre l'initialisation si n√©cessaire\n            if (this.initPromise) {\n                await this.initPromise;\n                this.initPromise = null;\n            }\n            \n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n            \n            console.log('üéØ generateQR appel√© avec containerId:', containerId);\n            \n            // Attendre que les connexions soient pr√™tes\n            console.log('üîç Attente connexions API et WebSocket...');\n            try {\n                const connectionStatus = await this.waitForConnections(5000); // 5 secondes max\n                console.log('‚úÖ Connexions pr√™tes:', connectionStatus);\n            } catch (connectionError) {\n                console.error('‚ùå Erreur connexions:', connectionError.message);\n                throw new Error('Connexions non disponibles - Impossible de g√©n√©rer le QR code');\n            }\n\n            try {\n                // Utiliser uniquement le socketID comme contenu du QR\n                const socketId = this.socket ? this.socket.id : 'timeout-socket-id';\n                const qrContent = socketId;\n                \n                console.log('üìÑ Contenu QR pr√©par√©:', qrContent);\n                console.log('üîå Socket ID:', socketId);\n                \n                                    // G√©n√©rer le QR avec le contenu complet\n                    const partnerName = this.config.partnerName || 'Partner_unknown';\n                    const response = await this.makeRequest('/qr-generate', {\n                        type: this.config.type,\n                        content: qrContent, // Contenu personnalis√© pour le QR\n                        label: `${this.getTypeName(this.config.type)} ${partnerName}`, // Label du QR avec nom du partenaire\n                        ...options\n                    });\n\n                if (response.success) {\n                    // Construire l'URL compl√®te du QR code\n                    let qrImageUrl = response.data.qrCodeUrl;\n                    \n                    // Si l'URL est relative, la rendre absolue\n                    if (qrImageUrl.startsWith('/')) {\n                        qrImageUrl = `${this.config.apiUrl}${qrImageUrl}`;\n                    }\n                    \n                    this.currentQRUrl = qrImageUrl;\n                    \n                    console.log('‚úÖ QR code g√©n√©r√© par API principale:', qrImageUrl);\n                    console.log('üìÑ Contenu QR final:', qrContent);\n                    console.log('üè∑Ô∏è Label QR:', response.data.label);\n                    console.log('üÜî Session ID:', response.data.sessionId);\n                    \n                    // Afficher le QR code\n                    this.displayQRCode(containerId, qrImageUrl, this.config.type, options);\n                    \n                    this.startAutoRefresh(containerId, this.config.type, options);\n                    \n                    // √âmettre un √©v√©nement WebSocket pour la g√©n√©ration du QR\n                    this.emitWebSocketEvent('qr_generated', {\n                        type: this.config.type,\n                        qrCodeUrl: qrImageUrl,\n                        socketId: socketId,\n                        qrContent: qrContent,\n                        label: response.data.label,\n                        sessionId: response.data.sessionId,\n                        timestamp: Date.now()\n                    });\n                    \n                    return {\n                        ...response.data,\n                        qrCodeUrl: qrImageUrl,\n                        qrContent: qrContent,\n                        label: response.data.label,\n                        sessionId: response.data.sessionId\n                    };\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la g√©n√©ration du QR code');\n                }\n            } catch (error) {\n                console.error('Erreur API d√©tect√©e:', error.message);\n                console.error('Stack trace complet:', error.stack);\n                console.error('Configuration SDK:', {\n                    apiUrl: this.config.apiUrl,\n                    type: this.config.type,\n                    secureInit: this.config.secureInit,\n                    clientId: this.config.clientId ? '***' + this.config.clientId.slice(-4) : 'null',\n                    secretId: this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null'\n                });\n                \n                // Fallback vers le service local seulement si activ√©\n                if (this.config.useLocalFallback) {\n                    console.log('üîç V√©rification fallback local...');\n                    console.log('üîç Hostname:', window.location.hostname);\n                    console.log('üîç Protocol:', window.location.protocol);\n                    console.log('üîç URL compl√®te:', window.location.href);\n                    \n                    const isLocal = window.location.hostname === 'localhost' || \n                                   window.location.hostname === '127.0.0.1' || \n                                   window.location.protocol === 'file:';\n                    \n                    console.log('üîç Est local:', isLocal);\n                    \n                    if (isLocal) {\n                        console.log('üîÑ Tentative fallback vers service QR local...');\n                        console.log('‚ùå Fallback local non impl√©ment√© - utilisation serveur distant uniquement');\n                    } else {\n                        console.log('‚ùå Pas en local, pas de fallback');\n                    }\n                } else {\n                    console.log('üîí Fallback local d√©sactiv√©, utilisation serveur distant uniquement');\n                }\n                \n                console.log('Affichage du message \"Service non disponible\" pour type ' + this.config.type);\n                this.displayServiceUnavailable(containerId, this.config.type);\n                throw new Error('Service non disponible');\n            }\n        }\n\n\n\n        /**\n         * G√©n√©rer un QR code avec un type personnalis√©\n         */\n        async generateCustomQR(containerId, type, options = {}) {\n            // Attendre l'initialisation si n√©cessaire\n            if (this.initPromise) {\n                await this.initPromise;\n                this.initPromise = null;\n            }\n            \n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-generate', {\n                    type: type, // Type personnalis√© (1, 2, 3, etc.)\n                    ...options\n                });\n\n                if (response.success) {\n                    // Construire l'URL compl√®te de l'image QR avec la base URL pour les images\n                    const imageBaseUrl = 'https://sunuid.fayma.sn';\n                    const qrImageUrl = `${imageBaseUrl}${response.data.qrcode}`;\n                    this.displayQRCode(containerId, qrImageUrl, type, options);\n                    \n                    // Le QR code est d√©j√† g√©n√©r√© par l'API principale\n                    console.log('‚úÖ QR code personnalis√© g√©n√©r√© par API principale:', qrImageUrl);\n                    console.log('üìÑ Code de session:', response.data.code);\n                    console.log('üÜî Service ID:', response.data.service_id);\n                    \n                    this.startAutoRefresh(containerId, type, options);\n                    return {\n                        ...response.data,\n                        qrCodeUrl: qrImageUrl,\n                        sessionId: response.data.service_id\n                    };\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la g√©n√©ration du QR code');\n                }\n            } catch (error) {\n                console.error('Erreur API d√©tect√©e:', error.message);\n                console.error('Stack trace complet:', error.stack);\n                console.error('Configuration SDK (Custom):', {\n                    apiUrl: this.config.apiUrl,\n                    type: type,\n                    secureInit: this.config.secureInit,\n                    clientId: this.config.clientId ? '***' + this.config.clientId.slice(-4) : 'null',\n                    secretId: this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null'\n                });\n                console.log('Affichage du message \"Service non disponible\" pour type ' + type);\n                this.displayServiceUnavailable(containerId, type);\n                throw new Error('Service non disponible');\n            }\n        }\n\n        // Alias pour maintenir la compatibilit√©\n        async generateAuthQR(containerId, options = {}) {\n            return this.generateQR(containerId, options);\n        }\n\n        async generateKYCQR(containerId, options = {}) {\n            // Sauvegarder le type actuel\n            const originalType = this.config.type;\n            // Changer temporairement le type pour KYC\n            this.config.type = 1;\n            try {\n                return await this.generateQR(containerId, options);\n            } finally {\n                // Restaurer le type original\n                this.config.type = originalType;\n            }\n        }\n\n        async generateSignatureQR(containerId, options = {}) {\n            // Sauvegarder le type actuel\n            const originalType = this.config.type;\n            // Changer temporairement le type pour Signature\n            this.config.type = 3;\n            try {\n                return await this.generateQR(containerId, options);\n            } finally {\n                // Restaurer le type original\n                this.config.type = originalType;\n            }\n        }\n\n        /**\n         * V√©rifier le statut d'un QR code\n         */\n        async checkQRStatus(sessionId) {\n            if (!this.isInitialized) {\n                throw new Error('SunuID: SDK non initialis√©');\n            }\n\n            try {\n                const response = await this.makeRequest('/qr-status', {\n                    serviceId: sessionId\n                });\n\n                if (response.success) {\n                    return response.data;\n                } else {\n                    throw new Error(response.message || 'Erreur lors de la v√©rification du statut');\n                }\n            } catch (error) {\n                this.handleError(error);\n                throw error;\n            }\n        }\n\n        /**\n         * G√©n√©rer un QR code avec un contenu sp√©cifique\n         */\n        async generateQRWithContent(content, containerId, type, options = {}) {\n            console.log('üé® G√©n√©ration QR avec contenu:', content);\n            \n            try {\n                // Essayer d'abord le service QR local\n                if (window.location.hostname === 'localhost' || \n                    window.location.hostname === '127.0.0.1' || \n                    window.location.protocol === 'file:') {\n                    \n                    console.log('üè† Utilisation service QR local...');\n                    const localQRUrl = await this.generateQRLocal(content, containerId, type, options);\n                    if (localQRUrl) {\n                        return localQRUrl;\n                    }\n                }\n                \n                // Fallback vers le service QR distant\n                console.log('üåê Utilisation service QR distant...');\n                return await this.generateQRRemote(content, containerId, type, options);\n                \n            } catch (error) {\n                console.error('‚ùå Erreur g√©n√©ration QR:', error);\n                // Fallback vers affichage simple du contenu\n                this.displayQRContent(containerId, content, type, options);\n                return null;\n            }\n        }\n        \n        /**\n         * G√©n√©rer QR code avec service local\n         */\n        async generateQRLocal(content, containerId, type, options = {}) {\n            try {\n                const response = await fetch('http://localhost:8000/api/generate/text', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/x-www-form-urlencoded'\n                    },\n                    body: `text=${encodeURIComponent(content)}&size=300`\n                });\n                \n                if (response.ok) {\n                    const data = await response.json();\n                    const qrUrl = `data:image/png;base64,${data.qrcode}`;\n                    this.displayQRCode(containerId, qrUrl, type, options);\n                    return qrUrl;\n                }\n            } catch (error) {\n                console.log('‚ùå Service QR local non disponible:', error.message);\n            }\n            return null;\n        }\n        \n        /**\n         * G√©n√©rer QR code avec service distant\n         */\n        async generateQRRemote(content, containerId, type, options = {}) {\n            try {\n                const response = await fetch('https://api.sunuid.fayma.sn/qr-generate', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        text: content,\n                        size: 300,\n                        type: type\n                    })\n                });\n                \n                if (response.ok) {\n                    const data = await response.json();\n                    const qrUrl = `data:image/png;base64,${data.qrcode}`;\n                    this.displayQRCode(containerId, qrUrl, type, options);\n                    return qrUrl;\n                }\n            } catch (error) {\n                console.error('‚ùå Erreur service QR distant:', error);\n            }\n            \n            // Fallback vers affichage du contenu\n            this.displayQRContent(containerId, content, type, options);\n            return null;\n        }\n        \n        /**\n         * Afficher le contenu QR en texte (fallback)\n         */\n        displayQRContent(containerId, content, type, options = {}) {\n            const container = document.getElementById(containerId);\n            if (!container) {\n                throw new Error(`Conteneur avec l'ID \"${containerId}\" non trouv√©`);\n            }\n\n            const typeName = this.getTypeName(type);\n            container.innerHTML = `\n                <div class=\"sunuid-qr-code\">\n                    <div class=\"sunuid-qr-header\">\n                        <h3>${typeName}</h3>\n                    </div>\n                    <div class=\"sunuid-qr-content\" style=\"text-align: center; padding: 20px; background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 5px; margin: 10px 0;\">\n                        <p><strong>Contenu QR Code:</strong></p>\n                        <p style=\"font-family: monospace; font-size: 14px; word-break: break-all;\">${content}</p>\n                    </div>\n                    <div class=\"sunuid-qr-instructions\">\n                        <p>Contenu QR g√©n√©r√© avec le format: {type}-{code}-{socketid}</p>\n                    </div>\n                </div>\n            `;\n            \n            console.log('‚úÖ Contenu QR affich√©:', content);\n        }\n        \n        /**\n         * Afficher un QR code dans un conteneur\n         */\n        displayQRCode(containerId, qrUrl, type, options = {}) {\n            const container = document.getElementById(containerId);\n            if (!container) {\n                throw new Error(`Conteneur avec l'ID \"${containerId}\" non trouv√©`);\n            }\n\n            // Nettoyer le conteneur\n            container.innerHTML = '';\n\n            // Cr√©er l'√©l√©ment QR code\n            const qrElement = document.createElement('div');\n            qrElement.className = 'sunuid-qr-code';\n            \n            // Afficher l'image QR avec les informations\n            const typeName = this.getTypeName(type);\n            qrElement.innerHTML = `\n                <div class=\"sunuid-qr-header\">\n                    <h3>${type === 1 ? 'V√©rification KYC' : type === 2 ? 'Authentification' : type === 3 ? 'Signature' : 'Service Type ' + type}</h3>\n                </div>\n                <div class=\"sunuid-qr-image\">\n                    <img src=\"${qrUrl}\" alt=\"QR Code ${typeName}\" style=\"max-width: 300px; border: 1px solid #ddd; border-radius: 5px;\" />\n                </div>\n               \n            `;\n\n            container.appendChild(qrElement);\n\n            // Appliquer le th√®me\n            this.applyTheme(options.theme || this.config.theme);\n            \n            console.log('‚úÖ QR code affich√©:', qrUrl);\n        }\n\n        /**\n         * G√©n√©rer un QR code personnalis√© avec PHP Endroid\n         */\n        async generateCustomQRCode(content, label, options = {}) {\n            console.log('üé® D√©but g√©n√©ration QR personnalis√©...');\n            console.log('üìÑ Contenu:', content);\n            console.log('üè∑Ô∏è Label:', label);\n            \n            // Chercher le conteneur QR\n            let qrContainer = document.getElementById('sunuid-qr-container');\n            if (!qrContainer) {\n                qrContainer = document.getElementById('qr-container');\n            }\n            if (!qrContainer) {\n                console.error('‚ùå QR container not found');\n                return;\n            }\n            \n            console.log('‚úÖ QR container trouv√©');\n\n            // Nettoyer le conteneur\n            qrContainer.innerHTML = '<div style=\"text-align: center; padding: 20px;\"><p>G√©n√©ration QR code...</p></div>';\n\n                         try {\n                 // Utiliser directement l'API principale (plus fiable)\n                 console.log('üé® Tentative g√©n√©ration via API principale...');\n                 await this.generateQRPHP(content, label, qrContainer);\n                 console.log('‚úÖ QR code g√©n√©r√© avec succ√®s');\n                 \n             } catch (error) {\n                 console.error('‚ùå Erreur g√©n√©ration API:', error);\n                 \n                 // Fallback final : image par d√©faut\n                 console.log('‚ö†Ô∏è Affichage image par d√©faut');\n                 this.displayDefaultQR(qrContainer, content, label);\n             }\n        }\n\n        /**\n         * G√©n√©rer un QR code c√¥t√© client (m√©thode principale)\n         */\n        async generateQRClientSide(content, label, qrContainer) {\n            // Charger QRCode si n√©cessaire\n            await this.ensureQRCodeLibrary();\n            \n            if (typeof QRCode === 'undefined') {\n                throw new Error('QRCode library non disponible');\n            }\n            \n            // Cr√©er un canvas\n            const canvas = document.createElement('canvas');\n            canvas.width = 300;\n            canvas.height = 320;\n            const ctx = canvas.getContext('2d');\n            \n            // Fond blanc\n            ctx.fillStyle = '#FFFFFF';\n            ctx.fillRect(0, 0, 300, 320);\n            \n            // G√©n√©rer le QR code\n            return new Promise((resolve, reject) => {\n                QRCode.toCanvas(canvas, content, {\n                    width: 280,\n                    margin: 10,\n                    color: {\n                        dark: '#000000',\n                        light: '#FFFFFF'\n                    }\n                }, (error) => {\n                    if (error) {\n                        reject(error);\n                        return;\n                    }\n                    \n                    // Ajouter le label\n                    ctx.fillStyle = '#333333';\n                    ctx.font = 'bold 14px Arial';\n                    ctx.textAlign = 'center';\n                    ctx.fillText(label, 150, 305);\n                    \n                    // Convertir en data URL\n                    const dataUrl = canvas.toDataURL('image/png');\n                    \n                    // Stocker l'URL\n                    this.currentQRUrl = dataUrl;\n                    \n                    // Afficher le QR code\n                    qrContainer.innerHTML = `\n                        <div style=\"text-align: center; padding: 20px;\">\n                            <img src=\"${dataUrl}\" alt=\"QR Code\" style=\"max-width: 300px; border: 2px solid #ddd; border-radius: 10px;\">\n                        </div>\n                    `;\n                    \n                    // Afficher les instructions\n                    this.showQRInstructions(qrContainer);\n                    \n                    resolve();\n                });\n            });\n        }\n\n        /**\n         * G√©n√©rer un QR code via endpoint PHP (fallback)\n         */\n        async generateQRPHP(content, label, qrContainer) {\n                         // Construire l'URL - Utiliser l'API principale qui fonctionne\n             let qrGeneratorUrl;\n             if (this.config.forceRemoteServer) {\n                 qrGeneratorUrl = 'https://api.sunuid.fayma.sn/qr-generate';\n             } else if (this.config.apiUrl.includes('api.sunuid.fayma.sn')) {\n                 qrGeneratorUrl = 'https://api.sunuid.fayma.sn/qr-generate';\n             } else if (this.config.apiUrl.includes('localhost') || this.config.apiUrl.includes('127.0.0.1')) {\n                 qrGeneratorUrl = 'http://localhost:8000/api/generate/text';\n             } else {\n                 qrGeneratorUrl = this.config.apiUrl + '/qr-generate';\n             }\n            \n            console.log('üîó URL QR Generator:', qrGeneratorUrl);\n            \n                         // Adapter le format selon l'URL\n             let requestBody;\n             let contentType;\n             \n             if (qrGeneratorUrl.includes('localhost:8000')) {\n                 // Service local - format form-data\n                 contentType = 'application/x-www-form-urlencoded';\n                 requestBody = new URLSearchParams({\n                     text: content,\n                     size: 300,\n                     margin: 10,\n                     foreground_color: '000000',\n                     background_color: 'FFFFFF'\n                 });\n             } else {\n                 // Service distant - format JSON avec les param√®tres de l'API principale\n                 contentType = 'application/json';\n                 requestBody = JSON.stringify({\n                     type: this.config.type,\n                     client_id: this.config.clientId,\n                     secret_id: this.config.secretId,\n                     content: content,\n                     label: label\n                 });\n             }\n             \n             const response = await fetch(qrGeneratorUrl, {\n                 method: 'POST',\n                 headers: {\n                     'Content-Type': contentType,\n                     'Accept': 'application/json'\n                 },\n                 body: requestBody\n             });\n            \n            if (!response.ok) {\n                throw new Error(`Erreur HTTP: ${response.status}`);\n            }\n            \n            const responseData = await response.json();\n            \n                         if (!responseData.success) {\n                 throw new Error(`Erreur QR: ${responseData.error}`);\n             }\n             \n             // Adapter selon le format de r√©ponse\n             let qrImageUrl;\n             if (qrGeneratorUrl.includes('localhost:8000')) {\n                 // Service local\n                 qrImageUrl = responseData.data_uri;\n             } else {\n                 // Service distant - utiliser le format de l'API principale\n                 const imageBaseUrl = 'https://sunuid.fayma.sn';\n                 qrImageUrl = `${imageBaseUrl}${responseData.data.qrcode}`;\n             }\n             \n             // Stocker l'URL\n             this.currentQRUrl = qrImageUrl;\n             \n             // Afficher le QR code\n             qrContainer.innerHTML = `\n                 <div style=\"text-align: center; padding: 20px;\">\n                     <img src=\"${qrImageUrl}\" alt=\"QR Code\" style=\"max-width: 300px; border: 2px solid #ddd; border-radius: 10px;\">\n                 </div>\n             `;\n            \n            // Afficher les instructions\n            this.showQRInstructions(qrContainer);\n        }\n\n        /**\n         * Afficher une image QR par d√©faut (fallback final)\n         */\n        displayDefaultQR(qrContainer, content, label) {\n            qrContainer.innerHTML = `\n                <div style=\"text-align: center; padding: 20px; color: #666;\">\n                    <div style=\"width: 300px; height: 300px; background: #f0f0f0; border: 2px solid #ddd; border-radius: 10px; display: flex; align-items: center; justify-content: center; margin: 0 auto;\">\n                        <div>\n                            <p style=\"font-size: 24px; margin: 0;\">üì±</p>\n                            <p style=\"font-size: 14px; margin: 10px 0 0 0;\">QR Code</p>\n                        </div>\n                    </div>\n                    <p style=\"margin-top: 10px; font-size: 12px;\">${label}</p>\n                    <p style=\"font-size: 10px; color: #999; margin-top: 5px;\">Contenu: ${content}</p>\n                </div>\n            `;\n        }\n\n        /**\n         * S'assurer que la biblioth√®que QRCode est disponible\n         */\n        async ensureQRCodeLibrary() {\n            if (typeof QRCode !== 'undefined') {\n                console.log('‚úÖ QRCode library d√©j√† disponible');\n                return true;\n            }\n            \n            console.log('üì¶ Chargement QRCode library...');\n            \n            return new Promise((resolve, reject) => {\n                const script = document.createElement('script');\n                script.src = 'https://cdn.jsdelivr.net/npm/qrcode@1.5.3/lib/browser.min.js';\n                script.onload = () => {\n                    setTimeout(() => {\n                        if (typeof QRCode !== 'undefined') {\n                            console.log('‚úÖ QRCode library charg√©e');\n                            resolve(true);\n                        } else {\n                            console.error('‚ùå QRCode non disponible apr√®s chargement');\n                            reject(new Error('QRCode library non disponible apr√®s chargement'));\n                        }\n                    }, 200);\n                };\n                script.onerror = () => {\n                    console.error('‚ùå Erreur chargement QRCode library');\n                    reject(new Error('Erreur chargement QRCode library'));\n                };\n                document.head.appendChild(script);\n            });\n        }\n\n        /**\n         * Afficher les instructions pour le QR code\n         */\n        showQRInstructions(qrContainer) {\n            const instructionsElement = qrContainer.parentElement.querySelector('.sunuid-qr-instructions');\n            const statusElement = qrContainer.parentElement.querySelector('.sunuid-qr-status');\n            \n            if (instructionsElement) {\n                instructionsElement.style.display = 'block';\n                instructionsElement.classList.add('sunuid-qr-ready');\n            }\n            if (statusElement) {\n                statusElement.style.display = 'block';\n                statusElement.classList.add('sunuid-qr-ready');\n            }\n        }\n\n        /**\n         * Ajouter le logo au centre du QR code\n         */\n        addLogoToCenter(ctx, x, y, width, height) {\n            try {\n                // Cr√©er une image pour le logo\n                const logo = new Image();\n                logo.onload = () => {\n                    const logoSize = 40;\n                    const logoX = x + (width - logoSize) / 2;\n                    const logoY = y + (width - logoSize) / 2;\n\n                    // Dessiner un fond blanc pour le logo\n                    ctx.fillStyle = 'white';\n                    ctx.fillRect(logoX - 2, logoY - 2, logoSize + 4, logoSize + 4);\n\n                    // Dessiner le logo\n                    ctx.drawImage(logo, logoX, logoY, logoSize, logoSize);\n                };\n                logo.src = 'src/logoqr.png';\n            } catch (error) {\n                console.warn('Logo non disponible:', error);\n            }\n        }\n\n        /**\n         * Afficher l'image de fallback\n         */\n        displayFallbackImage() {\n            console.log('‚ö†Ô∏è Affichage de l\\'image de fallback');\n            const qrContainer = document.getElementById('sunuid-qr-container');\n            if (qrContainer) {\n                qrContainer.innerHTML = `\n                    <div style=\"text-align: center; padding: 20px; color: #666;\">\n                        <p>‚ö†Ô∏è G√©n√©ration QR personnalis√© non disponible</p>\n                        <p>Utilisation de l'image par d√©faut</p>\n                        <p><strong>Debug:</strong> QRCode disponible: ${typeof QRCode !== 'undefined'}</p>\n                        <p><strong>Debug:</strong> Container trouv√©: ${qrContainer !== null}</p>\n                    </div>\n                `;\n            }\n        }\n\n        /**\n         * Afficher \"Service non disponible\"\n         */\n        displayServiceUnavailable(containerId, type) {\n            console.log(`displayServiceUnavailable appel√©e pour ${containerId}, type: ${type}`);\n            const container = document.getElementById(containerId);\n            if (!container) {\n                console.error(`Container ${containerId} non trouv√©`);\n                return;\n            }\n\n            container.innerHTML = `\n                <div class=\"sunuid-service-unavailable\" style=\"\n                    text-align: center;\n                    padding: 40px 20px;\n                    background: #f8f9fa;\n                    border: 2px dashed #dee2e6;\n                    border-radius: 10px;\n                    color: #6c757d;\n                    font-family: Arial, sans-serif;\n                \">\n                    <div style=\"font-size: 48px; margin-bottom: 20px;\">‚ö†Ô∏è</div>\n                    <h3 style=\"margin: 0 0 10px 0; color: #495057;\">Service Non Disponible</h3>\n                    <p style=\"margin: 0; font-size: 14px;\">\n                        Le service d'authentification est temporairement indisponible.<br>\n                        Veuillez r√©essayer plus tard.\n                    </p>\n                    <div style=\"margin-top: 20px; font-size: 12px; color: #adb5bd;\">\n                        Type: ${String(type).toUpperCase()}\n                    </div>\n                </div>\n            `;\n        }\n\n        /**\n         * Rafra√Æchir un QR code\n         */\n        async refreshQR(containerId, options = {}) {\n            try {\n                // V√©rifier si on a d√©j√† un QR code g√©n√©r√©\n                if (this.currentQRUrl) {\n                    console.log('üîÑ V√©rification du statut du QR code existant...');\n                    \n                    // Option 1: V√©rifier le statut du QR code via l'API\n                    // (√† impl√©menter si l'API le supporte)\n                    \n                    // Option 2: R√©g√©n√©rer le QR code seulement si n√©cessaire\n                    // Pour l'instant, on r√©g√©n√®re pour s'assurer qu'il est √† jour\n                    const result = await this.generateQR(containerId, options);\n                    return result;\n                } else {\n                    console.log('üîÑ Pas de QR code existant, g√©n√©ration d\\'un nouveau...');\n                    const result = await this.generateQR(containerId, options);\n                    return result;\n                }\n            } catch (error) {\n                console.error('Erreur lors du rafra√Æchissement:', error.message);\n                this.displayServiceUnavailable(containerId, this.config.type);\n                throw error;\n            }\n        }\n\n        /**\n         * D√©marrer le rafra√Æchissement automatique\n         */\n        startAutoRefresh(containerId, type, options) {\n            if (!this.config.autoRefresh) return;\n\n            // Arr√™ter le timer existant s'il y en a un\n            if (this.refreshTimer) {\n                clearInterval(this.refreshTimer);\n                console.log('üîÑ Timer de rafra√Æchissement pr√©c√©dent arr√™t√©');\n            }\n\n            this.refreshTimer = setInterval(async () => {\n                try {\n                    console.log('üîÑ Rafra√Æchissement automatique du QR code...');\n                    await this.refreshQR(containerId, type, options);\n                } catch (error) {\n                    console.warn('Erreur lors du rafra√Æchissement automatique:', error);\n                }\n            }, this.config.refreshInterval);\n            \n            console.log(`üîÑ Timer de rafra√Æchissement d√©marr√© (${this.config.refreshInterval}ms)`);\n        }\n\n        /**\n         * D√©marrer le timer de compte √† rebours\n         */\n\n\n        /**\n         * Effectuer une requ√™te API s√©curis√©e\n         */\n        async makeRequest(endpoint, data) {\n            // Validation de s√©curit√©\n            if (!this.isInitialized) {\n                this.logSecurityEvent('REQUEST_BEFORE_INIT', { endpoint });\n                throw new Error('SDK non initialis√©');\n            }\n\n            // V√©rifier les limites de requ√™tes pour l'initialisation s√©curis√©e\n            if (this.config.secureInit) {\n                this.config.requestCount++;\n                if (this.config.requestCount > this.config.maxRequests) {\n                    this.logSecurityEvent('API_REQUEST_LIMIT_EXCEEDED', { \n                        requestCount: this.config.requestCount,\n                        maxRequests: this.config.maxRequests \n                    });\n                    throw new Error('Limite de requ√™tes d√©pass√©e');\n                }\n            }\n\n            // Sanitisation des donn√©es\n            const sanitizedData = this.sanitizeRequestData(data);\n            \n            // Debug: Afficher les donn√©es envoy√©es\n            console.log('üîç Debug makeRequest - endpoint:', endpoint);\n            console.log('üîç Debug makeRequest - apiUrl:', this.config.apiUrl);\n            console.log('üîç Debug makeRequest - url:', `${this.config.apiUrl}${endpoint}`);\n            console.log('üîç Debug makeRequest - data:', JSON.stringify(sanitizedData, null, 2));\n            console.log('üîç Debug makeRequest - secureInit:', this.config.secureInit);\n            console.log('üîç Debug makeRequest - isInitialized:', this.isInitialized);\n            \n            // Utiliser l'endpoint depuis la configuration si disponible\n            const endpointPath = window.SunuIDConfig?.endpoints?.[endpoint.replace('/', '')] || endpoint;\n            const url = `${this.config.apiUrl}${endpointPath}`;\n            \n            // Debug: Afficher l'URL finale\n            console.log('üîç URL finale construite:', url);\n            console.log('üîç EndpointPath:', endpointPath);\n            console.log('üîç SunuIDConfig endpoints:', JSON.stringify(window.SunuIDConfig?.endpoints));\n            \n            // Log de s√©curit√© pour la requ√™te\n            this.logSecurityEvent('API_REQUEST_START', {\n                endpoint: endpointPath,\n                url: url,\n                dataKeys: Object.keys(sanitizedData),\n                secureInit: this.config.secureInit\n            });\n            \n            let retryCount = 0;\n            const maxRetries = this.config.maxRetries;\n            \n            while (retryCount <= maxRetries) {\n                try {\n                    const controller = new AbortController();\n                    const timeoutId = setTimeout(() => controller.abort(), this.config.requestTimeout);\n                    \n                    // Headers minimaux (API SunuID n'accepte que les headers essentiels)\n                    const headers = {\n                        'Content-Type': 'application/json'\n                    };\n\n                    // Note: En mode s√©curis√©, les credentials sont dans le body\n                    // Pas besoin d'ajouter de header sp√©cial pour √©viter les probl√®mes CORS\n                    // if (this.config.secureInit && this.config.token) {\n                    //     headers['X-Secure-Token'] = this.config.token;\n                    // }\n                    \n                    const response = await fetch(url, {\n                        method: 'POST',\n                        headers: headers,\n                        body: JSON.stringify(sanitizedData),\n                        signal: controller.signal\n                    });\n\n                    clearTimeout(timeoutId);\n\n                    if (!response.ok) {\n                        const errorText = await response.text();\n                        let errorData;\n                        try {\n                            errorData = JSON.parse(errorText);\n                        } catch (e) {\n                            errorData = { message: errorText };\n                        }\n                        \n                        this.logSecurityEvent('API_REQUEST_ERROR', {\n                            status: response.status,\n                            statusText: response.statusText,\n                            error: errorData.message\n                        });\n                        \n                        throw new Error(errorData.message || `Erreur HTTP: ${response.status}`);\n                    }\n\n                    const result = await response.json();\n                    \n                    this.logSecurityEvent('API_REQUEST_SUCCESS', {\n                        endpoint: endpointPath,\n                        responseKeys: Object.keys(result)\n                    });\n                    \n                    return result;\n                    \n                } catch (error) {\n                    retryCount++;\n                    \n                    if (error.name === 'AbortError') {\n                        this.logSecurityEvent('API_REQUEST_TIMEOUT', { retryCount });\n                        if (retryCount > maxRetries) {\n                            throw new Error('Timeout de la requ√™te API');\n                        }\n                        continue;\n                    }\n                    \n                    if (retryCount > maxRetries) {\n                        this.logSecurityEvent('API_REQUEST_MAX_RETRIES', { \n                            retryCount, \n                            error: error.message \n                        });\n                        throw error;\n                    }\n                    \n                    // Attendre avant de r√©essayer\n                    await new Promise(resolve => setTimeout(resolve, 1000 * retryCount));\n                }\n            }\n        }\n\n        /**\n         * Sanitisation des donn√©es de requ√™te\n         */\n        sanitizeRequestData(data) {\n            const sanitized = {};\n            \n            for (const [key, value] of Object.entries(data)) {\n                if (typeof value === 'string') {\n                    sanitized[key] = this.sanitizeInput(value);\n                } else if (typeof value === 'object' && value !== null) {\n                    sanitized[key] = this.sanitizeRequestData(value);\n                } else {\n                    sanitized[key] = value;\n                }\n            }\n            \n            // Ajouter les credentials dans le body (API SunuID les attend ici)\n            // Utiliser les vraies valeurs (originales) si disponibles, sinon les valeurs directes\n            sanitized.client_id = this.config.originalClientId || this.config.clientId;\n            sanitized.secret_id = this.config.originalSecretId || this.config.secretId;\n            \n            // Debug: V√©rifier les credentials\n            console.log('üîç Credentials dans sanitizeRequestData - clientId:', this.config.clientId);\n            console.log('üîç Credentials dans sanitizeRequestData - secretId:', this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null');\n            console.log('üîç Credentials dans sanitizeRequestData - sanitizedClientId:', sanitized.client_id);\n            console.log('üîç Credentials dans sanitizeRequestData - sanitizedSecretId:', sanitized.secret_id ? '***' + sanitized.secret_id.slice(-4) : 'null');\n            console.log('üîç Credentials dans sanitizeRequestData - data complet:', JSON.stringify(sanitized, null, 2));\n            \n            // Debug: V√©rifier les credentials\n            console.log('üîç Credentials dans sanitizeRequestData - clientId:', this.config.clientId);\n            console.log('üîç Credentials dans sanitizeRequestData - secretId:', this.config.secretId ? '***' + this.config.secretId.slice(-4) : 'null');\n            console.log('üîç Credentials dans sanitizeRequestData - sanitizedClientId:', sanitized.client_id);\n            console.log('üîç Credentials dans sanitizeRequestData - sanitizedSecretId:', sanitized.secret_id ? '***' + sanitized.secret_id.slice(-4) : 'null');\n            console.log('üîç Credentials dans sanitizeRequestData - data complet:', JSON.stringify(sanitized, null, 2));\n            \n            return sanitized;\n        }\n\n        /**\n         * G√©n√©rer un ID de requ√™te unique\n         */\n        generateRequestId() {\n            return 'req_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n        }\n\n        /**\n         * G√©n√©rer un code de session unique\n         */\n        generateSessionCode() {\n            const timestamp = Date.now();\n            const random = Math.random().toString(36).substr(2, 9);\n            const code = `${timestamp}_${random}`;\n            return btoa(code); // Encoder en base64\n        }\n\n        /**\n         * R√©cup√©rer les informations du partenaire depuis l'API\n         */\n        async fetchPartnerInfo() {\n            try {\n                const response = await this.makeRequest('/debug', {\n                    type: this.config.type,\n                    client_id: this.config.clientId,\n                    secret_id: this.config.secretId\n                });\n\n                console.log('üìã R√©ponse debug API:', response);\n\n                if (response.success && response.authentication && response.authentication.auth_test) {\n                    const authTest = response.authentication.auth_test;\n                    this.config.partnerId = authTest.partner_id;\n                    \n                    // R√©cup√©rer le service_id depuis la r√©ponse\n                    if (response.service_id) {\n                        this.config.serviceId = response.service_id;\n                    } else {\n                        // Fallback: utiliser le partner_id comme service_id\n                        this.config.serviceId = authTest.partner_id;\n                    }\n                    \n                    // Utiliser le partner_id pour d√©terminer le nom du partenaire\n                    // Pour l'instant, on utilise une logique simple bas√©e sur l'ID\n                    if (authTest.partner_id === 21) {\n                        this.config.partnerName = 'Fayma';\n                    } else {\n                        this.config.partnerName = `Partner_${authTest.partner_id}`;\n                    }\n                    \n                    console.log('‚úÖ Informations partenaire r√©cup√©r√©es:', {\n                        partnerName: this.config.partnerName,\n                        partnerId: this.config.partnerId,\n                        serviceId: this.config.serviceId\n                    });\n                } else {\n                    console.warn('‚ö†Ô∏è Impossible de r√©cup√©rer les informations du partenaire, utilisation du partner_id');\n                    this.config.partnerName = `Partner_${this.config.partnerId || 'unknown'}`;\n                }\n            } catch (error) {\n                console.warn('‚ö†Ô∏è Erreur lors de la r√©cup√©ration des informations du partenaire:', error.message);\n                this.config.partnerName = 'Partner_unknown';\n            }\n        }\n\n        /**\n         * Appliquer le th√®me\n         */\n        applyTheme(theme) {\n            const container = document.querySelector('.sunuid-qr-code');\n            if (container) {\n                container.className = `sunuid-qr-code sunuid-theme-${theme}`;\n            }\n        }\n\n        /**\n         * G√©rer les erreurs\n         */\n        handleError(error) {\n            console.error('SunuID SDK Error:', error);\n            \n            if (this.config.onError) {\n                this.config.onError(error);\n            }\n        }\n\n        /**\n         * V√©rifier le statut des connexions\n         */\n        async checkConnections() {\n            const status = {\n                api: false,\n                websocket: false,\n                ready: false\n            };\n            \n            // V√©rifier l'API en utilisant l'endpoint debug\n            try {\n                const testResponse = await fetch(this.config.apiUrl + '/debug', {\n                    method: 'GET',\n                    timeout: 3000\n                });\n                \n                if (testResponse.ok) {\n                    const debugData = await testResponse.json();\n                    status.api = debugData.status === 'operational';\n                    console.log('üîç API Status:', debugData.status);\n                } else {\n                    status.api = false;\n                }\n            } catch (error) {\n                console.log('üîç Test API √©chou√©:', error.message);\n                status.api = false;\n            }\n            \n            // V√©rifier le WebSocket\n            status.websocket = this.socket && this.socket.connected;\n            \n            // Connexions pr√™tes si API est accessible\n            status.ready = status.api;\n            \n            return status;\n        }\n        \n        /**\n         * Attendre que les connexions soient pr√™tes\n         */\n        async waitForConnections(timeout = 5000) {\n            const startTime = Date.now();\n            \n            while (Date.now() - startTime < timeout) {\n                const status = await this.checkConnections();\n                \n                if (status.ready) {\n                    console.log('‚úÖ Connexions pr√™tes');\n                    return status;\n                }\n                \n                console.log('‚è≥ Attente connexions...', status);\n                await new Promise(resolve => setTimeout(resolve, 1000)); // V√©rification toutes les secondes\n            }\n            \n            throw new Error('Timeout connexions - Impossible de g√©n√©rer le QR code');\n        }\n        \n        /**\n         * Obtenir l'URL du QR code g√©n√©r√©\n         */\n        getQRCode() {\n            // Retourner l'URL du QR code si disponible\n            if (this.currentQRUrl) {\n                return this.currentQRUrl;\n            }\n            \n            // Sinon, retourner une URL par d√©faut ou null\n            return null;\n        }\n\n        /**\n         * Nettoyer les ressources\n         */\n        destroy() {\n            this.stopAutoRefresh();\n            \n            // Fermer la connexion WebSocket\n            if (this.socket) {\n                this.socket.disconnect();\n                this.socket = null;\n                console.log('üåê WebSocket d√©connect√©');\n            }\n            \n            this.isInitialized = false;\n            this.logSecurityEvent('SDK_DESTROY');\n            console.log('SunuID SDK d√©truit');\n        }\n\n        /**\n         * Arr√™ter le rafra√Æchissement automatique\n         */\n        stopAutoRefresh() {\n            if (this.refreshTimer) {\n                clearInterval(this.refreshTimer);\n                this.refreshTimer = null;\n                console.log('üîÑ Timer de rafra√Æchissement arr√™t√©');\n            }\n        }\n\n        /**\n         * Obtenir les logs de s√©curit√©\n         */\n        getSecurityLogs() {\n            return window.SunuIDSecurityLogs || [];\n        }\n\n        /**\n         * Nettoyer les logs de s√©curit√©\n         */\n        clearSecurityLogs() {\n            window.SunuIDSecurityLogs = [];\n            this.logSecurityEvent('SECURITY_LOGS_CLEARED');\n        }\n\n        /**\n         * Afficher un loader pendant le scan du QR code\n         */\n        showQRLoader() {\n            console.log('üîÑ Affichage du loader - Scan QR initi√©');\n            \n            // Chercher le conteneur QR dans diff√©rents IDs possibles\n            const containerIds = ['qr-area', 'qr-container', 'sunuid-qr-container'];\n            let container = null;\n            \n            for (const id of containerIds) {\n                container = document.getElementById(id);\n                if (container) break;\n            }\n            \n            if (!container) {\n                console.warn('‚ö†Ô∏è Conteneur QR non trouv√© pour afficher le loader');\n                return;\n            }\n            \n            // Remplacer le contenu par un loader anim√©\n            container.innerHTML = `\n                <div style=\"\n                    text-align: center;\n                    padding: 40px 20px;\n                    background: #f8f9fa;\n                    border: 2px solid #007bff;\n                    border-radius: 10px;\n                    color: #007bff;\n                    font-family: Arial, sans-serif;\n                \">\n                    <div style=\"\n                        width: 60px;\n                        height: 60px;\n                        border: 4px solid #e3f2fd;\n                        border-top: 4px solid #007bff;\n                        border-radius: 50%;\n                        animation: spin 1s linear infinite;\n                        margin: 0 auto 20px auto;\n                    \"></div>\n                    <h3 style=\"margin: 0 0 10px 0; color: #007bff;\">üîç Scan en cours...</h3>\n                    <p style=\"margin: 0; font-size: 14px;\">\n                        Veuillez patienter pendant la v√©rification de votre identit√©.\n                    </p>\n                    <div style=\"margin-top: 15px; font-size: 12px; color: #6c757d;\">\n                        ‚è±Ô∏è Traitement en cours...\n                    </div>\n                </div>\n                <style>\n                    @keyframes spin {\n                        0% { transform: rotate(0deg); }\n                        100% { transform: rotate(360deg); }\n                    }\n                </style>\n            `;\n            \n            console.log('‚úÖ Loader affich√© avec succ√®s');\n        }\n    }\n\n    // Exposer la classe globalement\n    window.SunuID = SunuID;\n    window.sunuidInstance = null;\n\n    // Fonction d'initialisation globale\n    window.initSunuID = function(config) {\n        try {\n            window.sunuidInstance = new SunuID(config);\n            return window.sunuidInstance;\n        } catch (error) {\n            console.error('Erreur lors de l\\'initialisation de SunuID:', error);\n            throw error;\n        }\n    };\n\n})(window); "],"names":["window","_window$SunuIDConfig","DEFAULT_CONFIG","apiUrl","SunuIDConfig","clientId","secretId","type","partnerName","theme","language","autoRefresh","refreshInterval","autoInit","onSuccess","onError","onStatusUpdate","onExpired","enableSecurityLogs","validateInputs","maxRetries","requestTimeout","secureInit","secureInitUrl","_window$SunuIDConfig2","_window$SunuIDConfig3","includes","replace","token","forceRemoteServer","useLocalFallback","SunuID","config","arguments","length","undefined","_classCallCheck","_objectSpread","qrCode","refreshTimer","isInitialized","socket","initPromise","init","_createClass","key","value","_init","_asyncToGenerator","_regenerator","m","_callee","_t","w","_context","p","n","validateSecurityParams","logSecurityEvent","fetchPartnerInfo","obfuscateCredentials","console","log","slice","initWebSocket","v","error","message","a","apply","_secureInit","_callee2","initData","response","result","decodedToken","_t2","_context2","fetch","method","headers","body","JSON","stringify","ok","Error","concat","status","json","success","data","api_url","decodeSecureToken","client_id","secret_id","expiresIn","expires_in","maxRequests","max_requests","requestCount","parts","split","_parts","_slicedToArray","payload","signature","decodedPayload","atob","tokenData","parse","exp","Date","now","_this","io","warn","setTimeout","ip","getClientIP","query","userId","username","transports","on","id","connected","reason","handleQRStatusUpdate","handleQRScanSuccess","handleQRExpired","onAny","eventName","_len","args","Array","_key","showQRLoader","getTypeName","errors","push","isValidUrl","join","string","url","URL","protocol","_","event","securityLog","timestamp","toISOString","userAgent","navigator","location","href","SunuIDSecurityLogs","originalClientId","originalSecretId","clientIdDisplay","secretIdDisplay","sanitizeInput","input","trim","emitWebSocketEvent","emit","getWebSocketStatus","forceWebSocketInit","_generateQR","_callee3","containerId","options","connectionStatus","socketId","qrContent","qrImageUrl","isLocal","_args3","_t3","_t4","_context3","waitForConnections","makeRequest","content","label","qrCodeUrl","startsWith","currentQRUrl","sessionId","displayQRCode","startAutoRefresh","stack","hostname","displayServiceUnavailable","generateQR","_generateCustomQR","_callee4","imageBaseUrl","_args4","_t5","_context4","qrcode","code","service_id","generateCustomQR","_x","_x2","_generateAuthQR","_callee5","_args5","_context5","generateAuthQR","_x3","_generateKYCQR","_callee6","originalType","_args6","_context6","f","generateKYCQR","_x4","_generateSignatureQR","_callee7","_args7","_context7","generateSignatureQR","_x5","_checkQRStatus","_callee8","_t6","_context8","serviceId","handleError","checkQRStatus","_x6","_generateQRWithContent","_callee9","localQRUrl","_args9","_t7","_context9","generateQRLocal","generateQRRemote","displayQRContent","generateQRWithContent","_x7","_x8","_x9","_generateQRLocal","_callee0","qrUrl","_args0","_t8","_context0","encodeURIComponent","_x0","_x1","_x10","_generateQRRemote","_callee1","_args1","_t9","_context1","text","size","_x11","_x12","_x13","container","document","getElementById","typeName","innerHTML","qrElement","createElement","className","appendChild","applyTheme","_generateCustomQRCode","_callee10","qrContainer","_args10","_t0","_context10","generateQRPHP","displayDefaultQR","generateCustomQRCode","_x14","_x15","_generateQRClientSide","_callee11","_this2","canvas","ctx","_context11","ensureQRCodeLibrary","QRCode","width","height","getContext","fillStyle","fillRect","Promise","resolve","reject","toCanvas","margin","color","dark","light","font","textAlign","fillText","dataUrl","toDataURL","showQRInstructions","generateQRClientSide","_x16","_x17","_x18","_generateQRPHP","_callee12","qrGeneratorUrl","requestBody","contentType","responseData","_context12","URLSearchParams","foreground_color","background_color","data_uri","_x19","_x20","_x21","_ensureQRCodeLibrary","_callee13","_context13","script","src","onload","onerror","head","instructionsElement","parentElement","querySelector","statusElement","style","display","classList","add","addLogoToCenter","x","y","logo","Image","logoSize","logoX","logoY","drawImage","displayFallbackImage","String","toUpperCase","_refreshQR","_callee14","_result","_args14","_t1","_context14","refreshQR","_x22","_this3","clearInterval","setInterval","_callee15","_t10","_context15","_makeRequest","_callee16","endpoint","_window$SunuIDConfig4","_window$SunuIDConfig5","_this4","sanitizedData","endpointPath","retryCount","_loop","_ret","_context17","sanitizeRequestData","endpoints","dataKeys","Object","keys","controller","timeoutId","errorText","errorData","_t11","_context16","AbortController","abort","signal","clearTimeout","e","statusText","responseKeys","name","d","_regeneratorValues","_x23","_x24","sanitized","_i","_Object$entries","entries","_Object$entries$_i","_typeof","generateRequestId","Math","random","toString","substr","generateSessionCode","btoa","_fetchPartnerInfo","_callee17","authTest","_t12","_context18","authentication","auth_test","partnerId","partner_id","_checkConnections","_callee18","testResponse","debugData","_t13","_context19","api","websocket","ready","timeout","checkConnections","_waitForConnections","_callee19","startTime","_args20","_context20","getQRCode","destroy","stopAutoRefresh","disconnect","getSecurityLogs","clearSecurityLogs","containerIds","_i2","_containerIds","sunuidInstance","initSunuID"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC,UAASA,MAAM,EAAAC,oBAAA,EAAE;;AAGd;AACA,EAAA,IAAMC,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,CAAA,CAAAF,oBAAA,GAAAD,MAAM,CAACI,YAAY,MAAAH,IAAAA,IAAAA,oBAAA,KAAnBA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,oBAAA,CAAqBE,MAAM,KAAI,6BAA6B;AACpEE,IAAAA,QAAQ,EAAE,IAAI;AACdC,IAAAA,QAAQ,EAAE,IAAI;AACdC,IAAAA,IAAI,EAAE,CAAC;AAAE;AACTC,IAAAA,WAAW,EAAE,IAAI;AAAE;AACnBC,IAAAA,KAAK,EAAE,OAAO;AACdC,IAAAA,QAAQ,EAAE,IAAI;AACdC,IAAAA,WAAW,EAAE,KAAK;AAAE;AACpBC,IAAAA,eAAe,EAAE,KAAK;AAAE;AACxBC,IAAAA,QAAQ,EAAE,IAAI;AAAE;AAChBC,IAAAA,SAAS,EAAE,IAAI;AACfC,IAAAA,OAAO,EAAE,IAAI;AACbC,IAAAA,cAAc,EAAE,IAAI;AACpBC,IAAAA,SAAS,EAAE,IAAI;AACf;AACAC,IAAAA,kBAAkB,EAAE,IAAI;AACxBC,IAAAA,cAAc,EAAE,IAAI;AACpBC,IAAAA,UAAU,EAAE,CAAC;AACbC,IAAAA,cAAc,EAAE,KAAK;AAAE;AACvB;AACAC,IAAAA,UAAU,EAAE,KAAK;AACjBC,IAAAA,aAAa,EAAG,UAAAC,qBAAA,EAAAC,qBAAA,EAAM;MAClB,IAAAD,CAAAA,qBAAA,GAAIxB,MAAM,CAACI,YAAY,MAAAoB,IAAAA,IAAAA,qBAAA,KAAAA,KAAAA,CAAAA,IAAAA,CAAAA,qBAAA,GAAnBA,qBAAA,CAAqBrB,MAAM,MAAA,IAAA,IAAAqB,qBAAA,KAA3BA,KAAAA,CAAAA,IAAAA,qBAAA,CAA6BE,QAAQ,CAAC,qBAAqB,CAAC,EAAE;AAC9D,QAAA,OAAO,6CAA6C,CAAA;AACxD,OAAA;AACA,MAAA,OAAO,CAAAD,CAAAA,qBAAA,GAAAzB,MAAM,CAACI,YAAY,MAAAqB,IAAAA,IAAAA,qBAAA,KAAAA,KAAAA,CAAAA,IAAAA,CAAAA,qBAAA,GAAnBA,qBAAA,CAAqBtB,MAAM,MAAAsB,IAAAA,IAAAA,qBAAA,KAA3BA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,qBAAA,CAA6BE,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,IAAG,kBAAkB,IAAI,6CAA6C,CAAA;AACjI,KAAC,EAAG;AACJC,IAAAA,KAAK,EAAE,IAAI;AACX;AACAC,IAAAA,iBAAiB,EAAE,IAAI;AACvBC,IAAAA,gBAAgB,EAAE,KAAA;GACrB,CAAA;;AAED;AACJ;AACA;AAFI,EAAA,IAGMC,MAAM,gBAAA,YAAA;AACR,IAAA,SAAAA,SAAyB;AAAA,MAAA,IAAbC,MAAM,GAAAC,SAAA,CAAAC,MAAA,GAAA,CAAA,IAAAD,SAAA,CAAA,CAAA,CAAA,KAAAE,SAAA,GAAAF,SAAA,CAAA,CAAA,CAAA,GAAG,EAAE,CAAA;AAAAG,MAAAA,eAAA,OAAAL,MAAA,CAAA,CAAA;MACnB,IAAI,CAACC,MAAM,GAAAK,cAAA,CAAAA,cAAA,CAAQnC,EAAAA,EAAAA,cAAc,CAAK8B,EAAAA,MAAM,CAAE,CAAA;MAC9C,IAAI,CAACM,MAAM,GAAG,IAAI,CAAA;MAClB,IAAI,CAACC,YAAY,GAAG,IAAI,CAAA;MACxB,IAAI,CAACC,aAAa,GAAG,KAAK,CAAA;MAC1B,IAAI,CAACC,MAAM,GAAG,IAAI,CAAA;;AAElB;AACA,MAAA,IAAI,IAAI,CAACT,MAAM,CAACnB,QAAQ,KAAK,KAAK,EAAE;AAChC,QAAA,IAAI,CAAC6B,WAAW,GAAG,IAAI,CAACC,IAAI,EAAE,CAAA;AAClC,OAAA;AACJ,KAAA;;AAEA;AACR;AACA;IAFQ,OAAAC,YAAA,CAAAb,MAAA,EAAA,CAAA;MAAAc,GAAA,EAAA,MAAA;MAAAC,KAAA,GAAA,YAAA;QAAA,IAAAC,KAAA,GAAAC,iBAAA,cAAAC,YAAA,EAAAC,CAAAA,CAAA,CAGA,SAAAC,OAAA,GAAA;AAAA,UAAA,IAAAC,EAAA,CAAA;AAAA,UAAA,OAAAH,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAAC,QAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,QAAA,CAAAC,CAAA,GAAAD,QAAA,CAAAE,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAF,gBAAAA,QAAA,CAAAC,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,IAAA,CAGY,IAAI,CAACvB,MAAM,CAACV,UAAU,EAAA;AAAAgC,kBAAAA,QAAA,CAAAE,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAAAF,gBAAAA,QAAA,CAAAE,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OAChB,IAAI,CAAClC,UAAU,EAAE,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAgC,gBAAAA,QAAA,CAAAE,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;AAEvB;AACA,gBAAA,IAAI,IAAI,CAACxB,MAAM,CAACb,cAAc,EAAE;kBAC5B,IAAI,CAACsC,sBAAsB,EAAE,CAAA;AACjC,iBAAA;AAAC,cAAA,KAAA,CAAA;AAGL;AACA,gBAAA,IAAI,CAACC,gBAAgB,CAAC,gBAAgB,EAAE;AACpCvD,kBAAAA,MAAM,EAAE,IAAI,CAAC6B,MAAM,CAAC7B,MAAM;AAC1BI,kBAAAA,IAAI,EAAE,IAAI,CAACyB,MAAM,CAACzB,IAAI;AACtBe,kBAAAA,UAAU,EAAE,IAAI,CAACU,MAAM,CAACV,UAAAA;AAC5B,iBAAC,CAAC,CAAA;;AAEF;AAAAgC,gBAAAA,QAAA,CAAAE,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OACM,IAAI,CAACG,gBAAgB,EAAE,CAAA;AAAA,cAAA,KAAA,CAAA;AAE7B;gBACA,IAAI,CAACC,oBAAoB,EAAE,CAAA;gBAE3B,IAAI,CAACpB,aAAa,GAAG,IAAI,CAAA;AACzBqB,gBAAAA,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC,CAAA;AAChDD,gBAAAA,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE;AACjC3D,kBAAAA,MAAM,EAAE,IAAI,CAAC6B,MAAM,CAAC7B,MAAM;AAC1BI,kBAAAA,IAAI,EAAE,IAAI,CAACyB,MAAM,CAACzB,IAAI;AACtBC,kBAAAA,WAAW,EAAE,IAAI,CAACwB,MAAM,CAACxB,WAAW;kBACpCH,QAAQ,EAAE,IAAI,CAAC2B,MAAM,CAAC3B,QAAQ,GAAG,KAAK,GAAG,IAAI,CAAC2B,MAAM,CAAC3B,QAAQ,CAAC0D,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM;kBAChFzD,QAAQ,EAAE,IAAI,CAAC0B,MAAM,CAAC1B,QAAQ,GAAG,KAAK,GAAG,IAAI,CAAC0B,MAAM,CAAC1B,QAAQ,CAACyD,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM;AAChFzC,kBAAAA,UAAU,EAAE,IAAI,CAACU,MAAM,CAACV,UAAU;AAClCb,kBAAAA,KAAK,EAAE,IAAI,CAACuB,MAAM,CAACvB,KAAAA;AACvB,iBAAC,CAAC,CAAA;AAEF,gBAAA,IAAI,CAACiD,gBAAgB,CAAC,kBAAkB,CAAC,CAAA;;AAEzC;gBACA,IAAI,CAACM,aAAa,EAAE,CAAA;AAACV,gBAAAA,QAAA,CAAAE,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;AAAAF,gBAAAA,QAAA,CAAAC,CAAA,GAAA,CAAA,CAAA;gBAAAH,EAAA,GAAAE,QAAA,CAAAW,CAAA,CAAA;AAGrB,gBAAA,IAAI,CAACP,gBAAgB,CAAC,gBAAgB,EAAE;kBAAEQ,KAAK,EAAEd,EAAA,CAAMe,OAAAA;AAAQ,iBAAC,CAAC,CAAA;AAAC,gBAAA,MAAAf,EAAA,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,OAAAE,QAAA,CAAAc,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAjB,OAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;SAGzE,CAAA,CAAA,CAAA;AAAA,QAAA,SA9CKR,IAAIA,GAAA;AAAA,UAAA,OAAAI,KAAA,CAAAsB,KAAA,CAAA,IAAA,EAAApC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAJU,IAAI,CAAA;AAAA,OAAA,EAAA;AAgDV;AACR;AACA;AAFQ,OAAA;AAAA,KAAA,EAAA;MAAAE,GAAA,EAAA,YAAA;MAAAC,KAAA,GAAA,YAAA;QAAA,IAAAwB,WAAA,GAAAtB,iBAAA,cAAAC,YAAA,EAAAC,CAAAA,CAAA,CAGA,SAAAqB,QAAA,GAAA;UAAA,IAAAC,QAAA,EAAAC,QAAA,EAAAC,MAAA,EAAAC,YAAA,EAAAC,GAAA,CAAA;AAAA,UAAA,OAAA3B,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAAwB,SAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,SAAA,CAAAtB,CAAA,GAAAsB,SAAA,CAAArB,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAqB,gBAAAA,SAAA,CAAAtB,CAAA,GAAA,CAAA,CAAA;AAEQ,gBAAA,IAAI,CAACG,gBAAgB,CAAC,mBAAmB,CAAC,CAAA;AAEpCc,gBAAAA,QAAQ,GAAG;AACbjE,kBAAAA,IAAI,EAAE,IAAI,CAACyB,MAAM,CAACzB,IAAI;AACtBC,kBAAAA,WAAW,EAAE,IAAI,CAACwB,MAAM,CAACxB,WAAW;AACpCC,kBAAAA,KAAK,EAAE,IAAI,CAACuB,MAAM,CAACvB,KAAAA;iBACtB,CAAA;AAAAoE,gBAAAA,SAAA,CAAArB,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OAEsBsB,KAAK,CAAC,IAAI,CAAC9C,MAAM,CAACT,aAAa,EAAE;AACpDwD,kBAAAA,MAAM,EAAE,MAAM;AACdC,kBAAAA,OAAO,EAAE;AACL,oBAAA,cAAc,EAAE,kBAAkB;AAClC,oBAAA,QAAQ,EAAE,kBAAA;mBACb;AACDC,kBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACX,QAAQ,CAAA;AACjC,iBAAC,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBAPIC,QAAQ,GAAAI,SAAA,CAAAZ,CAAA,CAAA;gBAAA,IASTQ,QAAQ,CAACW,EAAE,EAAA;AAAAP,kBAAAA,SAAA,CAAArB,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;gBAAA,MACN,IAAI6B,KAAK,CAAAC,eAAAA,CAAAA,MAAA,CAAiBb,QAAQ,CAACc,MAAM,CAAE,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAV,gBAAAA,SAAA,CAAArB,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OAGjCiB,QAAQ,CAACe,IAAI,EAAE,CAAA;AAAA,cAAA,KAAA,CAAA;gBAA9Bd,MAAM,GAAAG,SAAA,CAAAZ,CAAA,CAAA;AAEZJ,gBAAAA,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEY,MAAM,CAAC,CAAA;gBAAC,IAEvDA,MAAM,CAACe,OAAO,EAAA;AAAAZ,kBAAAA,SAAA,CAAArB,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;gBAAA,MACT,IAAI6B,KAAK,CAACX,MAAM,CAACR,KAAK,IAAI,4CAA4C,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAGjF;gBACA,IAAI,CAAClC,MAAM,CAACJ,KAAK,GAAG8C,MAAM,CAACgB,IAAI,CAAC9D,KAAK,CAAA;gBACrC,IAAI,CAACI,MAAM,CAAC7B,MAAM,GAAGuE,MAAM,CAACgB,IAAI,CAACC,OAAO,CAAA;;AAExC;gBACMhB,YAAY,GAAG,IAAI,CAACiB,iBAAiB,CAAClB,MAAM,CAACgB,IAAI,CAAC9D,KAAK,CAAC,CAAA;AAAA,gBAAA,IAAA,CAC1D+C,YAAY,EAAA;AAAAE,kBAAAA,SAAA,CAAArB,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AACZ,gBAAA,IAAI,CAACxB,MAAM,CAAC3B,QAAQ,GAAGsE,YAAY,CAACkB,SAAS,CAAA;AAC7C,gBAAA,IAAI,CAAC7D,MAAM,CAAC1B,QAAQ,GAAGqE,YAAY,CAACmB,SAAS,CAAA;AAACjB,gBAAAA,SAAA,CAAArB,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;AAAA,gBAAA,MAExC,IAAI6B,KAAK,CAAC,yCAAyC,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBAG9D,IAAI,CAACrD,MAAM,CAAC+D,SAAS,GAAGrB,MAAM,CAACgB,IAAI,CAACM,UAAU,CAAA;gBAC9C,IAAI,CAAChE,MAAM,CAACiE,WAAW,GAAGvB,MAAM,CAACgB,IAAI,CAACQ,YAAY,CAAA;AAClD,gBAAA,IAAI,CAAClE,MAAM,CAACmE,YAAY,GAAG,CAAC,CAAA;AAE5B,gBAAA,IAAI,CAACzC,gBAAgB,CAAC,qBAAqB,EAAE;AACzCqC,kBAAAA,SAAS,EAAErB,MAAM,CAACgB,IAAI,CAACM,UAAU;AACjCC,kBAAAA,WAAW,EAAEvB,MAAM,CAACgB,IAAI,CAACQ,YAAAA;AAC7B,iBAAC,CAAC,CAAA;AAEFrC,gBAAAA,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC,CAAA;AAACe,gBAAAA,SAAA,CAAArB,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;AAAAqB,gBAAAA,SAAA,CAAAtB,CAAA,GAAA,CAAA,CAAA;gBAAAqB,GAAA,GAAAC,SAAA,CAAAZ,CAAA,CAAA;AAGlD,gBAAA,IAAI,CAACP,gBAAgB,CAAC,mBAAmB,EAAE;kBAAEQ,KAAK,EAAEU,GAAA,CAAMT,OAAAA;AAAQ,iBAAC,CAAC,CAAA;gBAAC,MAC/D,IAAIkB,KAAK,CAAAC,gDAAAA,CAAAA,MAAA,CAAyCV,GAAA,CAAMT,OAAO,CAAE,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,OAAAU,SAAA,CAAAT,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAG,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;SAE/E,CAAA,CAAA,CAAA;AAAA,QAAA,SA3DKjD,UAAUA,GAAA;AAAA,UAAA,OAAAgD,WAAA,CAAAD,KAAA,CAAA,IAAA,EAAApC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAVX,UAAU,CAAA;AAAA,OAAA,EAAA;AA6DhB;AACR;AACA;AAFQ,OAAA;AAAA,KAAA,EAAA;MAAAuB,GAAA,EAAA,mBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAA8C,iBAAiBA,CAAChE,KAAK,EAAE;QACrB,IAAI;AACA,UAAA,IAAMwE,KAAK,GAAGxE,KAAK,CAACyE,KAAK,CAAC,GAAG,CAAC,CAAA;AAC9B,UAAA,IAAID,KAAK,CAAClE,MAAM,KAAK,CAAC,EAAE;AACpB2B,YAAAA,OAAO,CAACK,KAAK,CAAC,4BAA4B,CAAC,CAAA;AAC3C,YAAA,OAAO,IAAI,CAAA;AACf,WAAA;AAEA,UAAA,IAAAoC,MAAA,GAAAC,cAAA,CAA6BH,KAAK,EAAA,CAAA,CAAA;AAA3BI,YAAAA,OAAO,GAAAF,MAAA,CAAA,CAAA,CAAA;AAAEG,YAAAA,SAAS,GAAAH,MAAA,CAAA,CAAA,CAAA,CAAA;;AAEzB;AACA,UAAA,IAAMI,cAAc,GAAGC,IAAI,CAACH,OAAO,CAAC,CAAA;AACpC,UAAA,IAAMI,SAAS,GAAG1B,IAAI,CAAC2B,KAAK,CAACH,cAAc,CAAC,CAAA;;AAE5C;AACA,UAAA,IAAIE,SAAS,CAACE,GAAG,IAAIF,SAAS,CAACE,GAAG,GAAGC,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,EAAE;AACpDnD,YAAAA,OAAO,CAACK,KAAK,CAAC,gBAAgB,CAAC,CAAA;AAC/B,YAAA,OAAO,IAAI,CAAA;AACf,WAAA;AAEAL,UAAAA,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC,CAAA;AACzC,UAAA,OAAO8C,SAAS,CAAA;SAEnB,CAAC,OAAO1C,KAAK,EAAE;AACZL,UAAAA,OAAO,CAACK,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC,CAAA;AAChD,UAAA,OAAO,IAAI,CAAA;AACf,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAArB,GAAA,EAAA,eAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAkB,aAAaA,GAAG;AAAA,QAAA,IAAAiD,KAAA,GAAA,IAAA,CAAA;QACZ,IAAI;AACA;AACA,UAAA,IAAI,OAAOC,EAAE,KAAK,WAAW,EAAE;AAC3BrD,YAAAA,OAAO,CAACsD,IAAI,CAAC,kEAAkE,CAAC,CAAA;AAChF;AACAC,YAAAA,UAAU,CAAC,YAAA;AAAA,cAAA,OAAMH,KAAI,CAACjD,aAAa,EAAE,CAAA;AAAA,aAAA,EAAE,IAAI,CAAC,CAAA;AAC5C,YAAA,OAAA;AACJ,WAAA;;AAEA;AACA,UAAA,IAAMqD,EAAE,GAAG,IAAI,CAACC,WAAW,EAAE,CAAA;;AAE7B;AACA,UAAA,IAAI,CAAC,IAAI,CAAC7E,MAAM,EAAE;AACdoB,YAAAA,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC,CAAA;AAE7C,YAAA,IAAI,CAACrB,MAAM,GAAGyE,EAAE,CAAC,gCAAgC,EAAE;AAC/CK,cAAAA,KAAK,EAAE;AACH3F,gBAAAA,KAAK,EAAE,IAAI,CAACI,MAAM,CAAC3B,QAAQ;AAC3BE,gBAAAA,IAAI,EAAE,KAAK;AACXiH,gBAAAA,MAAM,EAAE,IAAI,CAACxF,MAAM,CAAC3B,QAAQ;AAC5BoH,gBAAAA,QAAQ,EAAEJ,EAAAA;eACb;AACDK,cAAAA,UAAU,EAAE,CAAC,WAAW,EAAE,SAAS,CAAA;AACvC,aAAC,CAAC,CAAA;;AAEF;AACA,YAAA,IAAI,CAACjF,MAAM,CAACkF,EAAE,CAAC,SAAS,EAAE,YAAM;AAC5B9D,cAAAA,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC,CAAA;cAChDD,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEmD,KAAI,CAACxE,MAAM,CAACmF,EAAE,CAAC,CAAA;AAC5CX,cAAAA,KAAI,CAACxE,MAAM,CAACoF,SAAS,GAAG,IAAI,CAAA;AAChC,aAAC,CAAC,CAAA;YAEF,IAAI,CAACpF,MAAM,CAACkF,EAAE,CAAC,YAAY,EAAE,UAACG,MAAM,EAAK;AACrCjE,cAAAA,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEgE,MAAM,CAAC,CAAA;AAC9Cb,cAAAA,KAAI,CAACxE,MAAM,CAACoF,SAAS,GAAG,KAAK,CAAA;AACjC,aAAC,CAAC,CAAA;YAEF,IAAI,CAACpF,MAAM,CAACkF,EAAE,CAAC,eAAe,EAAE,UAACzD,KAAK,EAAK;AACvCL,cAAAA,OAAO,CAACK,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC,CAAA;AACrD+C,cAAAA,KAAI,CAACxE,MAAM,CAACoF,SAAS,GAAG,KAAK,CAAA;AACjC,aAAC,CAAC,CAAA;;AAEF;YACA,IAAI,CAACpF,MAAM,CAACkF,EAAE,CAAC,kBAAkB,EAAE,UAACjC,IAAI,EAAK;AACzC7B,cAAAA,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAE4B,IAAI,CAAC,CAAA;AACpDuB,cAAAA,KAAI,CAACc,oBAAoB,CAACrC,IAAI,CAAC,CAAA;AACnC,aAAC,CAAC,CAAA;YAEF,IAAI,CAACjD,MAAM,CAACkF,EAAE,CAAC,iBAAiB,EAAE,UAACjC,IAAI,EAAK;AACxC7B,cAAAA,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAE4B,IAAI,CAAC,CAAA;AAC3CuB,cAAAA,KAAI,CAACe,mBAAmB,CAACtC,IAAI,CAAC,CAAA;AAClC,aAAC,CAAC,CAAA;YAEF,IAAI,CAACjD,MAAM,CAACkF,EAAE,CAAC,YAAY,EAAE,UAACjC,IAAI,EAAK;AACnC7B,cAAAA,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE4B,IAAI,CAAC,CAAA;AACtCuB,cAAAA,KAAI,CAACgB,eAAe,CAACvC,IAAI,CAAC,CAAA;AAC9B,aAAC,CAAC,CAAA;;AAEF;AACA,YAAA,IAAI,CAACjD,MAAM,CAACyF,KAAK,CAAC,UAACC,SAAS,EAAc;cAAA,KAAAC,IAAAA,IAAA,GAAAnG,SAAA,CAAAC,MAAA,EAATmG,IAAI,OAAAC,KAAA,CAAAF,IAAA,GAAAA,CAAAA,GAAAA,IAAA,WAAAG,IAAA,GAAA,CAAA,EAAAA,IAAA,GAAAH,IAAA,EAAAG,IAAA,EAAA,EAAA;AAAJF,gBAAAA,IAAI,CAAAE,IAAA,GAAAtG,CAAAA,CAAAA,GAAAA,SAAA,CAAAsG,IAAA,CAAA,CAAA;AAAA,eAAA;cACjC1E,OAAO,CAACC,GAAG,CAAAwB,6BAAAA,CAAAA,MAAA,CAAqB6C,SAAS,EAAA,IAAA,CAAA,EAAME,IAAI,CAAC,CAAA;;AAEpD;cACA,IAAIF,SAAS,KAAK,mBAAmB,EAAE;gBACnClB,KAAI,CAACuB,YAAY,EAAE,CAAA;AACvB,eAAA;AACJ,aAAC,CAAC,CAAA;AACN,WAAC,MAAM;AACH3E,YAAAA,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC,CAAA;AAC7C,WAAA;SACH,CAAC,OAAOI,KAAK,EAAE;AACZL,UAAAA,OAAO,CAACK,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC,CAAA;AAC9D,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAArB,GAAA,EAAA,aAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAwE,WAAWA,GAAG;AACV;AACA,QAAA,OAAO,WAAW,CAAA;AACtB,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAzE,GAAA,EAAA,aAAA;AAAAC,MAAAA,KAAA,EAGA,SAAA2F,WAAWA,CAAClI,IAAI,EAAE;AACd,QAAA,QAAOA,IAAI;AACP,UAAA,KAAK,CAAC;AAAE,YAAA,OAAO,KAAK,CAAA;AACpB,UAAA,KAAK,CAAC;AAAE,YAAA,OAAO,MAAM,CAAA;AACrB,UAAA,KAAK,CAAC;AAAE,YAAA,OAAO,WAAW,CAAA;AAC1B,UAAA;YAAS,OAAA+E,OAAAA,CAAAA,MAAA,CAAe/E,IAAI,CAAA,CAAA;AAChC,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAsC,GAAA,EAAA,wBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAW,sBAAsBA,GAAG;QACrB,IAAMiF,MAAM,GAAG,EAAE,CAAA;;AAEjB;AACA,QAAA,IAAI,CAAC,IAAI,CAAC1G,MAAM,CAAC3B,QAAQ,IAAI,OAAO,IAAI,CAAC2B,MAAM,CAAC3B,QAAQ,KAAK,QAAQ,EAAE;AACnEqI,UAAAA,MAAM,CAACC,IAAI,CAAC,+BAA+B,CAAC,CAAA;SAC/C,MAAM,IAAI,IAAI,CAAC3G,MAAM,CAAC3B,QAAQ,CAAC6B,MAAM,GAAG,EAAE,EAAE;AACzCwG,UAAAA,MAAM,CAACC,IAAI,CAAC,qBAAqB,CAAC,CAAA;AACtC,SAAA;;AAEA;AACA,QAAA,IAAI,CAAC,IAAI,CAAC3G,MAAM,CAAC1B,QAAQ,IAAI,OAAO,IAAI,CAAC0B,MAAM,CAAC1B,QAAQ,KAAK,QAAQ,EAAE;AACnEoI,UAAAA,MAAM,CAACC,IAAI,CAAC,+BAA+B,CAAC,CAAA;SAC/C,MAAM,IAAI,IAAI,CAAC3G,MAAM,CAAC1B,QAAQ,CAAC4B,MAAM,GAAG,EAAE,EAAE;AACzCwG,UAAAA,MAAM,CAACC,IAAI,CAAC,6CAA6C,CAAC,CAAA;AAC9D,SAAA;;AAEA;AACA,QAAA,IAAI,CAAC,IAAI,CAAC3G,MAAM,CAAC7B,MAAM,IAAI,CAAC,IAAI,CAACyI,UAAU,CAAC,IAAI,CAAC5G,MAAM,CAAC7B,MAAM,CAAC,EAAE;AAC7DuI,UAAAA,MAAM,CAACC,IAAI,CAAC,iBAAiB,CAAC,CAAA;AAClC,SAAA;;AAEA;AACA,QAAA,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAACjH,QAAQ,CAAC,IAAI,CAACM,MAAM,CAACzB,IAAI,CAAC,EAAE;AACvCmI,UAAAA,MAAM,CAACC,IAAI,CAAC,qCAAqC,CAAC,CAAA;AACtD,SAAA;AAEA,QAAA,IAAID,MAAM,CAACxG,MAAM,GAAG,CAAC,EAAE;AACnB,UAAA,IAAI,CAACwB,gBAAgB,CAAC,kBAAkB,EAAE;AAAEgF,YAAAA,MAAM,EAANA,MAAAA;AAAO,WAAC,CAAC,CAAA;AACrD,UAAA,MAAM,IAAIrD,KAAK,CAAAC,6CAAAA,CAAAA,MAAA,CAAsCoD,MAAM,CAACG,IAAI,CAAC,IAAI,CAAC,CAAE,CAAC,CAAA;AAC7E,SAAA;AAEA,QAAA,IAAI,CAACnF,gBAAgB,CAAC,oBAAoB,CAAC,CAAA;AAC/C,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAb,GAAA,EAAA,YAAA;AAAAC,MAAAA,KAAA,EAGA,SAAA8F,UAAUA,CAACE,MAAM,EAAE;QACf,IAAI;AACA,UAAA,IAAMC,GAAG,GAAG,IAAIC,GAAG,CAACF,MAAM,CAAC,CAAA;UAC3B,OAAOC,GAAG,CAACE,QAAQ,KAAK,QAAQ,IAAIF,GAAG,CAACE,QAAQ,KAAK,OAAO,CAAA;SAC/D,CAAC,OAAOC,CAAC,EAAE;AACR,UAAA,OAAO,KAAK,CAAA;AAChB,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAArG,GAAA,EAAA,kBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAY,gBAAgBA,CAACyF,KAAK,EAAa;AAAA,QAAA,IAAXzD,IAAI,GAAAzD,SAAA,CAAAC,MAAA,GAAA,CAAA,IAAAD,SAAA,CAAA,CAAA,CAAA,KAAAE,SAAA,GAAAF,SAAA,CAAA,CAAA,CAAA,GAAG,EAAE,CAAA;AAC7B,QAAA,IAAI,CAAC,IAAI,CAACD,MAAM,CAACd,kBAAkB,EAAE,OAAA;AAErC,QAAA,IAAMkI,WAAW,GAAG;UAChBC,SAAS,EAAE,IAAItC,IAAI,EAAE,CAACuC,WAAW,EAAE;AACnCH,UAAAA,KAAK,EAAEA,KAAK;AACZzD,UAAAA,IAAI,EAAEA,IAAI;UACV6D,SAAS,EAAEC,SAAS,CAACD,SAAS;AAC9BR,UAAAA,GAAG,EAAE/I,MAAM,CAACyJ,QAAQ,CAACC,IAAAA;SACxB,CAAA;AAED7F,QAAAA,OAAO,CAACsD,IAAI,CAAC,eAAe,EAAEiC,WAAW,CAAC,CAAA;;AAE1C;AACA,QAAA,IAAI,CAACpJ,MAAM,CAAC2J,kBAAkB,EAAE;UAC5B3J,MAAM,CAAC2J,kBAAkB,GAAG,EAAE,CAAA;AAClC,SAAA;AACA3J,QAAAA,MAAM,CAAC2J,kBAAkB,CAAChB,IAAI,CAACS,WAAW,CAAC,CAAA;AAC/C,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAvG,GAAA,EAAA,sBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAc,oBAAoBA,GAAG;AACnB;QACA,IAAI,CAAC5B,MAAM,CAAC4H,gBAAgB,GAAG,IAAI,CAAC5H,MAAM,CAAC3B,QAAQ,CAAA;QACnD,IAAI,CAAC2B,MAAM,CAAC6H,gBAAgB,GAAG,IAAI,CAAC7H,MAAM,CAAC1B,QAAQ,CAAA;;AAEnD;AACA,QAAA,IAAI,IAAI,CAAC0B,MAAM,CAAC3B,QAAQ,EAAE;AACtB,UAAA,IAAI,CAAC2B,MAAM,CAAC8H,eAAe,GAAG,IAAI,CAAC9H,MAAM,CAAC3B,QAAQ,CAACsB,OAAO,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAA;AAC3F,SAAA;AACA,QAAA,IAAI,IAAI,CAACK,MAAM,CAAC1B,QAAQ,EAAE;AACtB,UAAA,IAAI,CAAC0B,MAAM,CAAC+H,eAAe,GAAG,IAAI,CAAC/H,MAAM,CAAC1B,QAAQ,CAACqB,OAAO,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAA;AAC3F,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAkB,GAAA,EAAA,eAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAkH,aAAaA,CAACC,KAAK,EAAE;AACjB,QAAA,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE,OAAOA,KAAK,CAAA;;AAE3C;QACA,OAAOA,KAAK,CACPtI,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;AAAC,SACrBA,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC;SAC5BuI,IAAI,EAAE,CAAA;AACf,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAArH,GAAA,EAAA,sBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAiF,oBAAoBA,CAACrC,IAAI,EAAE;AACvB7B,QAAAA,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAE4B,IAAI,CAAC,CAAA;AACzC,QAAA,IAAI,IAAI,CAAC1D,MAAM,CAAChB,cAAc,EAAE;AAC5B,UAAA,IAAI,CAACgB,MAAM,CAAChB,cAAc,CAAC0E,IAAI,CAAC,CAAA;AACpC,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAA7C,GAAA,EAAA,qBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAkF,mBAAmBA,CAACtC,IAAI,EAAE;AACtB7B,QAAAA,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE4B,IAAI,CAAC,CAAA;AACvC,QAAA,IAAI,IAAI,CAAC1D,MAAM,CAAClB,SAAS,EAAE;AACvB,UAAA,IAAI,CAACkB,MAAM,CAAClB,SAAS,CAAC4E,IAAI,CAAC,CAAA;AAC/B,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAA7C,GAAA,EAAA,iBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAmF,eAAeA,CAACvC,IAAI,EAAE;AAClB7B,QAAAA,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE4B,IAAI,CAAC,CAAA;AAClC,QAAA,IAAI,IAAI,CAAC1D,MAAM,CAACf,SAAS,EAAE;AACvB,UAAA,IAAI,CAACe,MAAM,CAACf,SAAS,CAACyE,IAAI,CAAC,CAAA;AAC/B,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAA7C,GAAA,EAAA,oBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAqH,kBAAkBA,CAAChB,KAAK,EAAEzD,IAAI,EAAE;QAC5B,IAAI,IAAI,CAACjD,MAAM,IAAI,IAAI,CAACA,MAAM,CAACoF,SAAS,EAAE;UACtC,IAAI,CAACpF,MAAM,CAAC2H,IAAI,CAACjB,KAAK,EAAEzD,IAAI,CAAC,CAAA;UAC7B7B,OAAO,CAACC,GAAG,CAAAwB,kDAAAA,CAAAA,MAAA,CAAiC6D,KAAK,CAAA,EAAIzD,IAAI,CAAC,CAAA;AAC9D,SAAC,MAAM;AACH7B,UAAAA,OAAO,CAACsD,IAAI,CAAC,gEAAgE,EAAEgC,KAAK,CAAC,CAAA;AACzF,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAtG,GAAA,EAAA,oBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAuH,kBAAkBA,GAAG;AACjB,QAAA,IAAI,CAAC,IAAI,CAAC5H,MAAM,EAAE;AACd,UAAA,OAAO,iBAAiB,CAAA;AAC5B,SAAA;QACA,OAAO,IAAI,CAACA,MAAM,CAACoF,SAAS,GAAG,WAAW,GAAG,cAAc,CAAA;AAC/D,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAhF,GAAA,EAAA,oBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAwH,kBAAkBA,GAAG;QACjB,IAAI,OAAOpD,EAAE,KAAK,WAAW,IAAI,CAAC,IAAI,CAACzE,MAAM,EAAE;AAC3CoB,UAAAA,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC,CAAA;UAC3D,IAAI,CAACE,aAAa,EAAE,CAAA;AACxB,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAnB,GAAA,EAAA,YAAA;MAAAC,KAAA,GAAA,YAAA;QAAA,IAAAyH,WAAA,GAAAvH,iBAAA,cAAAC,YAAA,EAAAC,CAAAA,CAAA,CAGA,SAAAsH,QAAA,GAAA;AAAA,UAAA,IAAAC,WAAA;YAAAC,OAAA;YAAAC,gBAAA;YAAAC,QAAA;YAAAC,SAAA;YAAArK,WAAA;YAAAiE,QAAA;YAAAqG,UAAA;YAAAC,OAAA;AAAAC,YAAAA,MAAA,GAAA/I,SAAA;YAAAgJ,GAAA;YAAAC,GAAA,CAAA;AAAA,UAAA,OAAAjI,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAA8H,SAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,SAAA,CAAA5H,CAAA,GAAA4H,SAAA,CAAA3H,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAiBiH,WAAW,GAAAO,MAAA,CAAA9I,MAAA,GAAA,CAAA,IAAA8I,MAAA,CAAA,CAAA,CAAA,KAAA7I,SAAA,GAAA6I,MAAA,CAAA,CAAA,CAAA,GAAG,qBAAqB,CAAA;AAAEN,gBAAAA,OAAO,GAAAM,MAAA,CAAA9I,MAAA,GAAA8I,CAAAA,IAAAA,MAAA,CAAA7I,CAAAA,CAAAA,KAAAA,SAAA,GAAA6I,MAAA,CAAG,CAAA,CAAA,GAAA,EAAE,CAAA;gBAAA,IAE1D,CAAA,IAAI,CAACtI,WAAW,EAAA;AAAAyI,kBAAAA,SAAA,CAAA3H,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAAA2H,gBAAAA,SAAA,CAAA3H,CAAA,GAAA,CAAA,CAAA;gBAAA,OACV,IAAI,CAACd,WAAW,CAAA;AAAA,cAAA,KAAA,CAAA;gBACtB,IAAI,CAACA,WAAW,GAAG,IAAI,CAAA;AAAC,cAAA,KAAA,CAAA;gBAAA,IAGvB,IAAI,CAACF,aAAa,EAAA;AAAA2I,kBAAAA,SAAA,CAAA3H,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAAA,gBAAA,MACb,IAAI6B,KAAK,CAAC,4BAA4B,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAGjDxB,gBAAAA,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAE2G,WAAW,CAAC,CAAA;;AAElE;AACA5G,gBAAAA,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC,CAAA;AAACqH,gBAAAA,SAAA,CAAA5H,CAAA,GAAA,CAAA,CAAA;AAAA4H,gBAAAA,SAAA,CAAA3H,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OAEtB,IAAI,CAAC4H,kBAAkB,CAAC,IAAI,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAtDT,gBAAgB,GAAAQ,SAAA,CAAAlH,CAAA,CAAA;AAAwC;AAC9DJ,gBAAAA,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAE6G,gBAAgB,CAAC,CAAA;AAACQ,gBAAAA,SAAA,CAAA3H,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;AAAA2H,gBAAAA,SAAA,CAAA5H,CAAA,GAAA,CAAA,CAAA;gBAAA0H,GAAA,GAAAE,SAAA,CAAAlH,CAAA,CAAA;gBAEtDJ,OAAO,CAACK,KAAK,CAAC,sBAAsB,EAAE+G,GAAA,CAAgB9G,OAAO,CAAC,CAAA;AAAC,gBAAA,MACzD,IAAIkB,KAAK,CAAC,+DAA+D,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAAA8F,gBAAAA,SAAA,CAAA5H,CAAA,GAAA,CAAA,CAAA;AAIhF;gBACMqH,QAAQ,GAAG,IAAI,CAACnI,MAAM,GAAG,IAAI,CAACA,MAAM,CAACmF,EAAE,GAAG,mBAAmB,CAAA;AAC7DiD,gBAAAA,SAAS,GAAGD,QAAQ,CAAA;AAE1B/G,gBAAAA,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAE+G,SAAS,CAAC,CAAA;AAChDhH,gBAAAA,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE8G,QAAQ,CAAC,CAAA;;AAElB;AACVpK,gBAAAA,WAAW,GAAG,IAAI,CAACwB,MAAM,CAACxB,WAAW,IAAI,iBAAiB,CAAA;AAAA2K,gBAAAA,SAAA,CAAA3H,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OACzC,IAAI,CAAC6H,WAAW,CAAC,cAAc,EAAAhJ,cAAA,CAAA;AAClD9B,kBAAAA,IAAI,EAAE,IAAI,CAACyB,MAAM,CAACzB,IAAI;AACtB+K,kBAAAA,OAAO,EAAET,SAAS;AAAE;AACpBU,kBAAAA,KAAK,KAAAjG,MAAA,CAAK,IAAI,CAACmD,WAAW,CAAC,IAAI,CAACzG,MAAM,CAACzB,IAAI,CAAC,EAAA+E,GAAAA,CAAAA,CAAAA,MAAA,CAAI9E,WAAW,CAAA;iBACxDkK,EAAAA,OAAO,CACb,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBALIjG,QAAQ,GAAA0G,SAAA,CAAAlH,CAAA,CAAA;gBAAA,IAOdQ,CAAAA,QAAQ,CAACgB,OAAO,EAAA;AAAA0F,kBAAAA,SAAA,CAAA3H,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAChB;AACIsH,gBAAAA,UAAU,GAAGrG,QAAQ,CAACiB,IAAI,CAAC8F,SAAS,CAExC;AACA,gBAAA,IAAIV,UAAU,CAACW,UAAU,CAAC,GAAG,CAAC,EAAE;AAC5BX,kBAAAA,UAAU,GAAAxF,EAAAA,CAAAA,MAAA,CAAM,IAAI,CAACtD,MAAM,CAAC7B,MAAM,CAAAmF,CAAAA,MAAA,CAAGwF,UAAU,CAAE,CAAA;AACrD,iBAAA;gBAEA,IAAI,CAACY,YAAY,GAAGZ,UAAU,CAAA;AAE9BjH,gBAAAA,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEgH,UAAU,CAAC,CAAA;AAC/DjH,gBAAAA,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAE+G,SAAS,CAAC,CAAA;gBAC9ChH,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEW,QAAQ,CAACiB,IAAI,CAAC6F,KAAK,CAAC,CAAA;gBACjD1H,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEW,QAAQ,CAACiB,IAAI,CAACiG,SAAS,CAAC,CAAA;;AAEtD;AACA,gBAAA,IAAI,CAACC,aAAa,CAACnB,WAAW,EAAEK,UAAU,EAAE,IAAI,CAAC9I,MAAM,CAACzB,IAAI,EAAEmK,OAAO,CAAC,CAAA;AAEtE,gBAAA,IAAI,CAACmB,gBAAgB,CAACpB,WAAW,EAAE,IAAI,CAACzI,MAAM,CAACzB,IAAI,EAAEmK,OAAO,CAAC,CAAA;;AAE7D;AACA,gBAAA,IAAI,CAACP,kBAAkB,CAAC,cAAc,EAAE;AACpC5J,kBAAAA,IAAI,EAAE,IAAI,CAACyB,MAAM,CAACzB,IAAI;AACtBiL,kBAAAA,SAAS,EAAEV,UAAU;AACrBF,kBAAAA,QAAQ,EAAEA,QAAQ;AAClBC,kBAAAA,SAAS,EAAEA,SAAS;AACpBU,kBAAAA,KAAK,EAAE9G,QAAQ,CAACiB,IAAI,CAAC6F,KAAK;AAC1BI,kBAAAA,SAAS,EAAElH,QAAQ,CAACiB,IAAI,CAACiG,SAAS;AAClCtC,kBAAAA,SAAS,EAAEtC,IAAI,CAACC,GAAG,EAAC;AACxB,iBAAC,CAAC,CAAA;gBAAC,OAAAmE,SAAA,CAAA/G,CAAA,CAAA/B,CAAAA,EAAAA,cAAA,CAAAA,cAAA,CAAA,EAAA,EAGIoC,QAAQ,CAACiB,IAAI,CAAA,EAAA,EAAA,EAAA;AAChB8F,kBAAAA,SAAS,EAAEV,UAAU;AACrBD,kBAAAA,SAAS,EAAEA,SAAS;AACpBU,kBAAAA,KAAK,EAAE9G,QAAQ,CAACiB,IAAI,CAAC6F,KAAK;AAC1BI,kBAAAA,SAAS,EAAElH,QAAQ,CAACiB,IAAI,CAACiG,SAAAA;AAAS,iBAAA,CAAA,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,MAGhC,IAAItG,KAAK,CAACZ,QAAQ,CAACN,OAAO,IAAI,yCAAyC,CAAC,CAAA;AAAA,cAAA,KAAA,EAAA;AAAAgH,gBAAAA,SAAA,CAAA3H,CAAA,GAAA,EAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,EAAA;AAAA2H,gBAAAA,SAAA,CAAA5H,CAAA,GAAA,EAAA,CAAA;gBAAA2H,GAAA,GAAAC,SAAA,CAAAlH,CAAA,CAAA;gBAGlFJ,OAAO,CAACK,KAAK,CAAC,sBAAsB,EAAEgH,GAAA,CAAM/G,OAAO,CAAC,CAAA;gBACpDN,OAAO,CAACK,KAAK,CAAC,sBAAsB,EAAEgH,GAAA,CAAMY,KAAK,CAAC,CAAA;AAClDjI,gBAAAA,OAAO,CAACK,KAAK,CAAC,oBAAoB,EAAE;AAChC/D,kBAAAA,MAAM,EAAE,IAAI,CAAC6B,MAAM,CAAC7B,MAAM;AAC1BI,kBAAAA,IAAI,EAAE,IAAI,CAACyB,MAAM,CAACzB,IAAI;AACtBe,kBAAAA,UAAU,EAAE,IAAI,CAACU,MAAM,CAACV,UAAU;kBAClCjB,QAAQ,EAAE,IAAI,CAAC2B,MAAM,CAAC3B,QAAQ,GAAG,KAAK,GAAG,IAAI,CAAC2B,MAAM,CAAC3B,QAAQ,CAAC0D,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM;kBAChFzD,QAAQ,EAAE,IAAI,CAAC0B,MAAM,CAAC1B,QAAQ,GAAG,KAAK,GAAG,IAAI,CAAC0B,MAAM,CAAC1B,QAAQ,CAACyD,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,MAAA;AAC9E,iBAAC,CAAC,CAAA;;AAEF;AACA,gBAAA,IAAI,IAAI,CAAC/B,MAAM,CAACF,gBAAgB,EAAE;AAC9B+B,kBAAAA,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC,CAAA;kBAChDD,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE9D,MAAM,CAACyJ,QAAQ,CAACsC,QAAQ,CAAC,CAAA;kBACrDlI,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE9D,MAAM,CAACyJ,QAAQ,CAACR,QAAQ,CAAC,CAAA;kBACrDpF,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE9D,MAAM,CAACyJ,QAAQ,CAACC,IAAI,CAAC,CAAA;kBAE/CqB,OAAO,GAAG/K,MAAM,CAACyJ,QAAQ,CAACsC,QAAQ,KAAK,WAAW,IACzC/L,MAAM,CAACyJ,QAAQ,CAACsC,QAAQ,KAAK,WAAW,IACxC/L,MAAM,CAACyJ,QAAQ,CAACR,QAAQ,KAAK,OAAO,CAAA;AAEnDpF,kBAAAA,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEiH,OAAO,CAAC,CAAA;AAErC,kBAAA,IAAIA,OAAO,EAAE;AACTlH,oBAAAA,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC,CAAA;AAC7DD,oBAAAA,OAAO,CAACC,GAAG,CAAC,0EAA0E,CAAC,CAAA;AAC3F,mBAAC,MAAM;AACHD,oBAAAA,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC,CAAA;AAClD,mBAAA;AACJ,iBAAC,MAAM;AACHD,kBAAAA,OAAO,CAACC,GAAG,CAAC,qEAAqE,CAAC,CAAA;AACtF,iBAAA;gBAEAD,OAAO,CAACC,GAAG,CAAC,0DAA0D,GAAG,IAAI,CAAC9B,MAAM,CAACzB,IAAI,CAAC,CAAA;gBAC1F,IAAI,CAACyL,yBAAyB,CAACvB,WAAW,EAAE,IAAI,CAACzI,MAAM,CAACzB,IAAI,CAAC,CAAA;AAAC,gBAAA,MACxD,IAAI8E,KAAK,CAAC,wBAAwB,CAAC,CAAA;AAAA,cAAA,KAAA,EAAA;gBAAA,OAAA8F,SAAA,CAAA/G,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAoG,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;SAEhD,CAAA,CAAA,CAAA;AAAA,QAAA,SAxHKyB,UAAUA,GAAA;AAAA,UAAA,OAAA1B,WAAA,CAAAlG,KAAA,CAAA,IAAA,EAAApC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAVgK,UAAU,CAAA;AAAA,OAAA,EAAA;AA4HhB;AACR;AACA;AAFQ,OAAA;AAAA,KAAA,EAAA;MAAApJ,GAAA,EAAA,kBAAA;MAAAC,KAAA,GAAA,YAAA;AAAA,QAAA,IAAAoJ,iBAAA,GAAAlJ,iBAAA,cAAAC,YAAA,EAAA,CAAAC,CAAA,CAGA,SAAAiJ,QAAAA,CAAuB1B,WAAW,EAAElK,IAAI,EAAA;AAAA,UAAA,IAAAmK,OAAA;YAAAjG,QAAA;YAAA2H,YAAA;YAAAtB,UAAA;AAAAuB,YAAAA,MAAA,GAAApK,SAAA;YAAAqK,GAAA,CAAA;AAAA,UAAA,OAAArJ,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAAkJ,SAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,SAAA,CAAAhJ,CAAA,GAAAgJ,SAAA,CAAA/I,CAAA;AAAA,cAAA,KAAA,CAAA;AAAEkH,gBAAAA,OAAO,GAAA2B,MAAA,CAAAnK,MAAA,GAAAmK,CAAAA,IAAAA,MAAA,CAAAlK,CAAAA,CAAAA,KAAAA,SAAA,GAAAkK,MAAA,CAAG,CAAA,CAAA,GAAA,EAAE,CAAA;gBAAA,IAE9C,CAAA,IAAI,CAAC3J,WAAW,EAAA;AAAA6J,kBAAAA,SAAA,CAAA/I,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAAA+I,gBAAAA,SAAA,CAAA/I,CAAA,GAAA,CAAA,CAAA;gBAAA,OACV,IAAI,CAACd,WAAW,CAAA;AAAA,cAAA,KAAA,CAAA;gBACtB,IAAI,CAACA,WAAW,GAAG,IAAI,CAAA;AAAC,cAAA,KAAA,CAAA;gBAAA,IAGvB,IAAI,CAACF,aAAa,EAAA;AAAA+J,kBAAAA,SAAA,CAAA/I,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAAA,gBAAA,MACb,IAAI6B,KAAK,CAAC,4BAA4B,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAkH,gBAAAA,SAAA,CAAAhJ,CAAA,GAAA,CAAA,CAAA;AAAAgJ,gBAAAA,SAAA,CAAA/I,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OAItB,IAAI,CAAC6H,WAAW,CAAC,cAAc,EAAAhJ,cAAA,CAAA;AAClD9B,kBAAAA,IAAI,EAAEA,IAAAA;iBACHmK,EAAAA,OAAO,CACb,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBAHIjG,QAAQ,GAAA8H,SAAA,CAAAtI,CAAA,CAAA;gBAAA,IAKVQ,CAAAA,QAAQ,CAACgB,OAAO,EAAA;AAAA8G,kBAAAA,SAAA,CAAA/I,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAChB;AACM4I,gBAAAA,YAAY,GAAG,yBAAyB,CAAA;gBACxCtB,UAAU,GAAA,EAAA,CAAAxF,MAAA,CAAM8G,YAAY,CAAA,CAAA9G,MAAA,CAAGb,QAAQ,CAACiB,IAAI,CAAC8G,MAAM,CAAA,CAAA;gBACzD,IAAI,CAACZ,aAAa,CAACnB,WAAW,EAAEK,UAAU,EAAEvK,IAAI,EAAEmK,OAAO,CAAC,CAAA;;AAE1D;AACA7G,gBAAAA,OAAO,CAACC,GAAG,CAAC,mDAAmD,EAAEgH,UAAU,CAAC,CAAA;gBAC5EjH,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEW,QAAQ,CAACiB,IAAI,CAAC+G,IAAI,CAAC,CAAA;gBACtD5I,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEW,QAAQ,CAACiB,IAAI,CAACgH,UAAU,CAAC,CAAA;gBAEvD,IAAI,CAACb,gBAAgB,CAACpB,WAAW,EAAElK,IAAI,EAAEmK,OAAO,CAAC,CAAA;gBAAC,OAAA6B,SAAA,CAAAnI,CAAA,CAAA/B,CAAAA,EAAAA,cAAA,CAAAA,cAAA,CAAA,EAAA,EAE3CoC,QAAQ,CAACiB,IAAI,CAAA,EAAA,EAAA,EAAA;AAChB8F,kBAAAA,SAAS,EAAEV,UAAU;AACrBa,kBAAAA,SAAS,EAAElH,QAAQ,CAACiB,IAAI,CAACgH,UAAAA;AAAU,iBAAA,CAAA,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,MAGjC,IAAIrH,KAAK,CAACZ,QAAQ,CAACN,OAAO,IAAI,yCAAyC,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAoI,gBAAAA,SAAA,CAAA/I,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;AAAA+I,gBAAAA,SAAA,CAAAhJ,CAAA,GAAA,CAAA,CAAA;gBAAA+I,GAAA,GAAAC,SAAA,CAAAtI,CAAA,CAAA;gBAGlFJ,OAAO,CAACK,KAAK,CAAC,sBAAsB,EAAEoI,GAAA,CAAMnI,OAAO,CAAC,CAAA;gBACpDN,OAAO,CAACK,KAAK,CAAC,sBAAsB,EAAEoI,GAAA,CAAMR,KAAK,CAAC,CAAA;AAClDjI,gBAAAA,OAAO,CAACK,KAAK,CAAC,6BAA6B,EAAE;AACzC/D,kBAAAA,MAAM,EAAE,IAAI,CAAC6B,MAAM,CAAC7B,MAAM;AAC1BI,kBAAAA,IAAI,EAAEA,IAAI;AACVe,kBAAAA,UAAU,EAAE,IAAI,CAACU,MAAM,CAACV,UAAU;kBAClCjB,QAAQ,EAAE,IAAI,CAAC2B,MAAM,CAAC3B,QAAQ,GAAG,KAAK,GAAG,IAAI,CAAC2B,MAAM,CAAC3B,QAAQ,CAAC0D,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM;kBAChFzD,QAAQ,EAAE,IAAI,CAAC0B,MAAM,CAAC1B,QAAQ,GAAG,KAAK,GAAG,IAAI,CAAC0B,MAAM,CAAC1B,QAAQ,CAACyD,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,MAAA;AAC9E,iBAAC,CAAC,CAAA;AACFF,gBAAAA,OAAO,CAACC,GAAG,CAAC,0DAA0D,GAAGvD,IAAI,CAAC,CAAA;AAC9E,gBAAA,IAAI,CAACyL,yBAAyB,CAACvB,WAAW,EAAElK,IAAI,CAAC,CAAA;AAAC,gBAAA,MAC5C,IAAI8E,KAAK,CAAC,wBAAwB,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,OAAAkH,SAAA,CAAAnI,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAA+H,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;SAEhD,CAAA,CAAA,CAAA;AAAA,QAAA,SAnDKQ,gBAAgBA,CAAAC,EAAA,EAAAC,GAAA,EAAA;AAAA,UAAA,OAAAX,iBAAA,CAAA7H,KAAA,CAAA,IAAA,EAAApC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAhB0K,gBAAgB,CAAA;OAqDtB,EAAA;AAAA,OAAA;AAAA,KAAA,EAAA;MAAA9J,GAAA,EAAA,gBAAA;MAAAC,KAAA,EAAA,YAAA;QAAA,IAAAgK,eAAA,GAAA9J,iBAAA,cAAAC,YAAA,GAAAC,CAAA,CACA,SAAA6J,QAAAA,CAAqBtC,WAAW,EAAA;AAAA,UAAA,IAAAC,OAAA;AAAAsC,YAAAA,MAAA,GAAA/K,SAAA,CAAA;AAAA,UAAA,OAAAgB,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAA4J,SAAA,EAAA;YAAA,OAAAA,CAAAA,EAAAA,QAAAA,SAAA,CAAAzJ,CAAA;AAAA,cAAA,KAAA,CAAA;AAAEkH,gBAAAA,OAAO,GAAAsC,MAAA,CAAA9K,MAAA,GAAA8K,CAAAA,IAAAA,MAAA,CAAA7K,CAAAA,CAAAA,KAAAA,SAAA,GAAA6K,MAAA,CAAG,CAAA,CAAA,GAAA,EAAE,CAAA;gBAAA,OAAAC,SAAA,CAAA7I,CAAA,CACnC,CAAA,EAAA,IAAI,CAAC6H,UAAU,CAACxB,WAAW,EAAEC,OAAO,CAAC,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAqC,QAAA,EAAA,IAAA,CAAA,CAAA;SAC/C,CAAA,CAAA,CAAA;QAAA,SAFKG,cAAcA,CAAAC,GAAA,EAAA;AAAA,UAAA,OAAAL,eAAA,CAAAzI,KAAA,CAAA,IAAA,EAAApC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAdiL,cAAc,CAAA;AAAA,OAAA,EAAA;AAAA,KAAA,EAAA;MAAArK,GAAA,EAAA,eAAA;MAAAC,KAAA,EAAA,YAAA;QAAA,IAAAsK,cAAA,GAAApK,iBAAA,cAAAC,YAAA,GAAAC,CAAA,CAIpB,SAAAmK,QAAAA,CAAoB5C,WAAW,EAAA;AAAA,UAAA,IAAAC,OAAA;YAAA4C,YAAA;AAAAC,YAAAA,MAAA,GAAAtL,SAAA,CAAA;AAAA,UAAA,OAAAgB,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAAmK,SAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,SAAA,CAAAjK,CAAA,GAAAiK,SAAA,CAAAhK,CAAA;AAAA,cAAA,KAAA,CAAA;AAAEkH,gBAAAA,OAAO,GAAA6C,MAAA,CAAArL,MAAA,GAAAqL,CAAAA,IAAAA,MAAA,CAAApL,CAAAA,CAAAA,KAAAA,SAAA,GAAAoL,MAAA,CAAG,CAAA,CAAA,GAAA,EAAE,CAAA;AACzC;AACMD,gBAAAA,YAAY,GAAG,IAAI,CAACtL,MAAM,CAACzB,IAAI,CACrC;AACA,gBAAA,IAAI,CAACyB,MAAM,CAACzB,IAAI,GAAG,CAAC,CAAA;AAACiN,gBAAAA,SAAA,CAAAjK,CAAA,GAAA,CAAA,CAAA;AAAAiK,gBAAAA,SAAA,CAAAhK,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OAEJ,IAAI,CAACyI,UAAU,CAACxB,WAAW,EAAEC,OAAO,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAAA,gBAAA,OAAA8C,SAAA,CAAApJ,CAAA,CAAAoJ,CAAAA,EAAAA,SAAA,CAAAvJ,CAAA,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAuJ,gBAAAA,SAAA,CAAAjK,CAAA,GAAA,CAAA,CAAA;AAElD;AACA,gBAAA,IAAI,CAACvB,MAAM,CAACzB,IAAI,GAAG+M,YAAY,CAAA;gBAAC,OAAAE,SAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,OAAAD,SAAA,CAAApJ,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAiJ,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;SAEvC,CAAA,CAAA,CAAA;QAAA,SAXKK,aAAaA,CAAAC,GAAA,EAAA;AAAA,UAAA,OAAAP,cAAA,CAAA/I,KAAA,CAAA,IAAA,EAAApC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAbyL,aAAa,CAAA;AAAA,OAAA,EAAA;AAAA,KAAA,EAAA;MAAA7K,GAAA,EAAA,qBAAA;MAAAC,KAAA,EAAA,YAAA;QAAA,IAAA8K,oBAAA,GAAA5K,iBAAA,cAAAC,YAAA,GAAAC,CAAA,CAanB,SAAA2K,QAAAA,CAA0BpD,WAAW,EAAA;AAAA,UAAA,IAAAC,OAAA;YAAA4C,YAAA;AAAAQ,YAAAA,MAAA,GAAA7L,SAAA,CAAA;AAAA,UAAA,OAAAgB,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAA0K,SAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,SAAA,CAAAxK,CAAA,GAAAwK,SAAA,CAAAvK,CAAA;AAAA,cAAA,KAAA,CAAA;AAAEkH,gBAAAA,OAAO,GAAAoD,MAAA,CAAA5L,MAAA,GAAA4L,CAAAA,IAAAA,MAAA,CAAA3L,CAAAA,CAAAA,KAAAA,SAAA,GAAA2L,MAAA,CAAG,CAAA,CAAA,GAAA,EAAE,CAAA;AAC/C;AACMR,gBAAAA,YAAY,GAAG,IAAI,CAACtL,MAAM,CAACzB,IAAI,CACrC;AACA,gBAAA,IAAI,CAACyB,MAAM,CAACzB,IAAI,GAAG,CAAC,CAAA;AAACwN,gBAAAA,SAAA,CAAAxK,CAAA,GAAA,CAAA,CAAA;AAAAwK,gBAAAA,SAAA,CAAAvK,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OAEJ,IAAI,CAACyI,UAAU,CAACxB,WAAW,EAAEC,OAAO,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAAA,gBAAA,OAAAqD,SAAA,CAAA3J,CAAA,CAAA2J,CAAAA,EAAAA,SAAA,CAAA9J,CAAA,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;AAAA8J,gBAAAA,SAAA,CAAAxK,CAAA,GAAA,CAAA,CAAA;AAElD;AACA,gBAAA,IAAI,CAACvB,MAAM,CAACzB,IAAI,GAAG+M,YAAY,CAAA;gBAAC,OAAAS,SAAA,CAAAN,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,OAAAM,SAAA,CAAA3J,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAyJ,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;SAEvC,CAAA,CAAA,CAAA;QAAA,SAXKG,mBAAmBA,CAAAC,GAAA,EAAA;AAAA,UAAA,OAAAL,oBAAA,CAAAvJ,KAAA,CAAA,IAAA,EAAApC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAnB+L,mBAAmB,CAAA;AAAA,OAAA,EAAA;AAazB;AACR;AACA;AAFQ,KAAA,EAAA;MAAAnL,GAAA,EAAA,eAAA;MAAAC,KAAA,GAAA,YAAA;QAAA,IAAAoL,cAAA,GAAAlL,iBAAA,cAAAC,YAAA,GAAAC,CAAA,CAGA,SAAAiL,QAAAA,CAAoBxC,SAAS,EAAA;UAAA,IAAAlH,QAAA,EAAA2J,GAAA,CAAA;AAAA,UAAA,OAAAnL,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAAgL,SAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,SAAA,CAAA9K,CAAA,GAAA8K,SAAA,CAAA7K,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,IACpB,IAAI,CAAChB,aAAa,EAAA;AAAA6L,kBAAAA,SAAA,CAAA7K,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAAA,gBAAA,MACb,IAAI6B,KAAK,CAAC,4BAA4B,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAgJ,gBAAAA,SAAA,CAAA9K,CAAA,GAAA,CAAA,CAAA;AAAA8K,gBAAAA,SAAA,CAAA7K,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OAItB,IAAI,CAAC6H,WAAW,CAAC,YAAY,EAAE;AAClDiD,kBAAAA,SAAS,EAAE3C,SAAAA;AACf,iBAAC,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBAFIlH,QAAQ,GAAA4J,SAAA,CAAApK,CAAA,CAAA;gBAAA,IAIVQ,CAAAA,QAAQ,CAACgB,OAAO,EAAA;AAAA4I,kBAAAA,SAAA,CAAA7K,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAAA,gBAAA,OAAA6K,SAAA,CAAAjK,CAAA,CACTK,CAAAA,EAAAA,QAAQ,CAACiB,IAAI,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,MAEd,IAAIL,KAAK,CAACZ,QAAQ,CAACN,OAAO,IAAI,0CAA0C,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAkK,gBAAAA,SAAA,CAAA7K,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;AAAA6K,gBAAAA,SAAA,CAAA9K,CAAA,GAAA,CAAA,CAAA;gBAAA6K,GAAA,GAAAC,SAAA,CAAApK,CAAA,CAAA;AAGnF,gBAAA,IAAI,CAACsK,WAAW,CAAAH,GAAM,CAAC,CAAA;AAAC,gBAAA,MAAAA,GAAA,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,OAAAC,SAAA,CAAAjK,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAA+J,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;SAG/B,CAAA,CAAA,CAAA;QAAA,SAnBKK,aAAaA,CAAAC,GAAA,EAAA;AAAA,UAAA,OAAAP,cAAA,CAAA7J,KAAA,CAAA,IAAA,EAAApC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAbuM,aAAa,CAAA;AAAA,OAAA,EAAA;AAqBnB;AACR;AACA;AAFQ,OAAA;AAAA,KAAA,EAAA;MAAA3L,GAAA,EAAA,uBAAA;MAAAC,KAAA,GAAA,YAAA;AAAA,QAAA,IAAA4L,sBAAA,GAAA1L,iBAAA,cAAAC,YAAA,EAAAC,CAAAA,CAAA,CAGA,SAAAyL,QAA4BrD,CAAAA,OAAO,EAAEb,WAAW,EAAElK,IAAI,EAAA;AAAA,UAAA,IAAAmK,OAAA;YAAAkE,UAAA;AAAAC,YAAAA,MAAA,GAAA5M,SAAA;YAAA6M,GAAA,CAAA;AAAA,UAAA,OAAA7L,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAA0L,SAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,SAAA,CAAAxL,CAAA,GAAAwL,SAAA,CAAAvL,CAAA;AAAA,cAAA,KAAA,CAAA;AAAEkH,gBAAAA,OAAO,GAAAmE,MAAA,CAAA3M,MAAA,GAAA2M,CAAAA,IAAAA,MAAA,CAAA1M,CAAAA,CAAAA,KAAAA,SAAA,GAAA0M,MAAA,CAAG,CAAA,CAAA,GAAA,EAAE,CAAA;AAChEhL,gBAAAA,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEwH,OAAO,CAAC,CAAA;AAACyD,gBAAAA,SAAA,CAAAxL,CAAA,GAAA,CAAA,CAAA;gBAAA,IAI/CvD,EAAAA,MAAM,CAACyJ,QAAQ,CAACsC,QAAQ,KAAK,WAAW,IACxC/L,MAAM,CAACyJ,QAAQ,CAACsC,QAAQ,KAAK,WAAW,IACxC/L,MAAM,CAACyJ,QAAQ,CAACR,QAAQ,KAAK,OAAO,CAAA,EAAA;AAAA8F,kBAAAA,SAAA,CAAAvL,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAEpCK,gBAAAA,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC,CAAA;AAACiL,gBAAAA,SAAA,CAAAvL,CAAA,GAAA,CAAA,CAAA;gBAAA,OACzB,IAAI,CAACwL,eAAe,CAAC1D,OAAO,EAAEb,WAAW,EAAElK,IAAI,EAAEmK,OAAO,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBAA5EkE,UAAU,GAAAG,SAAA,CAAA9K,CAAA,CAAA;AAAA,gBAAA,IAAA,CACZ2K,UAAU,EAAA;AAAAG,kBAAAA,SAAA,CAAAvL,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAAA,gBAAA,OAAAuL,SAAA,CAAA3K,CAAA,CAAA,CAAA,EACHwK,UAAU,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;AAIzB;AACA/K,gBAAAA,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC,CAAA;AAACiL,gBAAAA,SAAA,CAAAvL,CAAA,GAAA,CAAA,CAAA;gBAAA,OACvC,IAAI,CAACyL,gBAAgB,CAAC3D,OAAO,EAAEb,WAAW,EAAElK,IAAI,EAAEmK,OAAO,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAAA,gBAAA,OAAAqE,SAAA,CAAA3K,CAAA,CAAA2K,CAAAA,EAAAA,SAAA,CAAA9K,CAAA,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;AAAA8K,gBAAAA,SAAA,CAAAxL,CAAA,GAAA,CAAA,CAAA;gBAAAuL,GAAA,GAAAC,SAAA,CAAA9K,CAAA,CAAA;AAGvEJ,gBAAAA,OAAO,CAACK,KAAK,CAAC,yBAAyB,EAAA4K,GAAO,CAAC,CAAA;AAC/C;gBACA,IAAI,CAACI,gBAAgB,CAACzE,WAAW,EAAEa,OAAO,EAAE/K,IAAI,EAAEmK,OAAO,CAAC,CAAA;AAAC,gBAAA,OAAAqE,SAAA,CAAA3K,CAAA,CAAA,CAAA,EACpD,IAAI,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAuK,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;SAElB,CAAA,CAAA,CAAA;AAAA,QAAA,SA1BKQ,qBAAqBA,CAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAA;AAAA,UAAA,OAAAZ,sBAAA,CAAArK,KAAA,CAAA,IAAA,EAAApC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAArBkN,qBAAqB,CAAA;AAAA,OAAA,EAAA;AA4B3B;AACR;AACA;AAFQ,OAAA;AAAA,KAAA,EAAA;MAAAtM,GAAA,EAAA,iBAAA;MAAAC,KAAA,GAAA,YAAA;AAAA,QAAA,IAAAyM,gBAAA,GAAAvM,iBAAA,cAAAC,YAAA,EAAAC,CAAAA,CAAA,CAGA,SAAAsM,QAAsBlE,CAAAA,OAAO,EAAEb,WAAW,EAAElK,IAAI,EAAA;AAAA,UAAA,IAAAmK,OAAA;YAAAjG,QAAA;YAAAiB,IAAA;YAAA+J,KAAA;AAAAC,YAAAA,MAAA,GAAAzN,SAAA;YAAA0N,GAAA,CAAA;AAAA,UAAA,OAAA1M,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAAuM,SAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,SAAA,CAAArM,CAAA,GAAAqM,SAAA,CAAApM,CAAA;AAAA,cAAA,KAAA,CAAA;AAAEkH,gBAAAA,OAAO,GAAAgF,MAAA,CAAAxN,MAAA,GAAAwN,CAAAA,IAAAA,MAAA,CAAAvN,CAAAA,CAAAA,KAAAA,SAAA,GAAAuN,MAAA,CAAG,CAAA,CAAA,GAAA,EAAE,CAAA;AAAAE,gBAAAA,SAAA,CAAArM,CAAA,GAAA,CAAA,CAAA;AAAAqM,gBAAAA,SAAA,CAAApM,CAAA,GAAA,CAAA,CAAA;gBAAA,OAE/BsB,KAAK,CAAC,yCAAyC,EAAE;AACpEC,kBAAAA,MAAM,EAAE,MAAM;AACdC,kBAAAA,OAAO,EAAE;AACL,oBAAA,cAAc,EAAE,mCAAA;mBACnB;AACDC,kBAAAA,IAAI,UAAAK,MAAA,CAAUuK,kBAAkB,CAACvE,OAAO,CAAC,EAAA,WAAA,CAAA;AAC7C,iBAAC,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBANI7G,QAAQ,GAAAmL,SAAA,CAAA3L,CAAA,CAAA;gBAAA,IAQVQ,CAAAA,QAAQ,CAACW,EAAE,EAAA;AAAAwK,kBAAAA,SAAA,CAAApM,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAAAoM,gBAAAA,SAAA,CAAApM,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OACQiB,QAAQ,CAACe,IAAI,EAAE,CAAA;AAAA,cAAA,KAAA,CAAA;gBAA5BE,IAAI,GAAAkK,SAAA,CAAA3L,CAAA,CAAA;AACJwL,gBAAAA,KAAK,GAAAnK,wBAAAA,CAAAA,MAAA,CAA4BI,IAAI,CAAC8G,MAAM,CAAA,CAAA;gBAClD,IAAI,CAACZ,aAAa,CAACnB,WAAW,EAAEgF,KAAK,EAAElP,IAAI,EAAEmK,OAAO,CAAC,CAAA;AAAC,gBAAA,OAAAkF,SAAA,CAAAxL,CAAA,CAAA,CAAA,EAC/CqL,KAAK,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAG,gBAAAA,SAAA,CAAApM,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;AAAAoM,gBAAAA,SAAA,CAAArM,CAAA,GAAA,CAAA,CAAA;gBAAAoM,GAAA,GAAAC,SAAA,CAAA3L,CAAA,CAAA;gBAGhBJ,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAE6L,GAAA,CAAMxL,OAAO,CAAC,CAAA;AAAC,cAAA,KAAA,CAAA;AAAA,gBAAA,OAAAyL,SAAA,CAAAxL,CAAA,CAAA,CAAA,EAE9D,IAAI,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAoL,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;SACd,CAAA,CAAA,CAAA;AAAA,QAAA,SApBKR,eAAeA,CAAAc,GAAA,EAAAC,GAAA,EAAAC,IAAA,EAAA;AAAA,UAAA,OAAAT,gBAAA,CAAAlL,KAAA,CAAA,IAAA,EAAApC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAf+M,eAAe,CAAA;AAAA,OAAA,EAAA;AAsBrB;AACR;AACA;AAFQ,OAAA;AAAA,KAAA,EAAA;MAAAnM,GAAA,EAAA,kBAAA;MAAAC,KAAA,GAAA,YAAA;AAAA,QAAA,IAAAmN,iBAAA,GAAAjN,iBAAA,cAAAC,YAAA,EAAAC,CAAAA,CAAA,CAGA,SAAAgN,QAAuB5E,CAAAA,OAAO,EAAEb,WAAW,EAAElK,IAAI,EAAA;AAAA,UAAA,IAAAmK,OAAA;YAAAjG,QAAA;YAAAiB,IAAA;YAAA+J,KAAA;AAAAU,YAAAA,MAAA,GAAAlO,SAAA;YAAAmO,GAAA,CAAA;AAAA,UAAA,OAAAnN,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAAgN,SAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,SAAA,CAAA9M,CAAA,GAAA8M,SAAA,CAAA7M,CAAA;AAAA,cAAA,KAAA,CAAA;AAAEkH,gBAAAA,OAAO,GAAAyF,MAAA,CAAAjO,MAAA,GAAAiO,CAAAA,IAAAA,MAAA,CAAAhO,CAAAA,CAAAA,KAAAA,SAAA,GAAAgO,MAAA,CAAG,CAAA,CAAA,GAAA,EAAE,CAAA;AAAAE,gBAAAA,SAAA,CAAA9M,CAAA,GAAA,CAAA,CAAA;AAAA8M,gBAAAA,SAAA,CAAA7M,CAAA,GAAA,CAAA,CAAA;gBAAA,OAEhCsB,KAAK,CAAC,yCAAyC,EAAE;AACpEC,kBAAAA,MAAM,EAAE,MAAM;AACdC,kBAAAA,OAAO,EAAE;AACL,oBAAA,cAAc,EAAE,kBAAA;mBACnB;AACDC,kBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;AACjBmL,oBAAAA,IAAI,EAAEhF,OAAO;AACbiF,oBAAAA,IAAI,EAAE,GAAG;AACThQ,oBAAAA,IAAI,EAAEA,IAAAA;mBACT,CAAA;AACL,iBAAC,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBAVIkE,QAAQ,GAAA4L,SAAA,CAAApM,CAAA,CAAA;gBAAA,IAYVQ,CAAAA,QAAQ,CAACW,EAAE,EAAA;AAAAiL,kBAAAA,SAAA,CAAA7M,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAAA6M,gBAAAA,SAAA,CAAA7M,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OACQiB,QAAQ,CAACe,IAAI,EAAE,CAAA;AAAA,cAAA,KAAA,CAAA;gBAA5BE,IAAI,GAAA2K,SAAA,CAAApM,CAAA,CAAA;AACJwL,gBAAAA,KAAK,GAAAnK,wBAAAA,CAAAA,MAAA,CAA4BI,IAAI,CAAC8G,MAAM,CAAA,CAAA;gBAClD,IAAI,CAACZ,aAAa,CAACnB,WAAW,EAAEgF,KAAK,EAAElP,IAAI,EAAEmK,OAAO,CAAC,CAAA;AAAC,gBAAA,OAAA2F,SAAA,CAAAjM,CAAA,CAAA,CAAA,EAC/CqL,KAAK,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAY,gBAAAA,SAAA,CAAA7M,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;AAAA6M,gBAAAA,SAAA,CAAA9M,CAAA,GAAA,CAAA,CAAA;gBAAA6M,GAAA,GAAAC,SAAA,CAAApM,CAAA,CAAA;AAGhBJ,gBAAAA,OAAO,CAACK,KAAK,CAAC,8BAA8B,EAAAkM,GAAO,CAAC,CAAA;AAAC,cAAA,KAAA,CAAA;AAGzD;gBACA,IAAI,CAAClB,gBAAgB,CAACzE,WAAW,EAAEa,OAAO,EAAE/K,IAAI,EAAEmK,OAAO,CAAC,CAAA;AAAC,gBAAA,OAAA2F,SAAA,CAAAjM,CAAA,CAAA,CAAA,EACpD,IAAI,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAA8L,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;SACd,CAAA,CAAA,CAAA;AAAA,QAAA,SA3BKjB,gBAAgBA,CAAAuB,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAA;AAAA,UAAA,OAAAT,iBAAA,CAAA5L,KAAA,CAAA,IAAA,EAAApC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAhBgN,gBAAgB,CAAA;AAAA,OAAA,EAAA;AA6BtB;AACR;AACA;AAFQ,OAAA;AAAA,KAAA,EAAA;MAAApM,GAAA,EAAA,kBAAA;MAAAC,KAAA,EAGA,SAAAoM,gBAAgBA,CAACzE,WAAW,EAAEa,OAAO,EAAE/K,IAAI,EAAgB;AACvD,QAAA,IAAMoQ,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAACpG,WAAW,CAAC,CAAA;QACtD,IAAI,CAACkG,SAAS,EAAE;AACZ,UAAA,MAAM,IAAItL,KAAK,CAAA,wBAAA,CAAAC,MAAA,CAAyBmF,WAAW,qBAAc,CAAC,CAAA;AACtE,SAAA;AAEA,QAAA,IAAMqG,QAAQ,GAAG,IAAI,CAACrI,WAAW,CAAClI,IAAI,CAAC,CAAA;QACvCoQ,SAAS,CAACI,SAAS,GAAA,sIAAA,CAAAzL,MAAA,CAGDwL,QAAQ,EAAAxL,oYAAAA,CAAAA,CAAAA,MAAA,CAI+DgG,OAAO,EAM/F,oQAAA,CAAA,CAAA;AAEDzH,QAAAA,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEwH,OAAO,CAAC,CAAA;AACjD,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAzI,GAAA,EAAA,eAAA;MAAAC,KAAA,EAGA,SAAA8I,aAAaA,CAACnB,WAAW,EAAEgF,KAAK,EAAElP,IAAI,EAAgB;AAAA,QAAA,IAAdmK,OAAO,GAAAzI,SAAA,CAAAC,MAAA,GAAA,CAAA,IAAAD,SAAA,CAAA,CAAA,CAAA,KAAAE,SAAA,GAAAF,SAAA,CAAA,CAAA,CAAA,GAAG,EAAE,CAAA;AAChD,QAAA,IAAM0O,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAACpG,WAAW,CAAC,CAAA;QACtD,IAAI,CAACkG,SAAS,EAAE;AACZ,UAAA,MAAM,IAAItL,KAAK,CAAA,wBAAA,CAAAC,MAAA,CAAyBmF,WAAW,qBAAc,CAAC,CAAA;AACtE,SAAA;;AAEA;QACAkG,SAAS,CAACI,SAAS,GAAG,EAAE,CAAA;;AAExB;AACA,QAAA,IAAMC,SAAS,GAAGJ,QAAQ,CAACK,aAAa,CAAC,KAAK,CAAC,CAAA;QAC/CD,SAAS,CAACE,SAAS,GAAG,gBAAgB,CAAA;;AAEtC;AACA,QAAA,IAAMJ,QAAQ,GAAG,IAAI,CAACrI,WAAW,CAAClI,IAAI,CAAC,CAAA;AACvCyQ,QAAAA,SAAS,CAACD,SAAS,GAAAzL,8EAAAA,CAAAA,MAAA,CAEL/E,IAAI,KAAK,CAAC,GAAG,kBAAkB,GAAGA,IAAI,KAAK,CAAC,GAAG,kBAAkB,GAAGA,IAAI,KAAK,CAAC,GAAG,WAAW,GAAG,eAAe,GAAGA,IAAI,EAAA+E,iHAAAA,CAAAA,CAAAA,MAAA,CAG/GmK,KAAK,EAAA,mBAAA,CAAA,CAAAnK,MAAA,CAAkBwL,QAAQ,EAGlD,sIAAA,CAAA,CAAA;AAEDH,QAAAA,SAAS,CAACQ,WAAW,CAACH,SAAS,CAAC,CAAA;;AAEhC;AACA,QAAA,IAAI,CAACI,UAAU,CAAC1G,OAAO,CAACjK,KAAK,IAAI,IAAI,CAACuB,MAAM,CAACvB,KAAK,CAAC,CAAA;AAEnDoD,QAAAA,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE2L,KAAK,CAAC,CAAA;AAC5C,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAA5M,GAAA,EAAA,sBAAA;MAAAC,KAAA,GAAA,YAAA;AAAA,QAAA,IAAAuO,qBAAA,GAAArO,iBAAA,cAAAC,YAAA,EAAA,CAAAC,CAAA,CAGA,SAAAoO,SAAAA,CAA2BhG,OAAO,EAAEC,KAAK,EAAA;AAAA,UAAA,IAAAgG,WAAA,CAAA;AAAAC,YAAAC,IAAA;AAAA,UAAA,OAAAxO,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAAqO,UAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,UAAA,CAAAnO,CAAA,GAAAmO,UAAA,CAAAlO,CAAA;AAAA,cAAA,KAAA,CAAA;AACrCK,gBAAAA,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC,CAAA;AACrDD,gBAAAA,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEwH,OAAO,CAAC,CAAA;AACnCzH,gBAAAA,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEyH,KAAK,CAAC,CAAA;;AAEhC;AACIgG,gBAAAA,WAAW,GAAGX,QAAQ,CAACC,cAAc,CAAC,qBAAqB,CAAC,CAAA;gBAChE,IAAI,CAACU,WAAW,EAAE;AACdA,kBAAAA,WAAW,GAAGX,QAAQ,CAACC,cAAc,CAAC,cAAc,CAAC,CAAA;AACzD,iBAAA;AAAC,gBAAA,IACIU,WAAW,EAAA;AAAAG,kBAAAA,UAAA,CAAAlO,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AACZK,gBAAAA,OAAO,CAACK,KAAK,CAAC,0BAA0B,CAAC,CAAA;gBAAC,OAAAwN,UAAA,CAAAtN,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;AAI9CP,gBAAAA,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC,CAAA;;AAEpC;gBACAyN,WAAW,CAACR,SAAS,GAAG,oFAAoF,CAAA;AAACW,gBAAAA,UAAA,CAAAnO,CAAA,GAAA,CAAA,CAAA;AAGxG;AACAM,gBAAAA,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC,CAAA;AAAC4N,gBAAAA,UAAA,CAAAlO,CAAA,GAAA,CAAA,CAAA;gBAAA,OACvD,IAAI,CAACmO,aAAa,CAACrG,OAAO,EAAEC,KAAK,EAAEgG,WAAW,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AACrD1N,gBAAAA,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC,CAAA;AAAC4N,gBAAAA,UAAA,CAAAlO,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;AAAAkO,gBAAAA,UAAA,CAAAnO,CAAA,GAAA,CAAA,CAAA;gBAAAkO,GAAA,GAAAC,UAAA,CAAAzN,CAAA,CAAA;AAG5CJ,gBAAAA,OAAO,CAACK,KAAK,CAAC,0BAA0B,EAAAuN,GAAO,CAAC,CAAA;;AAEhD;AACA5N,gBAAAA,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC,CAAA;gBAC5C,IAAI,CAAC8N,gBAAgB,CAACL,WAAW,EAAEjG,OAAO,EAAEC,KAAK,CAAC,CAAA;AAAC,cAAA,KAAA,CAAA;gBAAA,OAAAmG,UAAA,CAAAtN,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAkN,SAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;SAE3D,CAAA,CAAA,CAAA;AAAA,QAAA,SAjCKO,oBAAoBA,CAAAC,IAAA,EAAAC,IAAA,EAAA;AAAA,UAAA,OAAAV,qBAAA,CAAAhN,KAAA,CAAA,IAAA,EAAApC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAApB4P,oBAAoB,CAAA;AAAA,OAAA,EAAA;AAmC1B;AACR;AACA;AAFQ,OAAA;AAAA,KAAA,EAAA;MAAAhP,GAAA,EAAA,sBAAA;MAAAC,KAAA,GAAA,YAAA;AAAA,QAAA,IAAAkP,qBAAA,GAAAhP,iBAAA,cAAAC,YAAA,EAAAC,CAAAA,CAAA,CAGA,SAAA+O,SAA2B3G,CAAAA,OAAO,EAAEC,KAAK,EAAEgG,WAAW,EAAA;AAAA,UAAA,IAAAW,MAAA,GAAA,IAAA,CAAA;UAAA,IAAAC,MAAA,EAAAC,GAAA,CAAA;AAAA,UAAA,OAAAnP,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAAgP,UAAA,EAAA;YAAA,OAAAA,CAAAA,EAAAA,QAAAA,UAAA,CAAA7O,CAAA;AAAA,cAAA,KAAA,CAAA;AAAA6O,gBAAAA,UAAA,CAAA7O,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OAE5C,IAAI,CAAC8O,mBAAmB,EAAE,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,IAE5B,EAAA,OAAOC,MAAM,KAAK,WAAW,CAAA,EAAA;AAAAF,kBAAAA,UAAA,CAAA7O,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAAA,gBAAA,MACvB,IAAI6B,KAAK,CAAC,+BAA+B,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAGpD;AACM8M,gBAAAA,MAAM,GAAGvB,QAAQ,CAACK,aAAa,CAAC,QAAQ,CAAC,CAAA;gBAC/CkB,MAAM,CAACK,KAAK,GAAG,GAAG,CAAA;gBAClBL,MAAM,CAACM,MAAM,GAAG,GAAG,CAAA;AACbL,gBAAAA,GAAG,GAAGD,MAAM,CAACO,UAAU,CAAC,IAAI,CAAC,CAEnC;gBACAN,GAAG,CAACO,SAAS,GAAG,SAAS,CAAA;gBACzBP,GAAG,CAACQ,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAA;;AAE5B;gBAAA,OAAAP,UAAA,CAAAjO,CAAA,CACO,CAAA,EAAA,IAAIyO,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;AACpCR,kBAAAA,MAAM,CAACS,QAAQ,CAACb,MAAM,EAAE7G,OAAO,EAAE;AAC7BkH,oBAAAA,KAAK,EAAE,GAAG;AACVS,oBAAAA,MAAM,EAAE,EAAE;AACVC,oBAAAA,KAAK,EAAE;AACHC,sBAAAA,IAAI,EAAE,SAAS;AACfC,sBAAAA,KAAK,EAAE,SAAA;AACX,qBAAA;mBACH,EAAE,UAAClP,KAAK,EAAK;AACV,oBAAA,IAAIA,KAAK,EAAE;sBACP6O,MAAM,CAAC7O,KAAK,CAAC,CAAA;AACb,sBAAA,OAAA;AACJ,qBAAA;;AAEA;oBACAkO,GAAG,CAACO,SAAS,GAAG,SAAS,CAAA;oBACzBP,GAAG,CAACiB,IAAI,GAAG,iBAAiB,CAAA;oBAC5BjB,GAAG,CAACkB,SAAS,GAAG,QAAQ,CAAA;oBACxBlB,GAAG,CAACmB,QAAQ,CAAChI,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC,CAAA;;AAE7B;AACA,oBAAA,IAAMiI,OAAO,GAAGrB,MAAM,CAACsB,SAAS,CAAC,WAAW,CAAC,CAAA;;AAE7C;oBACAvB,MAAI,CAACxG,YAAY,GAAG8H,OAAO,CAAA;;AAE3B;AACAjC,oBAAAA,WAAW,CAACR,SAAS,GAAA,uHAAA,CAAAzL,MAAA,CAEDkO,OAAO,EAE1B,oJAAA,CAAA,CAAA;;AAED;AACAtB,oBAAAA,MAAI,CAACwB,kBAAkB,CAACnC,WAAW,CAAC,CAAA;AAEpCuB,oBAAAA,OAAO,EAAE,CAAA;AACb,mBAAC,CAAC,CAAA;AACN,iBAAC,CAAC,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAb,SAAA,EAAA,IAAA,CAAA,CAAA;SACL,CAAA,CAAA,CAAA;AAAA,QAAA,SA1DK0B,oBAAoBA,CAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAA;AAAA,UAAA,OAAA9B,qBAAA,CAAA3N,KAAA,CAAA,IAAA,EAAApC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAApB0R,oBAAoB,CAAA;AAAA,OAAA,EAAA;AA4D1B;AACR;AACA;AAFQ,OAAA;AAAA,KAAA,EAAA;MAAA9Q,GAAA,EAAA,eAAA;MAAAC,KAAA,GAAA,YAAA;AAAA,QAAA,IAAAiR,cAAA,GAAA/Q,iBAAA,cAAAC,YAAA,EAAAC,CAAAA,CAAA,CAGA,SAAA8Q,SAAoB1I,CAAAA,OAAO,EAAEC,KAAK,EAAEgG,WAAW,EAAA;AAAA,UAAA,IAAA0C,cAAA,EAAAC,WAAA,EAAAC,WAAA,EAAA1P,QAAA,EAAA2P,YAAA,EAAAtJ,UAAA,EAAAsB,YAAA,CAAA;AAAA,UAAA,OAAAnJ,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAAgR,UAAA,EAAA;YAAA,OAAAA,CAAAA,EAAAA,QAAAA,UAAA,CAAA7Q,CAAA;AAAA,cAAA,KAAA,CAAA;AAC9B;;AAEZ,gBAAA,IAAI,IAAI,CAACxB,MAAM,CAACH,iBAAiB,EAAE;AAC/BoS,kBAAAA,cAAc,GAAG,yCAAyC,CAAA;AAC9D,iBAAC,MAAM,IAAI,IAAI,CAACjS,MAAM,CAAC7B,MAAM,CAACuB,QAAQ,CAAC,qBAAqB,CAAC,EAAE;AAC3DuS,kBAAAA,cAAc,GAAG,yCAAyC,CAAA;iBAC7D,MAAM,IAAI,IAAI,CAACjS,MAAM,CAAC7B,MAAM,CAACuB,QAAQ,CAAC,WAAW,CAAC,IAAI,IAAI,CAACM,MAAM,CAAC7B,MAAM,CAACuB,QAAQ,CAAC,WAAW,CAAC,EAAE;AAC7FuS,kBAAAA,cAAc,GAAG,yCAAyC,CAAA;AAC9D,iBAAC,MAAM;AACHA,kBAAAA,cAAc,GAAG,IAAI,CAACjS,MAAM,CAAC7B,MAAM,GAAG,cAAc,CAAA;AACxD,iBAAA;AAED0D,gBAAAA,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEmQ,cAAc,CAAC,CAAA;;AAEtC;;AAIZ,gBAAA,IAAIA,cAAc,CAACvS,QAAQ,CAAC,gBAAgB,CAAC,EAAE;AAC3C;AACAyS,kBAAAA,WAAW,GAAG,mCAAmC,CAAA;kBACjDD,WAAW,GAAG,IAAII,eAAe,CAAC;AAC9BhE,oBAAAA,IAAI,EAAEhF,OAAO;AACbiF,oBAAAA,IAAI,EAAE,GAAG;AACT0C,oBAAAA,MAAM,EAAE,EAAE;AACVsB,oBAAAA,gBAAgB,EAAE,QAAQ;AAC1BC,oBAAAA,gBAAgB,EAAE,QAAA;AACtB,mBAAC,CAAC,CAAA;AACN,iBAAC,MAAM;AACH;AACAL,kBAAAA,WAAW,GAAG,kBAAkB,CAAA;AAChCD,kBAAAA,WAAW,GAAGhP,IAAI,CAACC,SAAS,CAAC;AACzB5E,oBAAAA,IAAI,EAAE,IAAI,CAACyB,MAAM,CAACzB,IAAI;AACtBsF,oBAAAA,SAAS,EAAE,IAAI,CAAC7D,MAAM,CAAC3B,QAAQ;AAC/ByF,oBAAAA,SAAS,EAAE,IAAI,CAAC9D,MAAM,CAAC1B,QAAQ;AAC/BgL,oBAAAA,OAAO,EAAEA,OAAO;AAChBC,oBAAAA,KAAK,EAAEA,KAAAA;AACX,mBAAC,CAAC,CAAA;AACN,iBAAA;AAAC8I,gBAAAA,UAAA,CAAA7Q,CAAA,GAAA,CAAA,CAAA;gBAAA,OAEsBsB,KAAK,CAACmP,cAAc,EAAE;AACzClP,kBAAAA,MAAM,EAAE,MAAM;AACdC,kBAAAA,OAAO,EAAE;AACL,oBAAA,cAAc,EAAEmP,WAAW;AAC3B,oBAAA,QAAQ,EAAE,kBAAA;mBACb;AACDlP,kBAAAA,IAAI,EAAEiP,WAAAA;AACV,iBAAC,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBAPIzP,QAAQ,GAAA4P,UAAA,CAAApQ,CAAA,CAAA;gBAAA,IASVQ,QAAQ,CAACW,EAAE,EAAA;AAAAiP,kBAAAA,UAAA,CAAA7Q,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;gBAAA,MACN,IAAI6B,KAAK,CAAAC,eAAAA,CAAAA,MAAA,CAAiBb,QAAQ,CAACc,MAAM,CAAE,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAAA8O,gBAAAA,UAAA,CAAA7Q,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OAG3BiB,QAAQ,CAACe,IAAI,EAAE,CAAA;AAAA,cAAA,KAAA,CAAA;gBAApC4O,YAAY,GAAAC,UAAA,CAAApQ,CAAA,CAAA;gBAAA,IAEAmQ,YAAY,CAAC3O,OAAO,EAAA;AAAA4O,kBAAAA,UAAA,CAAA7Q,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;gBAAA,MAC3B,IAAI6B,KAAK,CAAAC,aAAAA,CAAAA,MAAA,CAAe8O,YAAY,CAAClQ,KAAK,CAAE,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAKvD,gBAAA,IAAI+P,cAAc,CAACvS,QAAQ,CAAC,gBAAgB,CAAC,EAAE;AAC3C;kBACAoJ,UAAU,GAAGsJ,YAAY,CAACK,QAAQ,CAAA;AACtC,iBAAC,MAAM;AACH;AACMrI,kBAAAA,YAAY,GAAG,yBAAyB,CAAA;AAC9CtB,kBAAAA,UAAU,GAAAxF,EAAAA,CAAAA,MAAA,CAAM8G,YAAY,CAAA9G,CAAAA,MAAA,CAAG8O,YAAY,CAAC1O,IAAI,CAAC8G,MAAM,CAAE,CAAA;AAC7D,iBAAA;;AAEA;gBACA,IAAI,CAACd,YAAY,GAAGZ,UAAU,CAAA;;AAE9B;AACAyG,gBAAAA,WAAW,CAACR,SAAS,GAAA,yGAAA,CAAAzL,MAAA,CAEDwF,UAAU,EAE7B,sIAAA,CAAA,CAAA;;AAEF;AACA,gBAAA,IAAI,CAAC4I,kBAAkB,CAACnC,WAAW,CAAC,CAAA;AAAC,cAAA,KAAA,CAAA;gBAAA,OAAA8C,UAAA,CAAAjQ,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAA4P,SAAA,EAAA,IAAA,CAAA,CAAA;SACxC,CAAA,CAAA,CAAA;AAAA,QAAA,SAnFKrC,aAAaA,CAAA+C,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAA;AAAA,UAAA,OAAAb,cAAA,CAAA1P,KAAA,CAAA,IAAA,EAAApC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAb0P,aAAa,CAAA;AAAA,OAAA,EAAA;AAqFnB;AACR;AACA;AAFQ,OAAA;AAAA,KAAA,EAAA;MAAA9O,GAAA,EAAA,kBAAA;MAAAC,KAAA,EAGA,SAAA8O,gBAAgBA,CAACL,WAAW,EAAEjG,OAAO,EAAEC,KAAK,EAAE;QAC1CgG,WAAW,CAACR,SAAS,GAAA,unBAAA,CAAAzL,MAAA,CAQmCiG,KAAK,EAAAjG,iGAAAA,CAAAA,CAAAA,MAAA,CACgBgG,OAAO,EAEnF,4CAAA,CAAA,CAAA;AACL,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAzI,GAAA,EAAA,qBAAA;MAAAC,KAAA,GAAA,YAAA;QAAA,IAAA+R,oBAAA,GAAA7R,iBAAA,cAAAC,YAAA,EAAAC,CAAAA,CAAA,CAGA,SAAA4R,SAAA,GAAA;AAAA,UAAA,OAAA7R,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAA0R,UAAA,EAAA;YAAA,OAAAA,CAAAA,EAAAA,QAAAA,UAAA,CAAAvR,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,IACQ,EAAA,OAAO+O,MAAM,KAAK,WAAW,CAAA,EAAA;AAAAwC,kBAAAA,UAAA,CAAAvR,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAC7BK,gBAAAA,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC,CAAA;AAAC,gBAAA,OAAAiR,UAAA,CAAA3Q,CAAA,CAAA,CAAA,EACzC,IAAI,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;AAGfP,gBAAAA,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC,CAAA;gBAAC,OAAAiR,UAAA,CAAA3Q,CAAA,CAExC,CAAA,EAAA,IAAIyO,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;AACpC,kBAAA,IAAMiC,MAAM,GAAGpE,QAAQ,CAACK,aAAa,CAAC,QAAQ,CAAC,CAAA;kBAC/C+D,MAAM,CAACC,GAAG,GAAG,8DAA8D,CAAA;kBAC3ED,MAAM,CAACE,MAAM,GAAG,YAAM;AAClB9N,oBAAAA,UAAU,CAAC,YAAM;AACb,sBAAA,IAAI,OAAOmL,MAAM,KAAK,WAAW,EAAE;AAC/B1O,wBAAAA,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC,CAAA;wBACvCgP,OAAO,CAAC,IAAI,CAAC,CAAA;AACjB,uBAAC,MAAM;AACHjP,wBAAAA,OAAO,CAACK,KAAK,CAAC,0CAA0C,CAAC,CAAA;AACzD6O,wBAAAA,MAAM,CAAC,IAAI1N,KAAK,CAAC,gDAAgD,CAAC,CAAC,CAAA;AACvE,uBAAA;qBACH,EAAE,GAAG,CAAC,CAAA;mBACV,CAAA;kBACD2P,MAAM,CAACG,OAAO,GAAG,YAAM;AACnBtR,oBAAAA,OAAO,CAACK,KAAK,CAAC,oCAAoC,CAAC,CAAA;AACnD6O,oBAAAA,MAAM,CAAC,IAAI1N,KAAK,CAAC,kCAAkC,CAAC,CAAC,CAAA;mBACxD,CAAA;AACDuL,kBAAAA,QAAQ,CAACwE,IAAI,CAACjE,WAAW,CAAC6D,MAAM,CAAC,CAAA;AACrC,iBAAC,CAAC,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAF,SAAA,CAAA,CAAA;SACL,CAAA,CAAA,CAAA;AAAA,QAAA,SA5BKxC,mBAAmBA,GAAA;AAAA,UAAA,OAAAuC,oBAAA,CAAAxQ,KAAA,CAAA,IAAA,EAAApC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAnBqQ,mBAAmB,CAAA;AAAA,OAAA,EAAA;AA8BzB;AACR;AACA;AAFQ,OAAA;AAAA,KAAA,EAAA;MAAAzP,GAAA,EAAA,oBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAA4Q,kBAAkBA,CAACnC,WAAW,EAAE;QAC5B,IAAM8D,mBAAmB,GAAG9D,WAAW,CAAC+D,aAAa,CAACC,aAAa,CAAC,yBAAyB,CAAC,CAAA;QAC9F,IAAMC,aAAa,GAAGjE,WAAW,CAAC+D,aAAa,CAACC,aAAa,CAAC,mBAAmB,CAAC,CAAA;AAElF,QAAA,IAAIF,mBAAmB,EAAE;AACrBA,UAAAA,mBAAmB,CAACI,KAAK,CAACC,OAAO,GAAG,OAAO,CAAA;AAC3CL,UAAAA,mBAAmB,CAACM,SAAS,CAACC,GAAG,CAAC,iBAAiB,CAAC,CAAA;AACxD,SAAA;AACA,QAAA,IAAIJ,aAAa,EAAE;AACfA,UAAAA,aAAa,CAACC,KAAK,CAACC,OAAO,GAAG,OAAO,CAAA;AACrCF,UAAAA,aAAa,CAACG,SAAS,CAACC,GAAG,CAAC,iBAAiB,CAAC,CAAA;AAClD,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAA/S,GAAA,EAAA,iBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAA+S,eAAeA,CAACzD,GAAG,EAAE0D,CAAC,EAAEC,CAAC,EAAEvD,KAAK,EAAEC,MAAM,EAAE;QACtC,IAAI;AACA;AACA,UAAA,IAAMuD,IAAI,GAAG,IAAIC,KAAK,EAAE,CAAA;UACxBD,IAAI,CAACd,MAAM,GAAG,YAAM;YAChB,IAAMgB,QAAQ,GAAG,EAAE,CAAA;YACnB,IAAMC,KAAK,GAAGL,CAAC,GAAG,CAACtD,KAAK,GAAG0D,QAAQ,IAAI,CAAC,CAAA;YACxC,IAAME,KAAK,GAAGL,CAAC,GAAG,CAACvD,KAAK,GAAG0D,QAAQ,IAAI,CAAC,CAAA;;AAExC;YACA9D,GAAG,CAACO,SAAS,GAAG,OAAO,CAAA;AACvBP,YAAAA,GAAG,CAACQ,QAAQ,CAACuD,KAAK,GAAG,CAAC,EAAEC,KAAK,GAAG,CAAC,EAAEF,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAG,CAAC,CAAC,CAAA;;AAE9D;AACA9D,YAAAA,GAAG,CAACiE,SAAS,CAACL,IAAI,EAAEG,KAAK,EAAEC,KAAK,EAAEF,QAAQ,EAAEA,QAAQ,CAAC,CAAA;WACxD,CAAA;UACDF,IAAI,CAACf,GAAG,GAAG,gBAAgB,CAAA;SAC9B,CAAC,OAAO/Q,KAAK,EAAE;AACZL,UAAAA,OAAO,CAACsD,IAAI,CAAC,sBAAsB,EAAEjD,KAAK,CAAC,CAAA;AAC/C,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAArB,GAAA,EAAA,sBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAwT,oBAAoBA,GAAG;AACnBzS,QAAAA,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC,CAAA;AACnD,QAAA,IAAMyN,WAAW,GAAGX,QAAQ,CAACC,cAAc,CAAC,qBAAqB,CAAC,CAAA;AAClE,QAAA,IAAIU,WAAW,EAAE;AACbA,UAAAA,WAAW,CAACR,SAAS,GAAAzL,oUAAAA,CAAAA,MAAA,CAImC,OAAOiN,MAAM,KAAK,WAAW,oFAAAjN,MAAA,CAC9BiM,WAAW,KAAK,IAAI,EAE1E,oDAAA,CAAA,CAAA;AACL,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAA1O,GAAA,EAAA,2BAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAkJ,yBAAyBA,CAACvB,WAAW,EAAElK,IAAI,EAAE;QACzCsD,OAAO,CAACC,GAAG,CAAA,4CAAA,CAAAwB,MAAA,CAA2CmF,WAAW,EAAA,UAAA,CAAA,CAAAnF,MAAA,CAAW/E,IAAI,CAAE,CAAC,CAAA;AACnF,QAAA,IAAMoQ,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAACpG,WAAW,CAAC,CAAA;QACtD,IAAI,CAACkG,SAAS,EAAE;AACZ9M,UAAAA,OAAO,CAACK,KAAK,CAAA,YAAA,CAAAoB,MAAA,CAAcmF,WAAW,mBAAa,CAAC,CAAA;AACpD,UAAA,OAAA;AACJ,SAAA;AAEAkG,QAAAA,SAAS,CAACI,SAAS,GAAAzL,m7BAAAA,CAAAA,MAAA,CAiBCiR,MAAM,CAAChW,IAAI,CAAC,CAACiW,WAAW,EAAE,EAG7C,oEAAA,CAAA,CAAA;AACL,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAA3T,GAAA,EAAA,WAAA;MAAAC,KAAA,GAAA,YAAA;QAAA,IAAA2T,UAAA,GAAAzT,iBAAA,cAAAC,YAAA,GAAAC,CAAA,CAGA,SAAAwT,SAAAA,CAAgBjM,WAAW,EAAA;AAAA,UAAA,IAAAC,OAAA;YAAAhG,MAAA;YAAAiS,OAAA;AAAAC,YAAAA,OAAA,GAAA3U,SAAA;YAAA4U,GAAA,CAAA;AAAA,UAAA,OAAA5T,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAAyT,UAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,UAAA,CAAAvT,CAAA,GAAAuT,UAAA,CAAAtT,CAAA;AAAA,cAAA,KAAA,CAAA;AAAEkH,gBAAAA,OAAO,GAAAkM,OAAA,CAAA1U,MAAA,GAAA0U,CAAAA,IAAAA,OAAA,CAAAzU,CAAAA,CAAAA,KAAAA,SAAA,GAAAyU,OAAA,CAAG,CAAA,CAAA,GAAA,EAAE,CAAA;AAAAE,gBAAAA,UAAA,CAAAvT,CAAA,GAAA,CAAA,CAAA;gBAAA,IAG7B,CAAA,IAAI,CAACmI,YAAY,EAAA;AAAAoL,kBAAAA,UAAA,CAAAtT,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AACjBK,gBAAAA,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC,CAAA;;AAE/D;AACA;;AAEA;AACA;AAAAgT,gBAAAA,UAAA,CAAAtT,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OACqB,IAAI,CAACyI,UAAU,CAACxB,WAAW,EAAEC,OAAO,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBAApDhG,MAAM,GAAAoS,UAAA,CAAA7S,CAAA,CAAA;AAAA,gBAAA,OAAA6S,UAAA,CAAA1S,CAAA,CAAA,CAAA,EACLM,MAAM,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;AAEbb,gBAAAA,OAAO,CAACC,GAAG,CAAC,yDAAyD,CAAC,CAAA;AAACgT,gBAAAA,UAAA,CAAAtT,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OAClD,IAAI,CAACyI,UAAU,CAACxB,WAAW,EAAEC,OAAO,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBAApDhG,OAAM,GAAAoS,UAAA,CAAA7S,CAAA,CAAA;AAAA,gBAAA,OAAA6S,UAAA,CAAA1S,CAAA,CAAA,CAAA,EACLM,OAAM,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAoS,gBAAAA,UAAA,CAAAtT,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;AAAAsT,gBAAAA,UAAA,CAAAvT,CAAA,GAAA,CAAA,CAAA;gBAAAsT,GAAA,GAAAC,UAAA,CAAA7S,CAAA,CAAA;gBAGjBJ,OAAO,CAACK,KAAK,CAAC,kCAAkC,EAAE2S,GAAA,CAAM1S,OAAO,CAAC,CAAA;gBAChE,IAAI,CAAC6H,yBAAyB,CAACvB,WAAW,EAAE,IAAI,CAACzI,MAAM,CAACzB,IAAI,CAAC,CAAA;AAAC,gBAAA,MAAAsW,GAAA,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,OAAAC,UAAA,CAAA1S,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAsS,SAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;SAGrE,CAAA,CAAA,CAAA;QAAA,SAvBKK,SAASA,CAAAC,IAAA,EAAA;AAAA,UAAA,OAAAP,UAAA,CAAApS,KAAA,CAAA,IAAA,EAAApC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAT8U,SAAS,CAAA;AAAA,OAAA,EAAA;AAyBf;AACR;AACA;AAFQ,OAAA;AAAA,KAAA,EAAA;MAAAlU,GAAA,EAAA,kBAAA;MAAAC,KAAA,EAGA,SAAA+I,gBAAgBA,CAACpB,WAAW,EAAElK,IAAI,EAAEmK,OAAO,EAAE;AAAA,QAAA,IAAAuM,MAAA,GAAA,IAAA,CAAA;AACzC,QAAA,IAAI,CAAC,IAAI,CAACjV,MAAM,CAACrB,WAAW,EAAE,OAAA;;AAE9B;QACA,IAAI,IAAI,CAAC4B,YAAY,EAAE;AACnB2U,UAAAA,aAAa,CAAC,IAAI,CAAC3U,YAAY,CAAC,CAAA;AAChCsB,UAAAA,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC,CAAA;AAChE,SAAA;AAEA,QAAA,IAAI,CAACvB,YAAY,GAAG4U,WAAW,cAAAnU,iBAAA,cAAAC,YAAA,EAAAC,CAAAA,CAAA,CAAC,SAAAkU,SAAA,GAAA;AAAA,UAAA,IAAAC,IAAA,CAAA;AAAA,UAAA,OAAApU,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAAiU,UAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,UAAA,CAAA/T,CAAA,GAAA+T,UAAA,CAAA9T,CAAA;AAAA,cAAA,KAAA,CAAA;AAAA8T,gBAAAA,UAAA,CAAA/T,CAAA,GAAA,CAAA,CAAA;AAExBM,gBAAAA,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC,CAAA;AAACwT,gBAAAA,UAAA,CAAA9T,CAAA,GAAA,CAAA,CAAA;gBAAA,OACvDyT,MAAI,CAACF,SAAS,CAACtM,WAAW,EAAElK,IAAI,EAAEmK,OAAO,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAAA4M,gBAAAA,UAAA,CAAA9T,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;AAAA8T,gBAAAA,UAAA,CAAA/T,CAAA,GAAA,CAAA,CAAA;gBAAA8T,IAAA,GAAAC,UAAA,CAAArT,CAAA,CAAA;AAEhDJ,gBAAAA,OAAO,CAACsD,IAAI,CAAC,8CAA8C,EAAAkQ,IAAO,CAAC,CAAA;AAAC,cAAA,KAAA,CAAA;gBAAA,OAAAC,UAAA,CAAAlT,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAgT,SAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,SAE3E,IAAE,IAAI,CAACpV,MAAM,CAACpB,eAAe,CAAC,CAAA;QAE/BiD,OAAO,CAACC,GAAG,CAAA,2DAAA,CAAAwB,MAAA,CAA0C,IAAI,CAACtD,MAAM,CAACpB,eAAe,EAAA,KAAA,CAAK,CAAC,CAAA;AAC1F,OAAA;;AAEA;AACR;AACA;;AAGQ;AACR;AACA;AAFQ,KAAA,EAAA;MAAAiC,GAAA,EAAA,aAAA;MAAAC,KAAA,GAAA,YAAA;AAAA,QAAA,IAAAyU,YAAA,GAAAvU,iBAAA,cAAAC,YAAA,EAAA,CAAAC,CAAA,CAGA,SAAAsU,SAAAA,CAAkBC,QAAQ,EAAE/R,IAAI,EAAA;AAAA,UAAA,IAAAgS,qBAAA;YAAAC,qBAAA;YAAAC,MAAA,GAAA,IAAA,CAAA;AAAA,UAAA,IAAAC,aAAA,EAAAC,YAAA,EAAA/O,GAAA,EAAAgP,UAAA,EAAA3W,UAAA,EAAA4W,KAAA,EAAAC,IAAA,CAAA;AAAA,UAAA,OAAAhV,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAA6U,UAAA,EAAA;YAAA,OAAAA,CAAAA,EAAAA,QAAAA,UAAA,CAAA1U,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,IAEvB,IAAI,CAAChB,aAAa,EAAA;AAAA0V,kBAAAA,UAAA,CAAA1U,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AACnB,gBAAA,IAAI,CAACE,gBAAgB,CAAC,qBAAqB,EAAE;AAAE+T,kBAAAA,QAAQ,EAARA,QAAAA;AAAS,iBAAC,CAAC,CAAA;AAAC,gBAAA,MACrD,IAAIpS,KAAK,CAAC,oBAAoB,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAAA,gBAAA,IAAA,CAIrC,IAAI,CAACrD,MAAM,CAACV,UAAU,EAAA;AAAA4W,kBAAAA,UAAA,CAAA1U,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AACtB,gBAAA,IAAI,CAACxB,MAAM,CAACmE,YAAY,EAAE,CAAA;gBAAC,IACvB,EAAA,IAAI,CAACnE,MAAM,CAACmE,YAAY,GAAG,IAAI,CAACnE,MAAM,CAACiE,WAAW,CAAA,EAAA;AAAAiS,kBAAAA,UAAA,CAAA1U,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAClD,gBAAA,IAAI,CAACE,gBAAgB,CAAC,4BAA4B,EAAE;AAChDyC,kBAAAA,YAAY,EAAE,IAAI,CAACnE,MAAM,CAACmE,YAAY;AACtCF,kBAAAA,WAAW,EAAE,IAAI,CAACjE,MAAM,CAACiE,WAAAA;AAC7B,iBAAC,CAAC,CAAA;AAAC,gBAAA,MACG,IAAIZ,KAAK,CAAC,6BAA6B,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;AAItD;AACMwS,gBAAAA,aAAa,GAAG,IAAI,CAACM,mBAAmB,CAACzS,IAAI,CAAC,CAEpD;AACA7B,gBAAAA,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAE2T,QAAQ,CAAC,CAAA;gBACzD5T,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAE,IAAI,CAAC9B,MAAM,CAAC7B,MAAM,CAAC,CAAA;AACjE0D,gBAAAA,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAA,EAAA,CAAAwB,MAAA,CAAK,IAAI,CAACtD,MAAM,CAAC7B,MAAM,CAAA,CAAAmF,MAAA,CAAGmS,QAAQ,CAAE,CAAC,CAAA;AAC9E5T,gBAAAA,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEoB,IAAI,CAACC,SAAS,CAAC0S,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAA;gBACnFhU,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAE,IAAI,CAAC9B,MAAM,CAACV,UAAU,CAAC,CAAA;gBACzEuC,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAE,IAAI,CAACtB,aAAa,CAAC,CAAA;;AAExE;AACMsV,gBAAAA,YAAY,GAAG,CAAA,CAAAJ,qBAAA,GAAA1X,MAAM,CAACI,YAAY,MAAA,IAAA,IAAAsX,qBAAA,KAAA,KAAA,CAAA,IAAA,CAAAA,qBAAA,GAAnBA,qBAAA,CAAqBU,SAAS,MAAAV,IAAAA,IAAAA,qBAAA,KAA9BA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,qBAAA,CAAiCD,QAAQ,CAAC9V,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,KAAI8V,QAAQ,CAAA;AACtF1O,gBAAAA,GAAG,GAAAzD,EAAAA,CAAAA,MAAA,CAAM,IAAI,CAACtD,MAAM,CAAC7B,MAAM,CAAAmF,CAAAA,MAAA,CAAGwS,YAAY,CAEhD,CAAA;AACAjU,gBAAAA,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEiF,GAAG,CAAC,CAAA;AAC7ClF,gBAAAA,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEgU,YAAY,CAAC,CAAA;gBAC7CjU,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEoB,IAAI,CAACC,SAAS,CAAAwS,CAAAA,qBAAA,GAAC3X,MAAM,CAACI,YAAY,MAAAuX,IAAAA,IAAAA,qBAAA,uBAAnBA,qBAAA,CAAqBS,SAAS,CAAC,CAAC,CAAA;;AAEzF;AACA,gBAAA,IAAI,CAAC1U,gBAAgB,CAAC,mBAAmB,EAAE;AACvC+T,kBAAAA,QAAQ,EAAEK,YAAY;AACtB/O,kBAAAA,GAAG,EAAEA,GAAG;AACRsP,kBAAAA,QAAQ,EAAEC,MAAM,CAACC,IAAI,CAACV,aAAa,CAAC;AACpCvW,kBAAAA,UAAU,EAAE,IAAI,CAACU,MAAM,CAACV,UAAAA;AAC5B,iBAAC,CAAC,CAAA;AAEEyW,gBAAAA,UAAU,GAAG,CAAC,CAAA;AACZ3W,gBAAAA,UAAU,GAAG,IAAI,CAACY,MAAM,CAACZ,UAAU,CAAA;AAAA4W,gBAAAA,KAAA,gBAAA/U,YAAA,EAAAC,CAAAA,CAAA,UAAA8U,KAAA,GAAA;AAAA,kBAAA,IAAAQ,UAAA,EAAAC,SAAA,EAAAzT,OAAA,EAAAP,QAAA,EAAAiU,SAAA,EAAAC,SAAA,EAAAjU,MAAA,EAAAkU,IAAA,CAAA;AAAA,kBAAA,OAAA3V,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAAwV,UAAA,EAAA;AAAA,oBAAA,OAAA,CAAA,EAAA,QAAAA,UAAA,CAAAtV,CAAA,GAAAsV,UAAA,CAAArV,CAAA;AAAA,sBAAA,KAAA,CAAA;AAAAqV,wBAAAA,UAAA,CAAAtV,CAAA,GAAA,CAAA,CAAA;AAI3BiV,wBAAAA,UAAU,GAAG,IAAIM,eAAe,EAAE,CAAA;wBAClCL,SAAS,GAAGrR,UAAU,CAAC,YAAA;AAAA,0BAAA,OAAMoR,UAAU,CAACO,KAAK,EAAE,CAAA;AAAA,yBAAA,EAAEnB,MAAI,CAAC5V,MAAM,CAACX,cAAc,CAAC,CAElF;AACM2D,wBAAAA,OAAO,GAAG;AACZ,0BAAA,cAAc,EAAE,kBAAA;AACpB,yBAAC,CAED;AACA;AACA;AACA;AACA;AAAA6T,wBAAAA,UAAA,CAAArV,CAAA,GAAA,CAAA,CAAA;wBAAA,OAEuBsB,KAAK,CAACiE,GAAG,EAAE;AAC9BhE,0BAAAA,MAAM,EAAE,MAAM;AACdC,0BAAAA,OAAO,EAAEA,OAAO;AAChBC,0BAAAA,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC0S,aAAa,CAAC;0BACnCmB,MAAM,EAAER,UAAU,CAACQ,MAAAA;AACvB,yBAAC,CAAC,CAAA;AAAA,sBAAA,KAAA,CAAA;wBALIvU,QAAQ,GAAAoU,UAAA,CAAA5U,CAAA,CAAA;wBAOdgV,YAAY,CAACR,SAAS,CAAC,CAAA;wBAAC,IAEnBhU,QAAQ,CAACW,EAAE,EAAA;AAAAyT,0BAAAA,UAAA,CAAArV,CAAA,GAAA,CAAA,CAAA;AAAA,0BAAA,MAAA;AAAA,yBAAA;AAAAqV,wBAAAA,UAAA,CAAArV,CAAA,GAAA,CAAA,CAAA;AAAA,wBAAA,OACYiB,QAAQ,CAAC6L,IAAI,EAAE,CAAA;AAAA,sBAAA,KAAA,CAAA;wBAAjCoI,SAAS,GAAAG,UAAA,CAAA5U,CAAA,CAAA;wBAEf,IAAI;AACA0U,0BAAAA,SAAS,GAAGzT,IAAI,CAAC2B,KAAK,CAAC6R,SAAS,CAAC,CAAA;yBACpC,CAAC,OAAOQ,CAAC,EAAE;AACRP,0BAAAA,SAAS,GAAG;AAAExU,4BAAAA,OAAO,EAAEuU,SAAAA;2BAAW,CAAA;AACtC,yBAAA;AAEAd,wBAAAA,MAAI,CAAClU,gBAAgB,CAAC,mBAAmB,EAAE;0BACvC6B,MAAM,EAAEd,QAAQ,CAACc,MAAM;0BACvB4T,UAAU,EAAE1U,QAAQ,CAAC0U,UAAU;0BAC/BjV,KAAK,EAAEyU,SAAS,CAACxU,OAAAA;AACrB,yBAAC,CAAC,CAAA;AAAC,wBAAA,MAEG,IAAIkB,KAAK,CAACsT,SAAS,CAACxU,OAAO,IAAAmB,eAAAA,CAAAA,MAAA,CAAoBb,QAAQ,CAACc,MAAM,CAAE,CAAC,CAAA;AAAA,sBAAA,KAAA,CAAA;AAAAsT,wBAAAA,UAAA,CAAArV,CAAA,GAAA,CAAA,CAAA;AAAA,wBAAA,OAGtDiB,QAAQ,CAACe,IAAI,EAAE,CAAA;AAAA,sBAAA,KAAA,CAAA;wBAA9Bd,MAAM,GAAAmU,UAAA,CAAA5U,CAAA,CAAA;AAEZ2T,wBAAAA,MAAI,CAAClU,gBAAgB,CAAC,qBAAqB,EAAE;AACzC+T,0BAAAA,QAAQ,EAAEK,YAAY;AACtBsB,0BAAAA,YAAY,EAAEd,MAAM,CAACC,IAAI,CAAC7T,MAAM,CAAA;AACpC,yBAAC,CAAC,CAAA;wBAAC,OAAAmU,UAAA,CAAAzU,CAAA,CAAA,CAAA,EAAA;AAAAH,0BAAAA,CAAA,EAEIS,MAAAA;AAAM,yBAAA,CAAA,CAAA;AAAA,sBAAA,KAAA,CAAA;AAAAmU,wBAAAA,UAAA,CAAAtV,CAAA,GAAA,CAAA,CAAA;wBAAAqV,IAAA,GAAAC,UAAA,CAAA5U,CAAA,CAAA;AAGb8T,wBAAAA,UAAU,EAAE,CAAA;AAAC,wBAAA,IAAA,EAETa,IAAA,CAAMS,IAAI,KAAK,YAAY,CAAA,EAAA;AAAAR,0BAAAA,UAAA,CAAArV,CAAA,GAAA,CAAA,CAAA;AAAA,0BAAA,MAAA;AAAA,yBAAA;AAC3BoU,wBAAAA,MAAI,CAAClU,gBAAgB,CAAC,qBAAqB,EAAE;AAAEqU,0BAAAA,UAAU,EAAVA,UAAAA;AAAW,yBAAC,CAAC,CAAA;wBAAC,IACzDA,EAAAA,UAAU,GAAG3W,UAAU,CAAA,EAAA;AAAAyX,0BAAAA,UAAA,CAAArV,CAAA,GAAA,CAAA,CAAA;AAAA,0BAAA,MAAA;AAAA,yBAAA;AAAA,wBAAA,MACjB,IAAI6B,KAAK,CAAC,2BAA2B,CAAC,CAAA;AAAA,sBAAA,KAAA,CAAA;wBAAA,OAAAwT,UAAA,CAAAzU,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AAAA,sBAAA,KAAA,CAAA;wBAAA,IAKhD2T,EAAAA,UAAU,GAAG3W,UAAU,CAAA,EAAA;AAAAyX,0BAAAA,UAAA,CAAArV,CAAA,GAAA,CAAA,CAAA;AAAA,0BAAA,MAAA;AAAA,yBAAA;AACvBoU,wBAAAA,MAAI,CAAClU,gBAAgB,CAAC,yBAAyB,EAAE;AAC7CqU,0BAAAA,UAAU,EAAVA,UAAU;0BACV7T,KAAK,EAAE0U,IAAA,CAAMzU,OAAAA;AACjB,yBAAC,CAAC,CAAA;AAAC,wBAAA,MAAAyU,IAAA,CAAA;AAAA,sBAAA,KAAA,CAAA;AAAAC,wBAAAA,UAAA,CAAArV,CAAA,GAAA,CAAA,CAAA;AAAA,wBAAA,OAKD,IAAIqP,OAAO,CAAC,UAAAC,OAAO,EAAA;AAAA,0BAAA,OAAI1L,UAAU,CAAC0L,OAAO,EAAE,IAAI,GAAGiF,UAAU,CAAC,CAAA;yBAAC,CAAA,CAAA;AAAA,sBAAA,KAAA,CAAA;wBAAA,OAAAc,UAAA,CAAAzU,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,qBAAA;AAAA,mBAAA,EAAA4T,KAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,iBAAA,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,IAxErED,EAAAA,UAAU,IAAI3W,UAAU,CAAA,EAAA;AAAA8W,kBAAAA,UAAA,CAAA1U,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAAA,gBAAA,OAAA0U,UAAA,CAAAoB,CAAA,CAAAC,kBAAA,CAAAvB,KAAA,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAAC,IAAA,GAAAC,UAAA,CAAAjU,CAAA,CAAA;AAAA,gBAAA,IAAA,EAAAgU,IAAA,KAAA,CAAA,CAAA,EAAA;AAAAC,kBAAAA,UAAA,CAAA1U,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;gBAAA,OAAA0U,UAAA,CAAA9T,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;AAAA,gBAAA,IAAA,CAAA6T,IAAA,EAAA;AAAAC,kBAAAA,UAAA,CAAA1U,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAAA,gBAAA,OAAA0U,UAAA,CAAA9T,CAAA,CAAA6T,CAAAA,EAAAA,IAAA,CAAAhU,CAAA,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAiU,gBAAAA,UAAA,CAAA1U,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,OAAA0U,UAAA,CAAA9T,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAoT,SAAA,EAAA,IAAA,CAAA,CAAA;SA2ElC,CAAA,CAAA,CAAA;AAAA,QAAA,SA7HKnM,WAAWA,CAAAmO,IAAA,EAAAC,IAAA,EAAA;AAAA,UAAA,OAAAlC,YAAA,CAAAlT,KAAA,CAAA,IAAA,EAAApC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAXoJ,WAAW,CAAA;AAAA,OAAA,EAAA;AA+HjB;AACR;AACA;AAFQ,OAAA;AAAA,KAAA,EAAA;MAAAxI,GAAA,EAAA,qBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAqV,mBAAmBA,CAACzS,IAAI,EAAE;QACtB,IAAMgU,SAAS,GAAG,EAAE,CAAA;AAEpB,QAAA,KAAA,IAAAC,EAAA,GAAAC,CAAAA,EAAAA,eAAA,GAA2BtB,MAAM,CAACuB,OAAO,CAACnU,IAAI,CAAC,EAAAiU,EAAA,GAAAC,eAAA,CAAA1X,MAAA,EAAAyX,EAAA,EAAE,EAAA;AAA5C,UAAA,IAAAG,kBAAA,GAAAvT,cAAA,CAAAqT,eAAA,CAAAD,EAAA,CAAA,EAAA,CAAA,CAAA;AAAO9W,YAAAA,GAAG,GAAAiX,kBAAA,CAAA,CAAA,CAAA;AAAEhX,YAAAA,KAAK,GAAAgX,kBAAA,CAAA,CAAA,CAAA,CAAA;AAClB,UAAA,IAAI,OAAOhX,KAAK,KAAK,QAAQ,EAAE;YAC3B4W,SAAS,CAAC7W,GAAG,CAAC,GAAG,IAAI,CAACmH,aAAa,CAAClH,KAAK,CAAC,CAAA;WAC7C,MAAM,IAAIiX,OAAA,CAAOjX,KAAK,CAAK,KAAA,QAAQ,IAAIA,KAAK,KAAK,IAAI,EAAE;YACpD4W,SAAS,CAAC7W,GAAG,CAAC,GAAG,IAAI,CAACsV,mBAAmB,CAACrV,KAAK,CAAC,CAAA;AACpD,WAAC,MAAM;AACH4W,YAAAA,SAAS,CAAC7W,GAAG,CAAC,GAAGC,KAAK,CAAA;AAC1B,WAAA;AACJ,SAAA;;AAEA;AACA;AACA4W,QAAAA,SAAS,CAAC7T,SAAS,GAAG,IAAI,CAAC7D,MAAM,CAAC4H,gBAAgB,IAAI,IAAI,CAAC5H,MAAM,CAAC3B,QAAQ,CAAA;AAC1EqZ,QAAAA,SAAS,CAAC5T,SAAS,GAAG,IAAI,CAAC9D,MAAM,CAAC6H,gBAAgB,IAAI,IAAI,CAAC7H,MAAM,CAAC1B,QAAQ,CAAA;;AAE1E;QACAuD,OAAO,CAACC,GAAG,CAAC,qDAAqD,EAAE,IAAI,CAAC9B,MAAM,CAAC3B,QAAQ,CAAC,CAAA;QACxFwD,OAAO,CAACC,GAAG,CAAC,qDAAqD,EAAE,IAAI,CAAC9B,MAAM,CAAC1B,QAAQ,GAAG,KAAK,GAAG,IAAI,CAAC0B,MAAM,CAAC1B,QAAQ,CAACyD,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAA;QAC1IF,OAAO,CAACC,GAAG,CAAC,8DAA8D,EAAE4V,SAAS,CAAC7T,SAAS,CAAC,CAAA;QAChGhC,OAAO,CAACC,GAAG,CAAC,8DAA8D,EAAE4V,SAAS,CAAC5T,SAAS,GAAG,KAAK,GAAG4T,SAAS,CAAC5T,SAAS,CAAC/B,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAA;AACjJF,QAAAA,OAAO,CAACC,GAAG,CAAC,yDAAyD,EAAEoB,IAAI,CAACC,SAAS,CAACuU,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAA;;AAE1G;QACA7V,OAAO,CAACC,GAAG,CAAC,qDAAqD,EAAE,IAAI,CAAC9B,MAAM,CAAC3B,QAAQ,CAAC,CAAA;QACxFwD,OAAO,CAACC,GAAG,CAAC,qDAAqD,EAAE,IAAI,CAAC9B,MAAM,CAAC1B,QAAQ,GAAG,KAAK,GAAG,IAAI,CAAC0B,MAAM,CAAC1B,QAAQ,CAACyD,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAA;QAC1IF,OAAO,CAACC,GAAG,CAAC,8DAA8D,EAAE4V,SAAS,CAAC7T,SAAS,CAAC,CAAA;QAChGhC,OAAO,CAACC,GAAG,CAAC,8DAA8D,EAAE4V,SAAS,CAAC5T,SAAS,GAAG,KAAK,GAAG4T,SAAS,CAAC5T,SAAS,CAAC/B,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAA;AACjJF,QAAAA,OAAO,CAACC,GAAG,CAAC,yDAAyD,EAAEoB,IAAI,CAACC,SAAS,CAACuU,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAA;AAE1G,QAAA,OAAOA,SAAS,CAAA;AACpB,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAA7W,GAAA,EAAA,mBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAkX,iBAAiBA,GAAG;QAChB,OAAO,MAAM,GAAGjT,IAAI,CAACC,GAAG,EAAE,GAAG,GAAG,GAAGiT,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;AAC9E,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAvX,GAAA,EAAA,qBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAuX,mBAAmBA,GAAG;AAClB,QAAA,IAAMhR,SAAS,GAAGtC,IAAI,CAACC,GAAG,EAAE,CAAA;AAC5B,QAAA,IAAMkT,MAAM,GAAGD,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;QACtD,IAAM3N,IAAI,MAAAnH,MAAA,CAAM+D,SAAS,EAAA/D,GAAAA,CAAAA,CAAAA,MAAA,CAAI4U,MAAM,CAAE,CAAA;AACrC,QAAA,OAAOI,IAAI,CAAC7N,IAAI,CAAC,CAAC;AACtB,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAA5J,GAAA,EAAA,kBAAA;MAAAC,KAAA,GAAA,YAAA;QAAA,IAAAyX,iBAAA,GAAAvX,iBAAA,cAAAC,YAAA,EAAAC,CAAAA,CAAA,CAGA,SAAAsX,SAAA,GAAA;AAAA,UAAA,IAAA/V,QAAA,EAAAgW,QAAA,EAAAC,IAAA,CAAA;AAAA,UAAA,OAAAzX,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAAsX,UAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,UAAA,CAAApX,CAAA,GAAAoX,UAAA,CAAAnX,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAmX,gBAAAA,UAAA,CAAApX,CAAA,GAAA,CAAA,CAAA;AAAAoX,gBAAAA,UAAA,CAAAnX,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OAE+B,IAAI,CAAC6H,WAAW,CAAC,QAAQ,EAAE;AAC9C9K,kBAAAA,IAAI,EAAE,IAAI,CAACyB,MAAM,CAACzB,IAAI;AACtBsF,kBAAAA,SAAS,EAAE,IAAI,CAAC7D,MAAM,CAAC3B,QAAQ;AAC/ByF,kBAAAA,SAAS,EAAE,IAAI,CAAC9D,MAAM,CAAC1B,QAAAA;AAC3B,iBAAC,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBAJImE,QAAQ,GAAAkW,UAAA,CAAA1W,CAAA,CAAA;AAMdJ,gBAAAA,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEW,QAAQ,CAAC,CAAA;AAE9C,gBAAA,IAAIA,QAAQ,CAACgB,OAAO,IAAIhB,QAAQ,CAACmW,cAAc,IAAInW,QAAQ,CAACmW,cAAc,CAACC,SAAS,EAAE;AAC5EJ,kBAAAA,QAAQ,GAAGhW,QAAQ,CAACmW,cAAc,CAACC,SAAS,CAAA;AAClD,kBAAA,IAAI,CAAC7Y,MAAM,CAAC8Y,SAAS,GAAGL,QAAQ,CAACM,UAAU,CAAA;;AAE3C;kBACA,IAAItW,QAAQ,CAACiI,UAAU,EAAE;AACrB,oBAAA,IAAI,CAAC1K,MAAM,CAACsM,SAAS,GAAG7J,QAAQ,CAACiI,UAAU,CAAA;AAC/C,mBAAC,MAAM;AACH;AACA,oBAAA,IAAI,CAAC1K,MAAM,CAACsM,SAAS,GAAGmM,QAAQ,CAACM,UAAU,CAAA;AAC/C,mBAAA;;AAEA;AACA;AACA,kBAAA,IAAIN,QAAQ,CAACM,UAAU,KAAK,EAAE,EAAE;AAC5B,oBAAA,IAAI,CAAC/Y,MAAM,CAACxB,WAAW,GAAG,OAAO,CAAA;AACrC,mBAAC,MAAM;oBACH,IAAI,CAACwB,MAAM,CAACxB,WAAW,GAAA,UAAA,CAAA8E,MAAA,CAAcmV,QAAQ,CAACM,UAAU,CAAE,CAAA;AAC9D,mBAAA;AAEAlX,kBAAAA,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAE;AACjDtD,oBAAAA,WAAW,EAAE,IAAI,CAACwB,MAAM,CAACxB,WAAW;AACpCsa,oBAAAA,SAAS,EAAE,IAAI,CAAC9Y,MAAM,CAAC8Y,SAAS;AAChCxM,oBAAAA,SAAS,EAAE,IAAI,CAACtM,MAAM,CAACsM,SAAAA;AAC3B,mBAAC,CAAC,CAAA;AACN,iBAAC,MAAM;AACHzK,kBAAAA,OAAO,CAACsD,IAAI,CAAC,sFAAsF,CAAC,CAAA;AACpG,kBAAA,IAAI,CAACnF,MAAM,CAACxB,WAAW,cAAA8E,MAAA,CAAc,IAAI,CAACtD,MAAM,CAAC8Y,SAAS,IAAI,SAAS,CAAE,CAAA;AAC7E,iBAAA;AAACH,gBAAAA,UAAA,CAAAnX,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;AAAAmX,gBAAAA,UAAA,CAAApX,CAAA,GAAA,CAAA,CAAA;gBAAAmX,IAAA,GAAAC,UAAA,CAAA1W,CAAA,CAAA;gBAEDJ,OAAO,CAACsD,IAAI,CAAC,mEAAmE,EAAEuT,IAAA,CAAMvW,OAAO,CAAC,CAAA;AAChG,gBAAA,IAAI,CAACnC,MAAM,CAACxB,WAAW,GAAG,iBAAiB,CAAA;AAAC,cAAA,KAAA,CAAA;gBAAA,OAAAma,UAAA,CAAAvW,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAoW,SAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;SAEnD,CAAA,CAAA,CAAA;AAAA,QAAA,SA3CK7W,gBAAgBA,GAAA;AAAA,UAAA,OAAA4W,iBAAA,CAAAlW,KAAA,CAAA,IAAA,EAAApC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAhB0B,gBAAgB,CAAA;AAAA,OAAA,EAAA;AA6CtB;AACR;AACA;AAFQ,OAAA;AAAA,KAAA,EAAA;MAAAd,GAAA,EAAA,YAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAsO,UAAUA,CAAC3Q,KAAK,EAAE;AACd,QAAA,IAAMkQ,SAAS,GAAGC,QAAQ,CAAC2E,aAAa,CAAC,iBAAiB,CAAC,CAAA;AAC3D,QAAA,IAAI5E,SAAS,EAAE;AACXA,UAAAA,SAAS,CAACO,SAAS,GAAA,8BAAA,CAAA5L,MAAA,CAAkC7E,KAAK,CAAE,CAAA;AAChE,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAoC,GAAA,EAAA,aAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAyL,WAAWA,CAACrK,KAAK,EAAE;AACfL,QAAAA,OAAO,CAACK,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC,CAAA;AAEzC,QAAA,IAAI,IAAI,CAAClC,MAAM,CAACjB,OAAO,EAAE;AACrB,UAAA,IAAI,CAACiB,MAAM,CAACjB,OAAO,CAACmD,KAAK,CAAC,CAAA;AAC9B,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAArB,GAAA,EAAA,kBAAA;MAAAC,KAAA,GAAA,YAAA;QAAA,IAAAkY,iBAAA,GAAAhY,iBAAA,cAAAC,YAAA,EAAAC,CAAAA,CAAA,CAGA,SAAA+X,SAAA,GAAA;AAAA,UAAA,IAAA1V,MAAA,EAAA2V,YAAA,EAAAC,SAAA,EAAAC,IAAA,CAAA;AAAA,UAAA,OAAAnY,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAAgY,UAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA,QAAAA,UAAA,CAAA9X,CAAA,GAAA8X,UAAA,CAAA7X,CAAA;AAAA,cAAA,KAAA,CAAA;AACU+B,gBAAAA,MAAM,GAAG;AACX+V,kBAAAA,GAAG,EAAE,KAAK;AACVC,kBAAAA,SAAS,EAAE,KAAK;AAChBC,kBAAAA,KAAK,EAAE,KAAA;AACX,iBAAC,CAED;AAAAH,gBAAAA,UAAA,CAAA9X,CAAA,GAAA,CAAA,CAAA;AAAA8X,gBAAAA,UAAA,CAAA7X,CAAA,GAAA,CAAA,CAAA;gBAAA,OAE+BsB,KAAK,CAAC,IAAI,CAAC9C,MAAM,CAAC7B,MAAM,GAAG,QAAQ,EAAE;AAC5D4E,kBAAAA,MAAM,EAAE,KAAK;AACb0W,kBAAAA,OAAO,EAAE,IAAA;AACb,iBAAC,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBAHIP,YAAY,GAAAG,UAAA,CAAApX,CAAA,CAAA;gBAAA,IAKdiX,CAAAA,YAAY,CAAC9V,EAAE,EAAA;AAAAiW,kBAAAA,UAAA,CAAA7X,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAAA6X,gBAAAA,UAAA,CAAA7X,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OACS0X,YAAY,CAAC1V,IAAI,EAAE,CAAA;AAAA,cAAA,KAAA,CAAA;gBAArC2V,SAAS,GAAAE,UAAA,CAAApX,CAAA,CAAA;AACfsB,gBAAAA,MAAM,CAAC+V,GAAG,GAAGH,SAAS,CAAC5V,MAAM,KAAK,aAAa,CAAA;gBAC/C1B,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEqX,SAAS,CAAC5V,MAAM,CAAC,CAAA;AAAC8V,gBAAAA,UAAA,CAAA7X,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;gBAEhD+B,MAAM,CAAC+V,GAAG,GAAG,KAAK,CAAA;AAAC,cAAA,KAAA,CAAA;AAAAD,gBAAAA,UAAA,CAAA7X,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;AAAA6X,gBAAAA,UAAA,CAAA9X,CAAA,GAAA,CAAA,CAAA;gBAAA6X,IAAA,GAAAC,UAAA,CAAApX,CAAA,CAAA;gBAGvBJ,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEsX,IAAA,CAAMjX,OAAO,CAAC,CAAA;gBACjDoB,MAAM,CAAC+V,GAAG,GAAG,KAAK,CAAA;AAAC,cAAA,KAAA,CAAA;AAGvB;gBACA/V,MAAM,CAACgW,SAAS,GAAG,IAAI,CAAC9Y,MAAM,IAAI,IAAI,CAACA,MAAM,CAACoF,SAAS,CAAA;;AAEvD;AACAtC,gBAAAA,MAAM,CAACiW,KAAK,GAAGjW,MAAM,CAAC+V,GAAG,CAAA;AAAC,gBAAA,OAAAD,UAAA,CAAAjX,CAAA,CAAA,CAAA,EAEnBmB,MAAM,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAA0V,SAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;SAChB,CAAA,CAAA,CAAA;AAAA,QAAA,SAjCKS,gBAAgBA,GAAA;AAAA,UAAA,OAAAV,iBAAA,CAAA3W,KAAA,CAAA,IAAA,EAAApC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAhByZ,gBAAgB,CAAA;AAAA,OAAA,EAAA;AAmCtB;AACR;AACA;AAFQ,OAAA;AAAA,KAAA,EAAA;MAAA7Y,GAAA,EAAA,oBAAA;MAAAC,KAAA,GAAA,YAAA;QAAA,IAAA6Y,mBAAA,GAAA3Y,iBAAA,cAAAC,YAAA,EAAAC,CAAAA,CAAA,CAGA,SAAA0Y,SAAA,GAAA;AAAA,UAAA,IAAAH,OAAA;YAAAI,SAAA;YAAAtW,MAAA;AAAAuW,YAAAA,OAAA,GAAA7Z,SAAA,CAAA;AAAA,UAAA,OAAAgB,YAAA,EAAA,CAAAI,CAAA,CAAA,UAAA0Y,UAAA,EAAA;YAAA,OAAAA,CAAAA,EAAAA,QAAAA,UAAA,CAAAvY,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAyBiY,OAAO,GAAAK,OAAA,CAAA5Z,MAAA,GAAA,CAAA,IAAA4Z,OAAA,CAAA,CAAA,CAAA,KAAA3Z,SAAA,GAAA2Z,OAAA,CAAA,CAAA,CAAA,GAAG,IAAI,CAAA;AAC7BD,gBAAAA,SAAS,GAAG9U,IAAI,CAACC,GAAG,EAAE,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,IAErBD,EAAAA,IAAI,CAACC,GAAG,EAAE,GAAG6U,SAAS,GAAGJ,OAAO,CAAA,EAAA;AAAAM,kBAAAA,UAAA,CAAAvY,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AAAAuY,gBAAAA,UAAA,CAAAvY,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OACd,IAAI,CAACkY,gBAAgB,EAAE,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAtCnW,MAAM,GAAAwW,UAAA,CAAA9X,CAAA,CAAA;gBAAA,IAERsB,CAAAA,MAAM,CAACiW,KAAK,EAAA;AAAAO,kBAAAA,UAAA,CAAAvY,CAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,MAAA;AAAA,iBAAA;AACZK,gBAAAA,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC,CAAA;AAAC,gBAAA,OAAAiY,UAAA,CAAA3X,CAAA,CAAA,CAAA,EAC5BmB,MAAM,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;AAGjB1B,gBAAAA,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEyB,MAAM,CAAC,CAAA;AAACwW,gBAAAA,UAAA,CAAAvY,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,OACzC,IAAIqP,OAAO,CAAC,UAAAC,OAAO,EAAA;AAAA,kBAAA,OAAI1L,UAAU,CAAC0L,OAAO,EAAE,IAAI,CAAC,CAAA;iBAAC,CAAA,CAAA;AAAA,cAAA,KAAA,CAAA;AAAAiJ,gBAAAA,UAAA,CAAAvY,CAAA,GAAA,CAAA,CAAA;AAAA,gBAAA,MAAA;AAAA,cAAA,KAAA,CAAA;AAAA,gBAAA,MAGrD,IAAI6B,KAAK,CAAC,uDAAuD,CAAC,CAAA;AAAA,cAAA,KAAA,CAAA;gBAAA,OAAA0W,UAAA,CAAA3X,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,aAAA;AAAA,WAAA,EAAAwX,SAAA,EAAA,IAAA,CAAA,CAAA;SAC3E,CAAA,CAAA,CAAA;AAAA,QAAA,SAhBKxQ,kBAAkBA,GAAA;AAAA,UAAA,OAAAuQ,mBAAA,CAAAtX,KAAA,CAAA,IAAA,EAAApC,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAlBmJ,kBAAkB,CAAA;AAAA,OAAA,EAAA;AAkBxB;AACR;AACA;AAFQ,OAAA;AAAA,KAAA,EAAA;MAAAvI,GAAA,EAAA,WAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAkZ,SAASA,GAAG;AACR;QACA,IAAI,IAAI,CAACtQ,YAAY,EAAE;UACnB,OAAO,IAAI,CAACA,YAAY,CAAA;AAC5B,SAAA;;AAEA;AACA,QAAA,OAAO,IAAI,CAAA;AACf,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAA7I,GAAA,EAAA,SAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAmZ,OAAOA,GAAG;QACN,IAAI,CAACC,eAAe,EAAE,CAAA;;AAEtB;QACA,IAAI,IAAI,CAACzZ,MAAM,EAAE;AACb,UAAA,IAAI,CAACA,MAAM,CAAC0Z,UAAU,EAAE,CAAA;UACxB,IAAI,CAAC1Z,MAAM,GAAG,IAAI,CAAA;AAClBoB,UAAAA,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC,CAAA;AAC1C,SAAA;QAEA,IAAI,CAACtB,aAAa,GAAG,KAAK,CAAA;AAC1B,QAAA,IAAI,CAACkB,gBAAgB,CAAC,aAAa,CAAC,CAAA;AACpCG,QAAAA,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC,CAAA;AACrC,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAjB,GAAA,EAAA,iBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAoZ,eAAeA,GAAG;QACd,IAAI,IAAI,CAAC3Z,YAAY,EAAE;AACnB2U,UAAAA,aAAa,CAAC,IAAI,CAAC3U,YAAY,CAAC,CAAA;UAChC,IAAI,CAACA,YAAY,GAAG,IAAI,CAAA;AACxBsB,UAAAA,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC,CAAA;AACtD,SAAA;AACJ,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAjB,GAAA,EAAA,iBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAsZ,eAAeA,GAAG;AACd,QAAA,OAAOpc,MAAM,CAAC2J,kBAAkB,IAAI,EAAE,CAAA;AAC1C,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAA9G,GAAA,EAAA,mBAAA;AAAAC,MAAAA,KAAA,EAGA,SAAAuZ,iBAAiBA,GAAG;QAChBrc,MAAM,CAAC2J,kBAAkB,GAAG,EAAE,CAAA;AAC9B,QAAA,IAAI,CAACjG,gBAAgB,CAAC,uBAAuB,CAAC,CAAA;AAClD,OAAA;;AAEA;AACR;AACA;AAFQ,KAAA,EAAA;MAAAb,GAAA,EAAA,cAAA;AAAAC,MAAAA,KAAA,EAGA,SAAA0F,YAAYA,GAAG;AACX3E,QAAAA,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC,CAAA;;AAEtD;QACA,IAAMwY,YAAY,GAAG,CAAC,SAAS,EAAE,cAAc,EAAE,qBAAqB,CAAC,CAAA;QACvE,IAAI3L,SAAS,GAAG,IAAI,CAAA;AAEpB,QAAA,KAAA,IAAA4L,GAAA,GAAA,CAAA,EAAAC,aAAA,GAAiBF,YAAY,EAAAC,GAAA,GAAAC,aAAA,CAAAta,MAAA,EAAAqa,GAAA,EAAE,EAAA;AAA1B,UAAA,IAAM3U,EAAE,GAAA4U,aAAA,CAAAD,GAAA,CAAA,CAAA;AACT5L,UAAAA,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAACjJ,EAAE,CAAC,CAAA;AACvC,UAAA,IAAI+I,SAAS,EAAE,MAAA;AACnB,SAAA;QAEA,IAAI,CAACA,SAAS,EAAE;AACZ9M,UAAAA,OAAO,CAACsD,IAAI,CAAC,oDAAoD,CAAC,CAAA;AAClE,UAAA,OAAA;AACJ,SAAA;;AAEA;QACAwJ,SAAS,CAACI,SAAS,GAiClB,49CAAA,CAAA;AAEDlN,QAAAA,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC,CAAA;AAC/C,OAAA;AAAC,KAAA,CAAA,CAAA,CAAA;GAGL,EAAA,CAAA;EACA9D,MAAM,CAAC+B,MAAM,GAAGA,MAAM,CAAA;EACtB/B,MAAM,CAACyc,cAAc,GAAG,IAAI,CAAA;;AAE5B;AACAzc,EAAAA,MAAM,CAAC0c,UAAU,GAAG,UAAS1a,MAAM,EAAE;IACjC,IAAI;AACAhC,MAAAA,MAAM,CAACyc,cAAc,GAAG,IAAI1a,MAAM,CAACC,MAAM,CAAC,CAAA;MAC1C,OAAOhC,MAAM,CAACyc,cAAc,CAAA;KAC/B,CAAC,OAAOvY,KAAK,EAAE;AACZL,MAAAA,OAAO,CAACK,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC,CAAA;AACnE,MAAA,MAAMA,KAAK,CAAA;AACf,KAAA;GACH,CAAA;AAEL,CAAC,EAAElE,MAAM,CAAC"}