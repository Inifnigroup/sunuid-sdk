#!/bin/bash

# üö´ Script de V√©rification - Pas de Publication Automatique
# SunuID SDK - Protection contre la publication automatique

echo "üîç V√©rification de la publication automatique..."
echo "================================================"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Variables de statut
STATUS=0

# 1. V√©rifier package.json
echo "üì¶ V√©rification de package.json..."

if grep -q -E "(prepare|prepublishOnly|postpublish|preversion|postversion)" package.json; then
    echo -e "${RED}‚ùå DANGER: Scripts de publication automatique d√©tect√©s dans package.json${NC}"
    echo "Scripts dangereux trouv√©s:"
    grep -E "(prepare|prepublishOnly|postpublish|preversion|postversion)" package.json
    STATUS=1
else
    echo -e "${GREEN}‚úÖ Aucun script de publication automatique dans package.json${NC}"
fi

# 2. V√©rifier Git hooks
echo ""
echo "üîó V√©rification des Git hooks..."

if ls -la .git/hooks/ 2>/dev/null | grep -q -E "(pre-commit|post-commit|pre-push)"; then
    echo -e "${YELLOW}‚ö†Ô∏è  Hooks Git d√©tect√©s:${NC}"
    ls -la .git/hooks/ | grep -E "(pre-commit|post-commit|pre-push)"
    echo -e "${YELLOW}   V√©rifiez manuellement qu'ils ne publient pas automatiquement${NC}"
else
    echo -e "${GREEN}‚úÖ Aucun hook Git de publication d√©tect√©${NC}"
fi

# 3. V√©rifier CI/CD
echo ""
echo "ü§ñ V√©rification des workflows CI/CD..."

if [ -d ".github/workflows" ]; then
    if ls -la .github/workflows/ | grep -q -E "(publish|release)"; then
        echo -e "${RED}‚ùå DANGER: Workflows de publication d√©tect√©s${NC}"
        ls -la .github/workflows/ | grep -E "(publish|release)"
        STATUS=1
    else
        echo -e "${GREEN}‚úÖ Aucun workflow de publication d√©tect√©${NC}"
    fi
else
    echo -e "${GREEN}‚úÖ Aucun dossier workflows GitHub d√©tect√©${NC}"
fi

# 4. V√©rifier les scripts npm dangereux
echo ""
echo "üìã V√©rification des scripts npm..."

DANGEROUS_SCRIPTS=("prepare" "prepublishOnly" "postpublish" "preversion" "postversion")
for script in "${DANGEROUS_SCRIPTS[@]}"; do
    if npm run "$script" 2>/dev/null; then
        echo -e "${RED}‚ùå DANGER: Script '$script' existe et peut √™tre ex√©cut√©${NC}"
        STATUS=1
    fi
done

if [ $STATUS -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Aucun script npm dangereux d√©tect√©${NC}"
fi

# 5. V√©rifier les variables d'environnement
echo ""
echo "üåç V√©rification des variables d'environnement..."

if [ -n "$NPM_TOKEN" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  NPM_TOKEN d√©tect√© dans l'environnement${NC}"
    echo "   Assurez-vous qu'il n'est pas utilis√© pour la publication automatique"
fi

if [ -n "$NPM_USERNAME" ] && [ -n "$NPM_PASSWORD" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Credentials NPM d√©tect√©s dans l'environnement${NC}"
    echo "   Assurez-vous qu'ils ne sont pas utilis√©s pour la publication automatique"
fi

# 6. V√©rifier les fichiers de configuration
echo ""
echo "‚öôÔ∏è  V√©rification des fichiers de configuration..."

if [ -f ".npmrc" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Fichier .npmrc d√©tect√©${NC}"
    echo "   V√©rifiez qu'il ne contient pas de configuration de publication automatique"
fi

if [ -f ".nvmrc" ]; then
    echo -e "${GREEN}‚úÖ Fichier .nvmrc d√©tect√© (normal)${NC}"
fi

# R√©sultat final
echo ""
echo "================================================"
if [ $STATUS -eq 0 ]; then
    echo -e "${GREEN}‚úÖ V√âRIFICATION TERMIN√âE - AUCUNE PUBLICATION AUTOMATIQUE D√âTECT√âE${NC}"
    echo -e "${GREEN}   Le SDK est configur√© pour la publication manuelle uniquement${NC}"
    exit 0
else
    echo -e "${RED}‚ùå V√âRIFICATION √âCHOU√âE - PUBLICATION AUTOMATIQUE D√âTECT√âE${NC}"
    echo -e "${RED}   CORRIGEZ LES PROBL√àMES AVANT DE CONTINUER${NC}"
    exit 1
fi 